<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laoyu&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-11T14:56:34.218Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>laoyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shell编程学习笔记</title>
    <link href="http://example.com/2021/12/11/shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2021/12/11/shell%E7%BC%96%E7%A8%8B/</id>
    <published>2021-12-11T12:47:50.010Z</published>
    <updated>2021-12-11T14:56:34.218Z</updated>
    
    <content type="html"><![CDATA[<p>shell编程学习笔记</p><a id="more"></a>        <h1 id="shell"   >          <a href="#shell" class="heading-link"><i class="fas fa-link"></i></a>shell</h1>      <p>shell是一个命令行解释器，它为用户提供了一个向linux内核发送请求以便运行程序的界面系统级程序，用户可以用shell来启动，挂起，停止甚至是编写一些程序。</p>        <h1 id="shell脚本的执行方式"   >          <a href="#shell脚本的执行方式" class="heading-link"><i class="fas fa-link"></i></a>shell脚本的执行方式</h1>              <h2 id="脚本格式要求"   >          <a href="#脚本格式要求" class="heading-link"><i class="fas fa-link"></i></a>脚本格式要求</h2>      <ul><li>脚本以<code>#!/bin/bash</code>开头</li><li>脚本需要有可执行权限</li></ul>        <h2 id="脚本执行方式"   >          <a href="#脚本执行方式" class="heading-link"><i class="fas fa-link"></i></a>脚本执行方式</h2>              <h3 id="直接执行具有’x’权限的脚本文件"   >          <a href="#直接执行具有’x’权限的脚本文件" class="heading-link"><i class="fas fa-link"></i></a>直接执行具有’x’权限的脚本文件</h3>      <p>首先赋予脚本的x（执行）权限，再执行脚本</p><p><code>./绝对路径</code> 或 <code>./相对路径</code></p>        <h3 id="使用指定的解释器程序"   >          <a href="#使用指定的解释器程序" class="heading-link"><i class="fas fa-link"></i></a>使用指定的解释器程序</h3>      <ul><li>bash hello.sh</li><li>sh hello.sh</li></ul>        <h3 id="通过source命令或’-‘读取脚本内容执行"   >          <a href="#通过source命令或’-‘读取脚本内容执行" class="heading-link"><i class="fas fa-link"></i></a>通过source命令或’.‘读取脚本内容执行</h3>      <ul><li>source hello.sh</li><li>.hello.sh</li></ul>        <h1 id="shell-变量"   >          <a href="#shell-变量" class="heading-link"><i class="fas fa-link"></i></a>shell 变量</h1>              <h2 id="shell变量的介绍"   >          <a href="#shell变量的介绍" class="heading-link"><i class="fas fa-link"></i></a>shell变量的介绍</h2>      <ul><li>linux shell中的变量分为：系统变量和用户自定义变量</li><li>系统变量：<code>$HOME</code>,<code>$PWD</code>,<code>$SHELL</code>,<code>$USER</code></li><li>显示当前shell中的所有变量：set</li></ul>        <h2 id="shell变量的定义"   >          <a href="#shell变量的定义" class="heading-link"><i class="fas fa-link"></i></a>shell变量的定义</h2>              <h3 id="基本语法"   >          <a href="#基本语法" class="heading-link"><i class="fas fa-link"></i></a>基本语法</h3>      <ul><li>定义变量：变量名=值（中间不能有空格）</li><li>撤销变量：unset 变量</li><li>声明静态变量：readonly 变量，注意：不能unset</li></ul>        <h3 id="定义变量的规则"   >          <a href="#定义变量的规则" class="heading-link"><i class="fas fa-link"></i></a>定义变量的规则</h3>      <ul><li>变量名称可以由字母、数字和下划线组成，但不能以<strong>数字</strong>开头</li><li>等号两侧不能有空格</li><li>变量名称一般习惯大写</li></ul>        <h1 id="设置环境变量（全局变量）"   >          <a href="#设置环境变量（全局变量）" class="heading-link"><i class="fas fa-link"></i></a>设置环境变量（全局变量）</h1>              <h2 id="基本语法-1"   >          <a href="#基本语法-1" class="heading-link"><i class="fas fa-link"></i></a>基本语法</h2>      <ul><li><p>将shell变量输出位环境变量/全局变量</p><pre><code>  export 变量名=变量值</code></pre></li><li><p>让修改后的配置信息立即生效</p><pre><code>  source 配置文件</code></pre></li><li><p>查询环境变量的值</p><pre><code>  echo $变量名</code></pre></li></ul>        <h1 id="位置参数变量"   >          <a href="#位置参数变量" class="heading-link"><i class="fas fa-link"></i></a>位置参数变量</h1>      <p>得到命令行的参数信息</p><p><strong>基本语法</strong></p><ul><li><code>$n</code>：n为数字，<code>$0</code>代表命令本身，<code>$1-$9</code>代表第一到第九个参数，十以上的参数需要用大括号包含，如：<code>$&#123;10&#125;</code></li><li><code>$*</code>：代表命令行中所有的参数，把所有的参数看成一个整体</li><li><code>$@</code>：代表命令行中所有的参数，把每个参数区别对待</li><li><code>$#</code>：命令行中所有参数的个数</li></ul>        <h1 id="预定义变量"   >          <a href="#预定义变量" class="heading-link"><i class="fas fa-link"></i></a>预定义变量</h1>      <p>shell设计者事先定义好的变量，可以直接在shell脚本中使用</p><p><strong>基本语法</strong></p><ul><li><code>$$</code>：当前进程的进程号（PID）</li><li><code>$!</code>：后台运行的最后一个进程的进程号（PID）</li><li><code>$?</code>：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令的正确执行；如果这个变量的值为非0，则证明上一个命令执行不正确。</li></ul>        <h1 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a>运算符</h1>      <ul><li><code>&quot;$((运算式))&quot;</code> 或 <code>&quot;$[运算式]&quot;</code> </li><li>expr m + n （运算符之间要有空格）</li><li>如果希望将expr的结果赋给某个变量，使用``(反引号)</li></ul>        <h1 id="条件判断"   >          <a href="#条件判断" class="heading-link"><i class="fas fa-link"></i></a>条件判断</h1>              <h2 id="判断语句"   >          <a href="#判断语句" class="heading-link"><i class="fas fa-link"></i></a>判断语句</h2>              <h3 id="基本语法-2"   >          <a href="#基本语法-2" class="heading-link"><i class="fas fa-link"></i></a>基本语法</h3>      <pre><code>if [ condition ] (condition 前后要有空格)   </code></pre><p>非空返回true</p>        <h3 id="判断语句-1"   >          <a href="#判断语句-1" class="heading-link"><i class="fas fa-link"></i></a>判断语句</h3>      <p><strong>常用的判断条件</strong></p>        <h4 id="字符串比较"   >          <a href="#字符串比较" class="heading-link"><i class="fas fa-link"></i></a>字符串比较</h4>      <p> <code>=</code>  ： 字符串比较</p>        <h4 id="两个整数的比较"   >          <a href="#两个整数的比较" class="heading-link"><i class="fas fa-link"></i></a>两个整数的比较</h4>      <ul><li><code>-lt</code>：小于</li><li><code>-le</code>：小于灯与</li><li><code>-eq</code>：等于</li><li><code>-gt</code>：大于</li><li><code>-ge</code>：大于等于</li><li><code>-ne</code>：不等于</li></ul>        <h4 id="按照文件权限进行判断"   >          <a href="#按照文件权限进行判断" class="heading-link"><i class="fas fa-link"></i></a>按照文件权限进行判断</h4>      <ul><li><code>r</code>：有读的权限</li><li><code>w</code>：有写的权限</li><li><code>x</code>：有执行的权限</li></ul>        <h4 id="按照文件类型进行判断"   >          <a href="#按照文件类型进行判断" class="heading-link"><i class="fas fa-link"></i></a>按照文件类型进行判断</h4>      <ul><li><code>-f</code>：文件存在并且是一个常规文件</li><li><code>-e</code>：文件存在</li><li><code>-d</code>：文件存在且是一个目录</li></ul>        <h1 id="流程控制"   >          <a href="#流程控制" class="heading-link"><i class="fas fa-link"></i></a>流程控制</h1>              <h2 id="if-判断"   >          <a href="#if-判断" class="heading-link"><i class="fas fa-link"></i></a>if 判断</h2>              <h3 id="基本语法-3"   >          <a href="#基本语法-3" class="heading-link"><i class="fas fa-link"></i></a>基本语法</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">fi</span><br></pre></td></tr></table></div></figure><p><strong>多分支</strong></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">elif [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">fi</span><br></pre></td></tr></table></div></figure>        <h2 id="case-语句"   >          <a href="#case-语句" class="heading-link"><i class="fas fa-link"></i></a>case 语句</h2>              <h3 id="基本语法-4"   >          <a href="#基本语法-4" class="heading-link"><i class="fas fa-link"></i></a>基本语法</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">如果变量的值等于值1，则执行程序1</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">如果变量的值等于值2，则执行程序2</span><br><span class="line">;;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">*)</span><br><span class="line">如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">;;</span><br><span class="line">esac </span><br></pre></td></tr></table></div></figure>        <h2 id="for-循环"   >          <a href="#for-循环" class="heading-link"><i class="fas fa-link"></i></a>for 循环</h2>              <h3 id="基本语法1"   >          <a href="#基本语法1" class="heading-link"><i class="fas fa-link"></i></a>基本语法1</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3...</span><br><span class="line">do</span><br><span class="line">代码</span><br><span class="line">done</span><br></pre></td></tr></table></div></figure>        <h3 id="基本语法2"   >          <a href="#基本语法2" class="heading-link"><i class="fas fa-link"></i></a>基本语法2</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for((初始值;循环控制条件;变量变化))</span><br><span class="line">do </span><br><span class="line">代码</span><br><span class="line">done</span><br></pre></td></tr></table></div></figure>        <h2 id="while-循环"   >          <a href="#while-循环" class="heading-link"><i class="fas fa-link"></i></a>while 循环</h2>              <h3 id="基本语法1-1"   >          <a href="#基本语法1-1" class="heading-link"><i class="fas fa-link"></i></a>基本语法1</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">代码</span><br><span class="line">done</span><br></pre></td></tr></table></div></figure>        <h1 id="read-—-读取控制台输入"   >          <a href="#read-—-读取控制台输入" class="heading-link"><i class="fas fa-link"></i></a>read —- 读取控制台输入</h1>              <h2 id="基本语法-5"   >          <a href="#基本语法-5" class="heading-link"><i class="fas fa-link"></i></a>基本语法</h2>      <pre><code>read (选项) (参数)</code></pre>        <h2 id="选项"   >          <a href="#选项" class="heading-link"><i class="fas fa-link"></i></a>选项</h2>      <ul><li><code>-p</code>：执行读取值时的提示符</li><li><code>-t</code>：指定读取值时等待时间（秒），如果没有在指定的时间内输入，就不再等待</li></ul>        <h2 id="参数"   >          <a href="#参数" class="heading-link"><i class="fas fa-link"></i></a>参数</h2>      <p>便令： 指定读取值的变量名</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;shell编程学习笔记&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>linux学习笔记</title>
    <link href="http://example.com/2021/12/09/linux%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/12/09/linux%E7%AC%94%E8%AE%B0/</id>
    <published>2021-12-09T12:19:09.370Z</published>
    <updated>2021-12-11T12:50:43.920Z</updated>
    
    <content type="html"><![CDATA[<p>linux学习笔记</p><a id="more"></a>        <h1 id="vi和vim编辑器"   >          <a href="#vi和vim编辑器" class="heading-link"><i class="fas fa-link"></i></a>vi和vim编辑器</h1>      <ul><li>vi 文本编辑器</li><li>vim 增强版vi，具有程序编程能力等。</li></ul>        <h2 id="三种模式"   >          <a href="#三种模式" class="heading-link"><i class="fas fa-link"></i></a>三种模式</h2>              <h3 id="命令模式"   >          <a href="#命令模式" class="heading-link"><i class="fas fa-link"></i></a>命令模式</h3>      <p>刚启动vim，就进入命令模式。<br>此时敲下键盘被vim识别为命令</p><p> <strong>常用命令：</strong></p><p><strong>切换模式</strong></p><ul><li><code>i</code> 切换到输入模式，以输入字符。</li><li><code>:</code> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p><strong>移动光标</strong></p><ul><li><code>nG</code>    n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</li><li><code>gg</code>    移动到这个档案的第一行，相当于 1G 啊！</li><li><code>n&lt;Enter&gt;</code>    n 为数字。光标向下移动 n 行</li></ul><p><strong>搜索替换</strong></p><ul><li><code>/word</code>    向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</li><li><code>?word</code>    向光标之上寻找一个字符串名称为 word 的字符串。</li><li><code>n</code>    向上寻找</li><li><code>N</code>     向下寻找</li></ul><p><strong>删除</strong></p><ul><li><code>nx</code>    n 为数字，连续向后删除 n 个字符。</li><li><code>dd</code>    删除游标所在的那一整行</li><li><code>ndd</code>    n 为数字。删除光标所在的向下 n 行</li><li><code>d1G</code>    删除光标所在到第一行的所有数据</li><li><code>dG</code>    删除光标所在到最后一行的所有数据</li></ul><p><strong>复制</strong></p><ul><li><code>yy</code>    复制游标所在的那一行</li><li><code>nyy</code>    n 为数字。复制光标所在的向下 n 行</li><li><code>y1G</code>    复制游标所在行到第一行的所有数据</li><li><code>yG</code>    复制游标所在行到最后一行的所有数据</li></ul><p><strong>粘贴</strong></p><ul><li><code>p, P</code>    <strong>p</strong> 为将已复制的数据在光标下一行贴上，<strong>P</strong> 则为贴在游标上一行！</li><li><code>J</code>    将光标所在行与下一行的数据结合成同一行</li><li><code>u</code>    复原前一个动作。</li><li>[Ctrl]+r    重做上一个动作。</li></ul>        <h3 id="插入模式"   >          <a href="#插入模式" class="heading-link"><i class="fas fa-link"></i></a>插入模式</h3>      <p>在命令模式下按下i就进入了输入模式。</p><p><strong>ESC，退出输入模式，切换到命令模式</strong></p>        <h3 id="底行命令模式"   >          <a href="#底行命令模式" class="heading-link"><i class="fas fa-link"></i></a>底行命令模式</h3>      <p>在命令模式下按下 <strong>:（英文冒号）</strong> 就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底行命令模式中，基本的命令有：</p><ul><li><code>:q</code>  &nbsp;&nbsp;&nbsp;退出程序</li><li><code>:q!</code>    &nbsp;&nbsp;使用 ! 为强制离开不储存。</li><li><code>:w</code> &nbsp;&nbsp;&nbsp;保存文件</li><li><code>:wq</code>    &nbsp;&nbsp;储存后离开，若为 :wq! 则为强制储存后离开</li><li><code>:! command</code>    暂时离开 vi 到指令行模式下执行 command 的显示结果！例如<br>『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</li></ul><p>按ESC键可随时退出底线命令模式。</p>        <h3 id="行号"   >          <a href="#行号" class="heading-link"><i class="fas fa-link"></i></a>行号</h3>      <p>在底行模式下：</p><ul><li><code>:set nu</code>     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br> 显示行号，设定之后，会在每一行的前缀显示该行的行号</li><li><code>:set nonu</code>    &nbsp;&nbsp; 与 set nu 相反，为取消行号！</li></ul>        <h3 id="三种模式的转换"   >          <a href="#三种模式的转换" class="heading-link"><i class="fas fa-link"></i></a>三种模式的转换</h3>      <p><img src="https://s2.loli.net/2021/12/09/kH1lvsnhu9F5zrE.png" alt="image.png"></p>        <h1 id="关机和重启"   >          <a href="#关机和重启" class="heading-link"><i class="fas fa-link"></i></a>关机和重启</h1>      <p><code>sync</code> 把内存的数据同步到磁盘，执行关机或重启命令前先执行此命令</p>        <h2 id="关机"   >          <a href="#关机" class="heading-link"><i class="fas fa-link"></i></a>关机</h2>      <ul><li><p>shutdown</p><pre><code>  shutdown -h now 立刻关机  shutdown -h 1   1分钟后关机</code></pre></li><li><p>halt</p></li><li><p>systemctl pweroff</p></li><li><p>init 0 </p></li></ul>        <h2 id="重启"   >          <a href="#重启" class="heading-link"><i class="fas fa-link"></i></a>重启</h2>      <ul><li>reboot</li><li>shutdown -r now</li></ul>        <h2 id="用户登录和注销"   >          <a href="#用户登录和注销" class="heading-link"><i class="fas fa-link"></i></a>用户登录和注销</h2>              <h3 id="登录"   >          <a href="#登录" class="heading-link"><i class="fas fa-link"></i></a>登录</h3>      <p><code>su username</code> 切换用户</p>        <h3 id="注销"   >          <a href="#注销" class="heading-link"><i class="fas fa-link"></i></a>注销</h3>      <p>用户离开Linux（UNIX）系统时，应进行注销（logout )操作。注销后的用户终端可提供给其他用户使用。 </p><p>“注销”也通知了正在进行中的系统记账程序停止对该用户的记账工作。有多种方式完成用户注销，如：</p><ul><li><code>logout</code>  在命令行输入logout表示退出登录</li><li><code>exit</code>  用终止当前进程执行的方式退出用户登录的进程</li><li><code>Ctrl-d</code>  用退出shell主进程的方式注销用户</li></ul><p>用户注销后系统回到“Login”提示符下等待下一次用户的登录。通常在用户下次进行登录时，系统会提供一些报告给用户查阅，例如用户最近一次注册的时间和使用的终端信息。</p>        <h1 id="实用指令"   >          <a href="#实用指令" class="heading-link"><i class="fas fa-link"></i></a>实用指令</h1>              <h2 id="指定运行级别"   >          <a href="#指定运行级别" class="heading-link"><i class="fas fa-link"></i></a>指定运行级别</h2>              <h3 id="运行级别说明"   >          <a href="#运行级别说明" class="heading-link"><i class="fas fa-link"></i></a>运行级别说明</h3>      <ul><li>0 ： 关机</li><li>1 ： 单用户（找回丢失密码）</li><li>2 ： 多用户状态没有网络服务</li><li>3 ： 多用户状态有网络服务</li><li>4 ： 系统未使用保留给用户</li><li>5 ： 图形界面</li><li>6 ： 系统重启</li></ul>        <h2 id="帮助指令"   >          <a href="#帮助指令" class="heading-link"><i class="fas fa-link"></i></a>帮助指令</h2>              <h3 id="man-获得帮助信息"   >          <a href="#man-获得帮助信息" class="heading-link"><i class="fas fa-link"></i></a>man - 获得帮助信息</h3>      <pre><code>man 命令或配置文件</code></pre>        <h3 id="help-指令"   >          <a href="#help-指令" class="heading-link"><i class="fas fa-link"></i></a>help 指令</h3>      <p>获得shell内置命令的帮助信息</p><pre><code>help 命令</code></pre>        <h2 id="文件目录类"   >          <a href="#文件目录类" class="heading-link"><i class="fas fa-link"></i></a>文件目录类</h2>              <h3 id="pwd"   >          <a href="#pwd" class="heading-link"><i class="fas fa-link"></i></a>pwd</h3>      <p>显示当前工作目录的绝对路径</p>        <h3 id="ls"   >          <a href="#ls" class="heading-link"><i class="fas fa-link"></i></a>ls</h3>      <pre><code>ls [选项] [目录或是文件]</code></pre><p>常用选项：</p><ul><li>-a：显示当前目录所有的文件和目录，包括隐藏的</li><li>-l：  以列表的方式显示信息</li></ul>        <h3 id="cd"   >          <a href="#cd" class="heading-link"><i class="fas fa-link"></i></a>cd</h3>      <p>切换到指定目录</p><pre><code>cd~ / cd  : 回到自己的家目录cd.. : 回到当前工作目录的上一级目录</code></pre>        <h3 id="mkdir"   >          <a href="#mkdir" class="heading-link"><i class="fas fa-link"></i></a>mkdir</h3>      <p>创建目录</p><p><code>-p</code>：创建多级目录</p>        <h3 id="rmdir"   >          <a href="#rmdir" class="heading-link"><i class="fas fa-link"></i></a>rmdir</h3>      <p>删除空目录，目录下有内容时无法删除</p>        <h3 id="touch"   >          <a href="#touch" class="heading-link"><i class="fas fa-link"></i></a>touch</h3>      <p>创建空文件</p>        <h3 id="cp"   >          <a href="#cp" class="heading-link"><i class="fas fa-link"></i></a>cp</h3>      <p>拷贝文件到指定目录</p><pre><code>cp [选项] source(源路径) dest(目标路径)</code></pre><p><code>-r</code>：递归复制整个文件夹</p>        <h3 id="mv"   >          <a href="#mv" class="heading-link"><i class="fas fa-link"></i></a>mv</h3>      <p>移动文件</p><pre><code>mv oldNameFiel newNameFile</code></pre>        <h3 id="rm"   >          <a href="#rm" class="heading-link"><i class="fas fa-link"></i></a>rm</h3>      <p>移除文件或目录</p><pre><code>rm [选项] 要删除的文件或目录</code></pre><p><strong>常用选项</strong><br><code>-r</code>：递归删除整个文件夹<br><code>-f</code>：强制删除不提示</p>        <h3 id="cat"   >          <a href="#cat" class="heading-link"><i class="fas fa-link"></i></a>cat</h3>      <p>查看文件内容</p><p><code>-n</code>：显示行号</p>        <h3 id="more"   >          <a href="#more" class="heading-link"><i class="fas fa-link"></i></a>more</h3>      <p>基于vi编辑器的文本过滤器，以全屏幕方式按页显示文本文件内容</p><p><strong>常用操作</strong></p><ul><li><code>Enter</code> 向下n行，需要定义。默认为1行</li><li><code>空格键</code> 向下滚动一屏</li><li><code>Ctrl+B</code> 返回上一屏</li><li><code>=</code>  输出当前行的行号</li><li><code>:f</code> 输出文件名和当前行的行号</li><li><code>V</code> 调用vi编辑器</li><li><code>!</code>命令 调用Shell，并执行命令</li><li><code>q</code> 退出more</li></ul>        <h3 id="less"   >          <a href="#less" class="heading-link"><i class="fas fa-link"></i></a>less</h3>      <p>与more相似，适合查看大型文件</p>        <h3 id="echo"   >          <a href="#echo" class="heading-link"><i class="fas fa-link"></i></a>echo</h3>      <p>输出内容到控制台</p><pre><code>echo [选项] [输出内容]</code></pre>        <h3 id="head"   >          <a href="#head" class="heading-link"><i class="fas fa-link"></i></a>head</h3>      <p>显示文件开头部分，默认显示前10行</p><p><code>head -n 5</code> 显示前5行</p>        <h3 id="tail"   >          <a href="#tail" class="heading-link"><i class="fas fa-link"></i></a>tail</h3>      <p>输出文件中尾部的内容，默认10行</p><p><code>tali -n 5</code>：查看文件尾5行</p><p><code>tail -f </code>：实时追踪该文档的所有更新</p>        <h3 id="gt-指令和-gt-gt-指令"   >          <a href="#gt-指令和-gt-gt-指令" class="heading-link"><i class="fas fa-link"></i></a>&gt;指令和&gt;&gt;指令</h3>      <ul><li><code>&gt;</code>：输出重定向（覆盖）</li><li><code>&gt;&gt;</code>：追加（文件尾）</li></ul><p><strong>基本语法</strong></p><ul><li><code>ls -l &gt; 文件</code>：列表内容写入文件中（覆盖写）</li><li><code>ls -al &gt;&gt; 文件</code>：列表内容追加写入文件（文件尾处）</li><li><code>cat file1 &gt; file2</code>：将文件1的内容覆盖到文件2</li></ul>        <h3 id="ln"   >          <a href="#ln" class="heading-link"><i class="fas fa-link"></i></a>ln</h3>      <p>软链接也称为符号链接，存放链接其他文件的路径</p><p>基本语法：<br>给源文件创建一个软链接</p><pre><code>ln -s [源文件或目录] [软链接名]</code></pre><p>注：当使用pwd指令查看目录时，看到的仍是软链接所在目录</p>        <h3 id="history"   >          <a href="#history" class="heading-link"><i class="fas fa-link"></i></a>history</h3>      <p>查看已经执行过的历史命令</p><p><code>history n</code>：查看最近使用的n行命令<br><code>!5</code>：执行历史编号为5的命令</p>        <h2 id="时间日期类"   >          <a href="#时间日期类" class="heading-link"><i class="fas fa-link"></i></a>时间日期类</h2>              <h3 id="date"   >          <a href="#date" class="heading-link"><i class="fas fa-link"></i></a>date</h3>      <p>显示当前日期</p>        <h4 id="基本语法"   >          <a href="#基本语法" class="heading-link"><i class="fas fa-link"></i></a>基本语法</h4>      <ul><li><code>date + %Y</code>：显示当前年份</li><li><code>date + %m</code>：显示当前月份</li><li><code>date + %d</code>：显示当前是哪一天</li><li><code>date &quot;%Y-%m-%d %H:%M:%S&quot;</code>：显示年月日时分秒</li></ul>        <h4 id="设置系统当前时间"   >          <a href="#设置系统当前时间" class="heading-link"><i class="fas fa-link"></i></a>设置系统当前时间</h4>      <pre><code>date -s 字符串时间</code></pre>        <h3 id="cal"   >          <a href="#cal" class="heading-link"><i class="fas fa-link"></i></a>cal</h3>      <p>显示日历</p>        <h2 id="搜索查找类"   >          <a href="#搜索查找类" class="heading-link"><i class="fas fa-link"></i></a>搜索查找类</h2>              <h3 id="find"   >          <a href="#find" class="heading-link"><i class="fas fa-link"></i></a>find</h3>      <p>find指令从指定目录向下递归其各个子目录，将满足条件的文件或者目录显示在终端</p><p><strong>常用选项</strong></p><ul><li><code>-name</code>：按照指定的文件名查找模式查找文件</li><li><code>-user</code>：查找属于指定用户名的所有文件</li><li><code>-size</code>：按照指定文件大小查找文件</li></ul><p><strong>应用实例</strong></p><ol><li><p>按文件名：根据名称查找/home目录下的hello.txt文件</p><pre><code> find /home -name hello.txt</code></pre></li><li><p>按拥有者：查找/opt目录下，用户名为nobody的文件</p><pre><code> find /opt -user nobody</code></pre></li><li><p>查找整个linux系统下大于200M的文件（+n大于 -n小于 n等于，单位有K,M,G）</p><pre><code> find / -size +200M</code></pre></li></ol>        <h3 id="grep指令和管道符号"   >          <a href="#grep指令和管道符号" class="heading-link"><i class="fas fa-link"></i></a>grep指令和管道符号 |</h3>      <ul><li>grep 过滤查找</li><li>管道符“**|**”，表示将前一个命令的处理结果输出传递给后面的命令处理</li></ul><p><strong>语法：</strong></p><pre><code>grep [选项] 查找内容 源文件</code></pre><p><strong>常用选项：</strong></p><ul><li><code>-n</code>：显示匹配行及行号</li><li><code>-i</code>：忽略字母大小写</li></ul>        <h2 id="压缩和解压类"   >          <a href="#压缩和解压类" class="heading-link"><i class="fas fa-link"></i></a>压缩和解压类</h2>              <h3 id="gzip和gunzip"   >          <a href="#gzip和gunzip" class="heading-link"><i class="fas fa-link"></i></a>gzip和gunzip</h3>      <p>gzip用于压缩文件，gunzip用于解压文件</p><p><strong>基本语法：</strong></p><pre><code>gzip：压缩文件，只能将文件压缩为*.gz文件gunzip：解压缩文件命令</code></pre>        <h3 id="zip和unzip"   >          <a href="#zip和unzip" class="heading-link"><i class="fas fa-link"></i></a>zip和unzip</h3>      <p>zip用于压文件，unzip用于解压</p><p><strong>基本语法：</strong></p><pre><code>    zip &lt;-r(递归压缩，压缩目录)&gt; xx.zip 要压缩的内容    unzip &lt;-d 目录（指定解压后文件的存放目录）&gt; xx.zip </code></pre>        <h3 id="tar"   >          <a href="#tar" class="heading-link"><i class="fas fa-link"></i></a>tar</h3>      <p>打包指令，打包后的文件是 <strong>.tar</strong> 文件</p><p><strong>基本语法：</strong></p><p>打包目录，压缩后的文件格式.tar</p><pre><code>tar [选项] xx.tar 打包的内容</code></pre><p><strong>常用选项：</strong></p><ul><li><code>-c</code>：产生.tar打包文件</li><li><code>-v</code>：显示详细信息</li><li><code>-f</code>：指定压缩后的文件名</li><li><code>-z</code>：打包同时压缩，此时产生的文件后缀名为<code>.tar.gz</code></li><li><code>-x</code>：解包.tar文件</li></ul>        <h1 id="用户管理"   >          <a href="#用户管理" class="heading-link"><i class="fas fa-link"></i></a>用户管理</h1>              <h2 id="用户"   >          <a href="#用户" class="heading-link"><i class="fas fa-link"></i></a>用户</h2>              <h3 id="添加用户"   >          <a href="#添加用户" class="heading-link"><i class="fas fa-link"></i></a>添加用户</h3>      <pre><code>useradd username</code></pre><p>注：</p><ul><li><p>用户创建成功后，会自动创建和用户同名的家目录 /home/username</p></li><li><p>useradd -d dir username   给新创建的用户指定家目录</p></li></ul>        <h3 id="修改口令"   >          <a href="#修改口令" class="heading-link"><i class="fas fa-link"></i></a>修改口令</h3>      <pre><code>passwd username</code></pre>        <h3 id="删除用户"   >          <a href="#删除用户" class="heading-link"><i class="fas fa-link"></i></a>删除用户</h3>      <pre><code>userdel username（保留家目录）userdel -r username(同时删除家目录)</code></pre>        <h3 id="修改用户名"   >          <a href="#修改用户名" class="heading-link"><i class="fas fa-link"></i></a>修改用户名</h3>      <pre><code>usermod -l new-name old-name</code></pre>        <h3 id="锁定用户使其不能登录"   >          <a href="#锁定用户使其不能登录" class="heading-link"><i class="fas fa-link"></i></a>锁定用户使其不能登录</h3>      <pre><code>usermod -L username</code></pre>        <h3 id="查询用户信息指令"   >          <a href="#查询用户信息指令" class="heading-link"><i class="fas fa-link"></i></a>查询用户信息指令</h3>              <h4 id="基本语法-1"   >          <a href="#基本语法-1" class="heading-link"><i class="fas fa-link"></i></a>基本语法</h4>      <pre><code>id username </code></pre>        <h3 id="切换用户"   >          <a href="#切换用户" class="heading-link"><i class="fas fa-link"></i></a>切换用户</h3>      <pre><code>su username</code></pre>        <h3 id="查看当前用户-登录用户"   >          <a href="#查看当前用户-登录用户" class="heading-link"><i class="fas fa-link"></i></a>查看当前用户/登录用户</h3>      <pre><code>whoamiwho am i</code></pre>        <h2 id="用户组"   >          <a href="#用户组" class="heading-link"><i class="fas fa-link"></i></a>用户组</h2>              <h3 id="新增组"   >          <a href="#新增组" class="heading-link"><i class="fas fa-link"></i></a>新增组</h3>      <pre><code>groupadd groupname</code></pre>        <h3 id="删除组"   >          <a href="#删除组" class="heading-link"><i class="fas fa-link"></i></a>删除组</h3>      <pre><code>groupdel groupname</code></pre>        <h3 id="修改用户的组"   >          <a href="#修改用户的组" class="heading-link"><i class="fas fa-link"></i></a>修改用户的组</h3>      <pre><code>usermod -g groupname username</code></pre>        <h2 id="用户和组相关文件"   >          <a href="#用户和组相关文件" class="heading-link"><i class="fas fa-link"></i></a>用户和组相关文件</h2>              <h3 id="etc-passwd-文件"   >          <a href="#etc-passwd-文件" class="heading-link"><i class="fas fa-link"></i></a>/etc/passwd 文件</h3>      <p><strong>用户</strong>的配置文件，记录用户的各种信息</p><p>每行的含义：</p><pre><code>    用户名：口令：用户标识号：组标识号：注释行描叙：主目录：登录shell</code></pre>        <h3 id="etc-shadow-文件"   >          <a href="#etc-shadow-文件" class="heading-link"><i class="fas fa-link"></i></a>/etc/shadow 文件</h3>      <p><strong>组</strong>的配置文件，记录linux包含的组的信息</p><p>每行的意义：</p><pre><code>    组名：口令：组标识号：组内用户列表</code></pre>        <h1 id="组管理和权限管理"   >          <a href="#组管理和权限管理" class="heading-link"><i class="fas fa-link"></i></a>组管理和权限管理</h1>              <h2 id="linux组的基本介绍"   >          <a href="#linux组的基本介绍" class="heading-link"><i class="fas fa-link"></i></a>linux组的基本介绍</h2>      <p>在linux中，每个用户必须属于一个组，不能独立于组外。在Linux中每个文件有<strong>所有者</strong>，<strong>所在组</strong>，<strong>其他组</strong>。</p>        <h2 id="文件-目录-所有者"   >          <a href="#文件-目录-所有者" class="heading-link"><i class="fas fa-link"></i></a>文件/目录 所有者</h2>      <p>一般为文件的创建者，谁创建了该文件，就自然成为该文件的所有者。</p>        <h3 id="查看文件的所有者"   >          <a href="#查看文件的所有者" class="heading-link"><i class="fas fa-link"></i></a>查看文件的所有者</h3>      <p>指令：<code>ls -l</code> 的第一个用户为文件所有者</p>        <h3 id="修改文件所有者"   >          <a href="#修改文件所有者" class="heading-link"><i class="fas fa-link"></i></a>修改文件所有者</h3>      <p>指令：<code>chown 用户名 文件名</code></p>        <h2 id="组的创建"   >          <a href="#组的创建" class="heading-link"><i class="fas fa-link"></i></a>组的创建</h2>              <h3 id="基本指令"   >          <a href="#基本指令" class="heading-link"><i class="fas fa-link"></i></a>基本指令</h3>      <pre><code>groupadd 组名</code></pre>        <h3 id="将用户放大指定组"   >          <a href="#将用户放大指定组" class="heading-link"><i class="fas fa-link"></i></a>将用户放大指定组</h3>      <pre><code>useradd -g groupname username</code></pre>        <h2 id="文件-目录-所在组"   >          <a href="#文件-目录-所在组" class="heading-link"><i class="fas fa-link"></i></a>文件/目录 所在组</h2>      <p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组。</p>        <h3 id="查看文件-目录所在组"   >          <a href="#查看文件-目录所在组" class="heading-link"><i class="fas fa-link"></i></a>查看文件/目录所在组</h3>              <h4 id="基本指令："   >          <a href="#基本指令：" class="heading-link"><i class="fas fa-link"></i></a>基本指令：</h4>      <pre><code>ls -ahl</code></pre>        <h3 id="修改文件-目录所在组"   >          <a href="#修改文件-目录所在组" class="heading-link"><i class="fas fa-link"></i></a>修改文件/目录所在组</h3>              <h4 id="基本指令-1"   >          <a href="#基本指令-1" class="heading-link"><i class="fas fa-link"></i></a>基本指令</h4>      <pre><code>chgrp 组名 文件名</code></pre>        <h2 id="其他组"   >          <a href="#其他组" class="heading-link"><i class="fas fa-link"></i></a>其他组</h2>      <p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</p>        <h2 id="改变用户所在组"   >          <a href="#改变用户所在组" class="heading-link"><i class="fas fa-link"></i></a>改变用户所在组</h2>      <p>在添加用户时，可以指定将该用户添加到那个组，使用root的管理权限可以改变某个用户所在的组。</p>        <h3 id="改变用户所在组-1"   >          <a href="#改变用户所在组-1" class="heading-link"><i class="fas fa-link"></i></a>改变用户所在组</h3>      <pre><code>usermod -g 新组名 用户名usermod -d 目录名 用户名 改变该用户登陆的初始目录</code></pre>        <h2 id="权限的基本介绍"   >          <a href="#权限的基本介绍" class="heading-link"><i class="fas fa-link"></i></a>权限的基本介绍</h2>      <p>ls -l 中的显示内容如下<br><img src="https://i.bmp.ovh/imgs/2021/12/75b428b334a67dc5.png"><br> 0-9位说明</p><p> <strong>第0位确定文件类型（d,-,l,c,b）</strong></p><ul><li><code>l</code>是链接，相当于windows的快捷方式</li><li><code>d</code>是目录，相当于windows的文件夹</li><li><code>c</code>是字符设备文件，如：鼠标、键盘</li><li><code>b</code>是块设备，如：硬盘</li></ul><p><strong>第1-3位</strong></p><p>确定<strong>所有者</strong>（该文件的所有者），拥有该文件的权限 – user</p><p><strong>第4-6位</strong></p><p>确定<strong>所属组</strong>（同用户组的）拥有该文件的权限 – group</p><p><strong>第7-9位</strong><br>确定<strong>其他用户</strong>拥有该文件的权限 – other</p>        <h2 id="rwx权限"   >          <a href="#rwx权限" class="heading-link"><i class="fas fa-link"></i></a>rwx权限</h2>              <h3 id="rwx作用到文件"   >          <a href="#rwx作用到文件" class="heading-link"><i class="fas fa-link"></i></a>rwx作用到文件</h3>      <ul><li><code>r</code>代表可读：可以读取，查看</li><li><code>w</code>代表可写：可以修改，但不代表可以删除文件，删除一个文件的前提是对该文件所在的目录有写权限，才能删除该文件</li><li><code>x</code>代表执行：可以被执行</li></ul>        <h3 id="rwx作用到目录"   >          <a href="#rwx作用到目录" class="heading-link"><i class="fas fa-link"></i></a>rwx作用到目录</h3>      <ul><li><code>r</code>代表可读：可以读取，ls查看目录内容</li><li><code>w</code>代表可写：可以修改，对目录内创建+删除+重命名目录</li><li><code>x</code>代表可执行：进入该目录</li></ul>        <h2 id="修改权限—-chmod"   >          <a href="#修改权限—-chmod" class="heading-link"><i class="fas fa-link"></i></a>修改权限—-chmod</h2>      <p>修改文件或目录的权限</p>        <h3 id="通过-，-，-变更权限"   >          <a href="#通过-，-，-变更权限" class="heading-link"><i class="fas fa-link"></i></a>通过+，-，=变更权限</h3>      <p><strong>+：赋予某权限</strong></p><p><strong>-：去除某权限</strong></p><ul><li>u：所有者</li><li>g：所有组</li><li>o：其他人</li><li>a：所有人（u,g,o的总和）</li></ul><p><strong>用法示例</strong></p><ol><li><code>chmod u=rwx,g=rx,o=x</code>  文件/目录名</li><li><code>chmod o+w</code>   文件/目录名</li><li><code>chmod a-x</code>   文件/目录名</li></ol>        <h3 id="通过数字变更权限"   >          <a href="#通过数字变更权限" class="heading-link"><i class="fas fa-link"></i></a>通过数字变更权限</h3>      <p><code>r=4</code>,<code>w=2</code>,<code>x=1</code><br><strong>用法：</strong></p><pre><code>`chmod u=rwx,g=rx,o=x`  文件/目录名等同于chmod 751  文件/目录名</code></pre>        <h2 id="修改文件所有者—-chown"   >          <a href="#修改文件所有者—-chown" class="heading-link"><i class="fas fa-link"></i></a>修改文件所有者—-chown</h2>      <p><strong>用法</strong></p><p>改变所有者</p><pre><code>chown newowner 文件/目录 </code></pre><p>改变所有者和所在组</p><pre><code>chown newowner:newgroup 文件目录</code></pre><p><code>-R</code>：如果是目录。则使其下所有子文件或目录递归生效</p>        <h2 id="修改文件-目录所在组—-chgrp"   >          <a href="#修改文件-目录所在组—-chgrp" class="heading-link"><i class="fas fa-link"></i></a>修改文件/目录所在组—-chgrp</h2>      <p>改变所在组：</p><pre><code>chgrp newgroup 文件/目录</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;linux学习笔记&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>python学习笔记</title>
    <link href="http://example.com/2021/11/29/python/"/>
    <id>http://example.com/2021/11/29/python/</id>
    <published>2021-11-29T12:08:12.901Z</published>
    <updated>2021-12-11T08:18:39.084Z</updated>
    
    <content type="html"><![CDATA[<p>python学习笔记</p><a id="more"></a>        <h1 id="基础"   >          <a href="#基础" class="heading-link"><i class="fas fa-link"></i></a>基础</h1>              <h2 id="注释"   >          <a href="#注释" class="heading-link"><i class="fas fa-link"></i></a>注释</h2>      <p>从注释开始</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment"># 单行注释</span></span><br><span class="line">print(<span class="string">&quot;hello python&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  多行注释</span></span><br><span class="line"><span class="string">  三个引号，单引号或者双引号都可以</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">print(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a>运算符</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 除法  /</span></span><br><span class="line">a = <span class="number">2</span>/<span class="number">3</span>  // a = <span class="number">0.6666666</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取整   //</span></span><br><span class="line">b = <span class="number">2</span>//<span class="number">3</span>  // b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余   %</span></span><br><span class="line">c = <span class="number">3</span>%<span class="number">4</span>   //  c = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 幂  **</span></span><br><span class="line">d = <span class="number">2</span>**<span class="number">3</span>   //  d = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算符*可以用于字符串，计算结果就是重复字符串中的内容多少次</span></span><br><span class="line">e = <span class="string">&quot;你好 &quot;</span> * <span class="number">5</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  运算符的优先级(从高到低)</span></span><br><span class="line"><span class="string">     **</span></span><br><span class="line"><span class="string">     * / // %</span></span><br><span class="line"><span class="string">     + -</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="type函数"   >          <a href="#type函数" class="heading-link"><i class="fas fa-link"></i></a>type函数</h2>      <p>显示数据类型</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;张&quot;</span></span><br><span class="line">a = type(name)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">输出结果：&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="str-字符串"   >          <a href="#str-字符串" class="heading-link"><i class="fas fa-link"></i></a>str - 字符串</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串之间用 + 连接</span></span><br><span class="line">first_name = <span class="string">&quot;张&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;三&quot;</span></span><br><span class="line"></span><br><span class="line">name = first_name + last_name</span><br><span class="line">print(name) // 张三</span><br><span class="line"></span><br><span class="line">name10 = (first_name + last_name) * <span class="number">10</span></span><br><span class="line">print(name10)  //  张三张三张三张三张三张三张三张三张三张三</span><br></pre></td></tr></table></div></figure>        <h2 id="input-输入函数"   >          <a href="#input-输入函数" class="heading-link"><i class="fas fa-link"></i></a>input - 输入函数</h2>      <p>用户输入的内容默认是<strong>字符串</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = input(<span class="string">&quot;请输入内容：&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h2 id="类型转换"   >          <a href="#类型转换" class="heading-link"><i class="fas fa-link"></i></a>类型转换</h2>      <ul><li>int()</li><li>float()<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = int(<span class="string">&quot;12&quot;</span>)</span><br><span class="line">b = float(<span class="string">&quot;23&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(a)         // <span class="number">12</span></span><br><span class="line">print(b)         // <span class="number">23.0</span></span><br><span class="line">print(type(a))   // &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">type(<span class="params">b</span>)</span>)   // &lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt;</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="格式化操作符"   >          <a href="#格式化操作符" class="heading-link"><i class="fas fa-link"></i></a>% - 格式化操作符</h2>              <h3 id="格式化操作符，用于处理字符串中的格式"   >          <a href="#格式化操作符，用于处理字符串中的格式" class="heading-link"><i class="fas fa-link"></i></a>% 格式化操作符，用于处理字符串中的格式</h3>      <p>  包含 % 的字符串，称为格式化字符串</p><p>  % 和不同的字符连用，不同类型的数据需要使用不同的格式化字符</p><pre><code>格式化字符  含义%s  字符串%d  有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全%f  浮点数，%.2f 表示小数点后只显示两位%%  输出 %</code></pre><ul><li><p>多个变量，需用（）</p><pre><code>% (price,weight,money)</code></pre></li></ul>        <h2 id="查看关键字"   >          <a href="#查看关键字" class="heading-link"><i class="fas fa-link"></i></a>查看关键字</h2>      <p>[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p>        <h2 id="if语句"   >          <a href="#if语句" class="heading-link"><i class="fas fa-link"></i></a>if语句</h2>              <h3 id="if-判断语句"   >          <a href="#if-判断语句" class="heading-link"><i class="fas fa-link"></i></a>if 判断语句</h3>      <p>  <strong>if语句以及缩进部分是一个完整的代码</strong></p><p>   if语句格式：</p><pre><code>  if 要判断的条件：    条件成立时，执行的代码</code></pre>        <h3 id="if-else-语句"   >          <a href="#if-else-语句" class="heading-link"><i class="fas fa-link"></i></a>if else 语句</h3>      <p>  <strong>if和else语句以及各自的缩进部分共同是一个完整的代码块</strong></p><p>  格式：</p><pre><code>  if 要判断的条件：    条件成立时，执行的代码  else:    条件不成立时，执行的代码</code></pre>        <h3 id="if-elif-else-语句"   >          <a href="#if-elif-else-语句" class="heading-link"><i class="fas fa-link"></i></a>if elif else 语句</h3>      <p>  格式：</p><pre><code>  if 条件1：    条件1满足时，执行的代码  elif 条件2：    条件2满足时，执行的代码  elif 条件3：    条件3满足时，执行的代码  else:    以上条件都不满足时，执行的代码</code></pre>        <h3 id="if嵌套语句"   >          <a href="#if嵌套语句" class="heading-link"><i class="fas fa-link"></i></a>if嵌套语句</h3>      <p>格式：</p><pre><code>  if 条件 1:    条件 1 满足执行的代码    ……    if 条件 1 基础上的条件 2:        条件 2 满足时，执行的代码        ……        else:        条件 2 不满足时，执行的代码  else:    条件1 不满足时，执行的代码</code></pre>        <h2 id="while语句"   >          <a href="#while语句" class="heading-link"><i class="fas fa-link"></i></a>while语句</h2>              <h3 id="格式："   >          <a href="#格式：" class="heading-link"><i class="fas fa-link"></i></a>格式：</h3>      <pre><code>  while 条件：    条件满足时，执行的代码</code></pre>        <h3 id="break-和-continue"   >          <a href="#break-和-continue" class="heading-link"><i class="fas fa-link"></i></a>break 和 continue</h3>      <pre><code>  1. break 某一条件满足时，退出循-环，不再执行后续重复的代码  2. continue 某一条件满足时，不执行后续重复的代码  3. break 和 continue 只针对当前所在循环有效</code></pre><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># break 会退出循环</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当 i == 7 时，不希望执行需要重复执行的代码</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        <span class="comment"># 在使用 continue 之前，同样应该修改计数器</span></span><br><span class="line">        <span class="comment"># 否则会出现死循环</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重复执行的代码</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="循环嵌套"   >          <a href="#循环嵌套" class="heading-link"><i class="fas fa-link"></i></a>循环嵌套</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环嵌套</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">&quot;*&quot;</span> * row)</span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">5</span>:</span><br><span class="line">    col = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> col &lt;= row:</span><br><span class="line">        print(<span class="string">&quot;*&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    row += <span class="number">1</span></span><br></pre></td></tr></table></div></figure>        <h3 id="九九乘法表"   >          <a href="#九九乘法表" class="heading-link"><i class="fas fa-link"></i></a>九九乘法表</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 九九乘法表</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">9</span>:</span><br><span class="line">    col = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> col &lt;= row:</span><br><span class="line">        print(<span class="string">&quot;%d * %d = %d  &quot;</span> % (row, col, row*col), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    row += <span class="number">1</span></span><br></pre></td></tr></table></div></figure>        <h2 id="函数"   >          <a href="#函数" class="heading-link"><i class="fas fa-link"></i></a>函数</h2>              <h3 id="格式：-1"   >          <a href="#格式：-1" class="heading-link"><i class="fas fa-link"></i></a>格式：</h3>      <pre><code>  def 函数名():    函数内容  &#39;&#39;&#39;      函数的文档注释，在函数下方两行处  &#39;&#39;&#39;</code></pre>        <h3 id="函数参数的使用"   >          <a href="#函数参数的使用" class="heading-link"><i class="fas fa-link"></i></a>函数参数的使用</h3>      <pre><code>  在函数名的后面的小括号内部填写参数  多个参数之间使用 , 分隔 </code></pre>        <h3 id="形参和实参"   >          <a href="#形参和实参" class="heading-link"><i class="fas fa-link"></i></a>形参和实参</h3>      <pre><code>  形参：定义 函数时，小括号中的参数，是用来接收参数用的，在函数内部 作为变量使用  实参：调用 函数时，小括号中的参数，是用来把数据传递到 函数内部 用的</code></pre>        <h2 id="list-列表"   >          <a href="#list-列表" class="heading-link"><i class="fas fa-link"></i></a>list - 列表</h2>              <h3 id="格式：-2"   >          <a href="#格式：-2" class="heading-link"><i class="fas fa-link"></i></a>格式：</h3>      <pre><code>  name_list = []  eg: name_lsit = [&quot;张三&quot;，&quot;李四&quot;， &quot;王五&quot;]</code></pre>        <h3 id="列表的基本操作"   >          <a href="#列表的基本操作" class="heading-link"><i class="fas fa-link"></i></a>列表的基本操作</h3>      <ul><li><p>取值</p><pre><code>print(name_list[2])</code></pre></li><li><p>取索引</p><pre><code>print(name_list.index(&quot;王五&quot;))</code></pre></li><li><p>修改</p><pre><code>name_list[1] = &quot;lisi&quot;print(name_list[1])</code></pre></li><li><p>增加</p><ul><li><p>append 方法向末尾增加</p><pre><code>name_list.append(&quot;赵六&quot;)</code></pre></li><li><p>insert 方法在列表的指定索引位置插入数据</p><pre><code>name_list.insert(1, &quot;你爹&quot;)print(name_list)</code></pre></li><li><p>extend 方法可以把其他列表中的完整内容，追加到当前列表的末端</p><pre><code>temp_list = [&quot;孙悟空&quot;, &quot;猪二哥&quot;, &quot;沙师弟&quot;]name_list.extend(temp_list)print(name_list)</code></pre></li></ul></li><li><p>删除</p><ul><li><p>remove 方法从列表中删除指定数据</p><pre><code>name_list.remove(&quot;lisi&quot;)</code></pre></li><li><p>pop 方法默认可以把列表中的最后一个元素删除</p><pre><code>name_list.pop()</code></pre></li><li><p>pop 方法可以指定要删除元素的索引</p><pre><code>name_list.pop(5)print(name_list)</code></pre></li><li><p>clear 方法可以清空列表</p><pre><code>name_list.clear()print(name_list)</code></pre></li><li><p>del 关键字可以删除列表中的数据（ 从内存中删除）一般实际开发中不用</p><pre><code>del name_list[1]del name_list</code></pre></li></ul></li></ul><ul><li><p>列表的数据统计</p><pre><code>xing_list = [&quot;张&quot;, &quot;李&quot;, &quot;王&quot;, &quot;赵&quot;, &quot;吴&quot;, &quot;张&quot;]</code></pre><ul><li><p>len 函数可以统计列表中元素的总数</p><pre><code>list_len = len(xing_list)print(list_len)</code></pre></li><li><p>count 方法可以统计列表中某一数据出现的次数</p><pre><code>count = xing_list.count(&quot;张&quot;)print(&quot;张出现了 %s 次&quot; % count)</code></pre></li><li><p>remove 删除第一次出现的数据</p><pre><code>xing_list.remove(&quot;张&quot;)print(xing_list)</code></pre></li></ul></li><li><p>列表排序</p><pre><code>name1_list = [&quot;zhangsan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;, &quot;wangxiaoer&quot;]num_list = [6, 8, 4, 1, 10]</code></pre><ul><li><p>升序</p><pre><code>name1_list.sort()num_list.sort()</code></pre></li><li><p>降序</p><pre><code>name1_list.sort(reverse=True)num_list.sort(reverse=True)</code></pre></li><li><p>逆序（反转）</p><pre><code>name1_list.reverse()num_list.reverse()print(name1_list)print(num_list)</code></pre></li></ul></li></ul><ul><li><p>列表遍历</p><pre><code>name_list = [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;王小二&quot;]</code></pre></li></ul><ul><li>使用迭代器遍历列表<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> my_name <span class="keyword">in</span> name_list:</span><br><span class="line">    print(<span class="string">&quot;我的名字叫 %s&quot;</span> % my_name)</span><br><span class="line"><span class="comment"># my_name 是变量，随便取名字，name_list是要遍历的列表</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="tuple-元组"   >          <a href="#tuple-元组" class="heading-link"><i class="fas fa-link"></i></a>tuple - 元组</h2>              <h3 id="格式"   >          <a href="#格式" class="heading-link"><i class="fas fa-link"></i></a>格式</h3>      <pre><code>  info_tuple = (&quot;zhangsan&quot;, 18, 1.75, &quot;zhangsan&quot;)</code></pre><ul><li><p>取值和索引</p><pre><code>print(info_tuple[0])print(info_tuple.index(&quot;zhangsan&quot;))</code></pre></li><li><p>统计计数</p><pre><code>print(info_tuple.count(&quot;zhangsan&quot;))</code></pre></li><li><p>统计元组中包含元素的个数</p><pre><code>  print(len(info_tuple))</code></pre></li><li><p>使用迭代遍历元组</p><pre><code>for my_info in info_tuple:    # 使用格式字符串拼接 my_info 这个变量不方便！    # 因为元组中通常保存的数据类型是不同的！    print(my_info)</code></pre></li></ul><ul><li><p>格式化字符串</p><ul><li><p>格式化字符串后面的‘（）’本质上就是元组</p><pre><code>info_tuple = (&quot;小明&quot;, 21, 1.85)print(&quot;%s 年龄是 %d 身高是 %.2f&quot; % info_tuple)info_str = &quot;%s 年龄是 %d 身高是 %.2f&quot; % info_tupleprint(info_str)</code></pre></li></ul></li></ul>        <h2 id="字典"   >          <a href="#字典" class="heading-link"><i class="fas fa-link"></i></a>字典</h2>              <h3 id="字典是无序的数据集合"   >          <a href="#字典是无序的数据集合" class="heading-link"><i class="fas fa-link"></i></a>字典是无序的数据集合</h3>      <pre><code>  xiaoming = &#123;&quot;name&quot;: &quot;小明&quot;,              &quot;age&quot;: 18,              &quot;gender&quot;: True,              &quot;height&quot;: 1.75,              &quot;weight&quot;: 75.5&#125;</code></pre>        <h3 id="字典的基本使用"   >          <a href="#字典的基本使用" class="heading-link"><i class="fas fa-link"></i></a>字典的基本使用</h3>      <pre><code>  xiaoming_dict = &#123;&quot;name&quot;: &quot;小明&quot;&#125;</code></pre><ul><li><p>取值</p><pre><code>print(xiaoming_dict[&quot;name&quot;])</code></pre></li><li><p>增加/修改</p><pre><code>xiaoming_dict[&quot;age&quot;] = 18xiaoming_dict[&quot;name&quot;] = &quot;小小明&quot;print(xiaoming_dict)</code></pre></li><li><p>删除</p><pre><code>xiaoming_dict.pop(&quot;name&quot;)print(xiaoming_dict)</code></pre></li></ul>        <h3 id="字典的其他操作"   >          <a href="#字典的其他操作" class="heading-link"><i class="fas fa-link"></i></a>字典的其他操作</h3>      <pre><code>  xiaoming_dict = &#123;&quot;name&quot;: &quot;小明&quot;,                    &quot;age&quot;: 18&#125;</code></pre><ul><li><p>统计键值对数量</p><pre><code>print(len(xiaoming_dict))</code></pre></li><li><p>合并字典</p><pre><code>temp_dict = &#123;&quot;height&quot;: 1.75,              &quot;age&quot;: 20&#125;  - 合并时已存在的键值对，会被覆盖      xiaoming_dict.update(temp_dict)      print(xiaoming_dict)</code></pre><ul><li><p>清空字典</p><pre><code>xiaoming_dict.clear()print(xiaoming_dict)</code></pre></li></ul></li></ul>        <h3 id="字典的遍历"   >          <a href="#字典的遍历" class="heading-link"><i class="fas fa-link"></i></a>字典的遍历</h3>      <pre><code>  xiaoming_dict = &#123;&quot;name&quot;: &quot;小明&quot;,                  &quot;qq&quot;: &quot;123456&quot;,                  &quot;phone&quot;: &quot;10086&quot;&#125;</code></pre><ul><li><p>迭代遍历字典</p><p>变量k是每一次循环中，获取到的键值对的key</p><pre><code>for k in xiaoming_dict:    print(&quot;%s - %s&quot; % (k, xiaoming_dict[k]))</code></pre></li></ul>        <h3 id="字典的应用场景"   >          <a href="#字典的应用场景" class="heading-link"><i class="fas fa-link"></i></a>字典的应用场景</h3>      <pre><code>- 使用 多个键值对，存储 描述一个 物体 的相关信息 —— 描述更复杂的数据信息- 将 多个字典 放在 一个列表 中，再进行遍历      card_list = [          &#123;&quot;name&quot;: &quot;张三&quot;,          &quot;qq&quot;: &quot;12345&quot;,          &quot;phone&quot;: &quot;110&quot;&#125;,          &#123;&quot;name&quot;: &quot;李四&quot;,          &quot;qq&quot;: &quot;54321&quot;,          &quot;phone&quot;: &quot;10086&quot;&#125;      ]      for card_info in card_list:          print(card_info)</code></pre>        <h2 id="字符串进阶"   >          <a href="#字符串进阶" class="heading-link"><i class="fas fa-link"></i></a>字符串进阶</h2>              <h3 id="字符串的定义和遍历"   >          <a href="#字符串的定义和遍历" class="heading-link"><i class="fas fa-link"></i></a>字符串的定义和遍历</h3>      <pre><code>  str1 = &quot;hello python&quot;  str2 = &#39;我的外号是&quot;大西瓜&quot;&#39;  for char in str2:    print(char)</code></pre>        <h3 id="字符串的统计操作"   >          <a href="#字符串的统计操作" class="heading-link"><i class="fas fa-link"></i></a>字符串的统计操作</h3>      <pre><code>  hello_str = &quot;hello hello&quot;</code></pre><ul><li><p>统计字符串长度</p><pre><code>print(len(hello_str))</code></pre></li><li><p>统计一个子字符串出现的次数</p><pre><code>print(hello_str.count(&quot;llo&quot;))print(hello_str.count(&quot;abc&quot;))</code></pre></li><li><p>某一个子字符串出现的位置</p><pre><code>print(hello_str.index(&quot;llo&quot;))如果使用index方法所传递的字符串不存在，程序会报错</code></pre></li></ul>        <h3 id="字符串的判断方法"   >          <a href="#字符串的判断方法" class="heading-link"><i class="fas fa-link"></i></a>字符串的判断方法</h3>      <ul><li><p>判断空白字符串</p><pre><code>  space_str = &quot;       \t\n\r&quot;  print(space_str.isspace())</code></pre></li><li><p>判断字符串中字符只包含数字</p><ul><li><p>都不能判断小数</p><pre><code>   num_str = &quot;1.1&quot;</code></pre></li><li><p>Unicode 字符串</p><pre><code>  num_str = &quot;\u00b2&quot;</code></pre></li><li><p>中文数字</p><pre><code>  num_str = &quot;一千零一&quot;</code></pre></li></ul></li></ul><pre><code> - 判断是否以指定字符串开始        print(hello_str.startswith(&quot;Hello&quot;)) - 判断是否以指定字符串结束        print(hello_str.endswith(&quot;world&quot;))        print(&quot;--------------------&quot;)</code></pre>        <h3 id="字符串的查找和替换"   >          <a href="#字符串的查找和替换" class="heading-link"><i class="fas fa-link"></i></a>字符串的查找和替换</h3>      <pre><code>  hello_str = &quot;hello world&quot;</code></pre><ul><li><p>查找指定字符串</p><pre><code>print(hello_str.find(&quot;llo&quot;))print(hello_str.index(&quot;llo&quot;)) index如果指定的字符串不存在，会报错 find如果指定的字符串不存在，会返回-1print(hello_str.find(&quot;abc&quot;))print(&quot;--------------------&quot;)</code></pre></li><li><p>替换字符串</p><pre><code>replace 方法执行完成后，会返回一个新的字符串  注意：不会修改原字符串的内容replace_str = hello_str.replace(&quot;world&quot;, &quot;python&quot;)print(replace_str)print(hello_str)</code></pre></li></ul>        <h3 id="字符串拆分和拼接"   >          <a href="#字符串拆分和拼接" class="heading-link"><i class="fas fa-link"></i></a>字符串拆分和拼接</h3>      <pre><code>  poem_str = &quot;登鹳雀楼\t 王之涣 \t 白日依山尽 \t \n 黄河入海流 \t\t 欲穷千里目 \t\t\n更上一层楼&quot;  print(poem_str)</code></pre><ul><li><p>拆分字符串</p><pre><code>  poem_list = poem_str.split()  print(poem_list)</code></pre></li><li><p>合并字符串</p><pre><code>  result = &quot; &quot;.join(poem_list)  print(result)</code></pre></li></ul>        <h2 id="变量进阶"   >          <a href="#变量进阶" class="heading-link"><i class="fas fa-link"></i></a>变量进阶</h2>              <h3 id="变量的引用"   >          <a href="#变量的引用" class="heading-link"><i class="fas fa-link"></i></a>变量的引用</h3>      <ul><li>变量 和 数据 都是保存在 <strong>内存</strong>  中的</li></ul><ul><li>在 <code>Python</code> 中 <strong>函数 的 参数传递</strong>  以及 <strong>返回值</strong>  都是靠 <strong>引用</strong>  传递的</li></ul>        <h4 id="引用的概念"   >          <a href="#引用的概念" class="heading-link"><i class="fas fa-link"></i></a>引用的概念</h4>      <p>在 <code>Python</code> 中</p><ul><li><p><strong>变量</strong>  和 <strong>数据</strong>  是分开存储的</p></li><li><p><strong>数据</strong>  保存在内存中的一个位置</p></li><li><p><strong>变量</strong>  中保存着数据在内存中的地址</p></li><li><p><strong>变量</strong>  中 <strong>记录数据的地址</strong> ，就叫做 <strong>引用</strong> </p></li><li><p>使用 <code>id()</code> 函数可以查看变量中保存数据所在的 <strong>内存地址</strong> </p></li></ul><blockquote><p>注意：如果变量已经被定义，当给一个变量赋值的时候，本质上是 <strong>修改了数据的引用</strong> </p></blockquote><ul><li>变量 <strong>不再</strong>  对之前的数据引用</li><li>变量 <strong>改为</strong>  对新赋值的数据引用</li></ul>        <h4 id="函数的参数和返回值的传递"   >          <a href="#函数的参数和返回值的传递" class="heading-link"><i class="fas fa-link"></i></a>函数的参数和返回值的传递</h4>      <p>在 <code>Python</code> 中，函数的 <strong>实参</strong> /<strong>返回值</strong>  都是是靠 <strong>引用</strong>  来传递来的</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">num</span>):</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&quot;%d 在函数内的内存地址是 %x&quot;</span> % (num, id(num)))</span><br><span class="line"></span><br><span class="line">    result = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;返回值 %d 在内存中的地址是 %x&quot;</span> % (result, id(result)))</span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  result</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">print(<span class="string">&quot;调用函数前 内存地址是 %x&quot;</span> % id(a))</span><br><span class="line"></span><br><span class="line">r = test(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;调用函数后 实参内存地址是 %x&quot;</span> % id(a))</span><br><span class="line">print(<span class="string">&quot;调用函数后 返回值内存地址是 %x&quot;</span> % id(r))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="可变和不可变类型"   >          <a href="#可变和不可变类型" class="heading-link"><i class="fas fa-link"></i></a>可变和不可变类型</h3>      <ul><li><strong>不可变类型</strong> ，内存中的数据不允许被修改：</li></ul><p>&ensp;&ensp;&ensp;&ensp;- 数字类型 <code>int</code>, <code>bool</code>, <code>float</code>, <code>complex</code>, <code>long(2.x)</code></p><p>&ensp;&ensp;&ensp;&ensp;- 字符串 <code>str</code></p><p>&ensp;&ensp;&ensp;&ensp;- 元组 <code>tuple</code></p><ul><li><strong>可变类型</strong> ，内存中的数据可以被修改：</li></ul><p>&ensp;&ensp;&ensp;&ensp;- 列表 <code>list</code></p><p>&ensp;&ensp;&ensp;&ensp;- 字典 <code>dict</code></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">demo_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;定义列表后的内存地址 %d&quot;</span> % id(demo_list))</span><br><span class="line"></span><br><span class="line">demo_list.append(<span class="number">999</span>)</span><br><span class="line">demo_list.pop(<span class="number">0</span>)</span><br><span class="line">demo_list.remove(<span class="number">2</span>)</span><br><span class="line">demo_list[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;修改数据后的内存地址 %d&quot;</span> % id(demo_list))</span><br><span class="line"></span><br><span class="line">demo_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;定义字典后的内存地址 %d&quot;</span> % id(demo_dict))</span><br><span class="line"></span><br><span class="line">demo_dict[<span class="string">&quot;age&quot;</span>] = <span class="number">18</span></span><br><span class="line">demo_dict.pop(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">demo_dict[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;老王&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;修改数据后的内存地址 %d&quot;</span> % id(demo_dict))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><blockquote><p>注意：字典的 <code>key</code> <strong>只能使用不可变类型的数据</strong> </p></blockquote><p><strong>注意</strong> </p><ol><li><p><strong>可变类型</strong> 的数据变化，是通过 <strong>方法</strong>  来实现的</p></li><li><p>如果给一个可变类型的变量，赋值了一个新的数据，<strong>引用会修改</strong> </p></li></ol><p>&ensp;&ensp;&ensp;&ensp;- 变量 <strong>不再</strong>  对之前的数据引用</p><p>&ensp;&ensp;&ensp;&ensp;- 变量 <strong>改为</strong>  对新赋值的数据引用</p>        <h3 id="哈希-hash"   >          <a href="#哈希-hash" class="heading-link"><i class="fas fa-link"></i></a>哈希 (hash)</h3>      <ul><li><code>Python</code> 中内置有一个名字叫做 <code>hash(o)</code> 的函数</li></ul><p>&ensp;&ensp;&ensp;&ensp;- 接收一个 <strong>不可变类型</strong>  的数据作为 <strong>参数</strong> </p><p>&ensp;&ensp;&ensp;&ensp;- <strong>返回</strong>  结果是一个 <strong>整数</strong> </p><ul><li><code>哈希</code> 是一种 <strong>算法</strong> ，其作用就是提取数据的 <strong>特征码（指纹）</strong> </li></ul><p>&ensp;&ensp;&ensp;&ensp;- <strong>相同的内容</strong>  得到 <strong>相同的结果</strong> </p><p>&ensp;&ensp;&ensp;&ensp;- <strong>不同的内容</strong>  得到 <strong>不同的结果</strong> </p><ul><li>在 <code>Python</code> 中，设置字典的 <strong>键值对</strong>  时，会首先对 <code>key</code> 进行 <code>hash</code> 已决定如何在内存中保存字典的数据，以方便 <strong>后续</strong>  对字典的操作：<strong>增、删、改、查</strong> </li></ul><p>&ensp;&ensp;&ensp;&ensp;- 键值对的 <code>key</code> 必须是不可变类型数据</p><p>&ensp;&ensp;&ensp;&ensp;- 键值对的 <code>value</code> 可以是任意类型的数据</p>        <h3 id="局部变量和全局变量"   >          <a href="#局部变量和全局变量" class="heading-link"><i class="fas fa-link"></i></a>局部变量和全局变量</h3>      <ul><li><p><strong>局部变量</strong>  是在 <strong>函数内部</strong>  定义的变量，<strong>只能在函数内部使用</strong> </p></li><li><p><strong>全局变量</strong>  是在 <strong>函数外部定义</strong>  的变量（没有定义在某一个函数内），<strong>所有函数</strong>  内部 <strong>都可以使用这个变量</strong> </p></li></ul><blockquote><p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong>  —— 可变范围太大，导致程序不好维护！</p></blockquote>        <h4 id="局部变量"   >          <a href="#局部变量" class="heading-link"><i class="fas fa-link"></i></a>局部变量</h4>      <ul><li><p><strong>局部变量</strong>  是在 <strong>函数内部</strong>  定义的变量，<strong>只能在函数内部使用</strong> </p></li><li><p>函数执行结束后，<strong>函数内部的局部变量，会被系统回收</strong> </p></li><li><p>不同的函数，可以定义相同的名字的局部变量，但是 <strong>彼此之间</strong>  不会产生影响</p></li></ul>        <h4 id="局部变量的作用"   >          <a href="#局部变量的作用" class="heading-link"><i class="fas fa-link"></i></a>局部变量的作用</h4>      <ul><li>在函数内部使用，<strong>临时</strong>  保存 <strong>函数内部需要使用的数据</strong> </li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;修改后 %d&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="局部变量的生命周期"   >          <a href="#局部变量的生命周期" class="heading-link"><i class="fas fa-link"></i></a>局部变量的生命周期</h4>      <ul><li><p>所谓 <strong>生命周期</strong>  就是变量从 <strong>被创建</strong>  到 <strong>被系统回收</strong>  的过程</p></li><li><p><strong>局部变量</strong>  在 <strong>函数执行时</strong>  才会被创建</p></li><li><p><strong>函数执行结束后</strong>  局部变量 <strong>被系统回收</strong> </p></li><li><p><strong>局部变量在生命周期</strong>  内，可以用来存储 <strong>函数内部临时使用到的数据</strong> </p></li></ul>        <h3 id="3-2-全局变量"   >          <a href="#3-2-全局变量" class="heading-link"><i class="fas fa-link"></i></a>3.2 全局变量</h3>      <ul><li><strong>全局变量</strong>  是在 <strong>函数外部定义</strong>  的变量，所有函数内部都可以使用这个变量</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个全局变量</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>注意</strong> ：函数执行时，<strong>需要处理变量时</strong>  会：</p><ol><li><p><strong>首先</strong>  查找 <strong>函数内部</strong>  是否存在 <strong>指定名称 的局部变量</strong> ，<strong>如果有，直接使用</strong> </p></li><li><p>如果没有，查找 <strong>函数外部</strong>  是否存在 <strong>指定名称 的全局变量</strong> ，<strong>如果有，直接使用</strong> </p></li><li><p>如果还没有，程序报错！</p></li></ol>        <h4 id="1-函数不能直接修改-全局变量的引用"   >          <a href="#1-函数不能直接修改-全局变量的引用" class="heading-link"><i class="fas fa-link"></i></a>1) 函数不能直接修改 全局变量的引用</h4>      <ul><li><strong>全局变量</strong>  是在 <strong>函数外部定义</strong>  的变量（没有定义在某一个函数内），<strong>所有函数</strong>  内部 <strong>都可以使用这个变量</strong> </li></ul><blockquote><p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong>  —— 可变范围太大，导致程序不好维护！</p></blockquote><ul><li><p>在函数内部，可以 <strong>通过全局变量的引用获取对应的数据</strong> </p></li><li><p>但是，<strong>不允许直接修改全局变量的引用</strong>  —— 使用赋值语句修改全局变量的值</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;demo1&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;demo2&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><blockquote><p>注意：只是在函数内部定义了一个局部变量而已，只是变量名相同 —— 在函数内部不能直接修改全局变量的值</p></blockquote>        <h4 id="2-在函数内部修改全局变量的值"   >          <a href="#2-在函数内部修改全局变量的值" class="heading-link"><i class="fas fa-link"></i></a>2) 在函数内部修改全局变量的值</h4>      <ul><li>如果在函数中需要修改全局变量，需要使用 <code>global</code> 进行声明</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;demo1&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># global 关键字，告诉 Python 解释器 num 是一个全局变量</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="comment"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;demo2&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="3-全局变量定义的位置"   >          <a href="#3-全局变量定义的位置" class="heading-link"><i class="fas fa-link"></i></a>3) 全局变量定义的位置</h4>      <ul><li>为了保证所有的函数都能够正确使用到全局变量，应该 <strong>将全局变量定义在其他函数的上方</strong> </li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">&quot;%d&quot;</span> % a)</span><br><span class="line">    print(<span class="string">&quot;%d&quot;</span> % b)</span><br><span class="line">    print(<span class="string">&quot;%d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">demo()</span><br><span class="line">c = <span class="number">30</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>注意</strong> </p><ul><li>由于全局变量 c，是在调用函数之后，才定义的，在执行函数时，变量还没有定义，所以程序会报错！</li></ul>        <h4 id="4-全局变量命名的建议"   >          <a href="#4-全局变量命名的建议" class="heading-link"><i class="fas fa-link"></i></a>4) 全局变量命名的建议</h4>      <ul><li><p>为了避免局部变量和全局变量出现混淆，在定义全局变量时，有些公司会有一些开发要求，例如：</p></li><li><p>全局变量名前应该增加 <code>g_</code> 或者 <code>gl_</code> 的前缀</p></li></ul><blockquote><p>提示：具体的要求格式，各公司要求可能会有些差异</p></blockquote>        <h2 id="函数进阶"   >          <a href="#函数进阶" class="heading-link"><i class="fas fa-link"></i></a>函数进阶</h2>              <h3 id="函数参数和返回值的作用"   >          <a href="#函数参数和返回值的作用" class="heading-link"><i class="fas fa-link"></i></a>函数参数和返回值的作用</h3>      <p>函数根据 <strong>有没有参数</strong>  以及 <strong>有没有返回值</strong> ，可以 <strong>相互组合</strong> ，一共有 <strong>4 种</strong>  组合形式</p><ol><li><p>无参数，无返回值</p></li><li><p>无参数，有返回值</p></li><li><p>有参数，无返回值</p></li><li><p>有参数，有返回值</p></li></ol><blockquote><p>定义函数时，<strong>是否接收参数，或者是否返回结果</strong> ，是根据 <strong>实际的功能需求</strong>  来决定的！</p></blockquote><ol><li><p>如果函数 <strong>内部处理的数据不确定</strong> ，就可以将外界的数据以参数传递到函数内部</p></li><li><p>如果希望一个函数 <strong>执行完成后，向外界汇报执行结果</strong> ，就可以增加函数的返回值</p></li></ol>        <h4 id="无参数，无返回值"   >          <a href="#无参数，无返回值" class="heading-link"><i class="fas fa-link"></i></a>无参数，无返回值</h4>      <p>此类函数，不接收参数，也没有返回值，应用场景如下：</p><ol><li><p><strong>只是单纯地做一件事情</strong> ，例如 <strong>显示菜单</strong> </p></li><li><p>在函数内部 <strong>针对全局变量进行操作</strong> ，例如：<strong>新建名片</strong> ，最终结果 <strong>记录在全局变量</strong>  中</p></li></ol><blockquote><p>注意：</p></blockquote><ul><li><p>如果全局变量的数据类型是一个 <strong>可变类型</strong> ，在函数内部可以使用 <strong>方法</strong>  修改全局变量的内容 —— <strong>变量的引用不会改变</strong> </p></li><li><p>在函数内部，<strong>使用赋值语句</strong>  才会 <strong>修改变量的引用</strong> </p></li></ul>        <h4 id="无参数，有返回值"   >          <a href="#无参数，有返回值" class="heading-link"><i class="fas fa-link"></i></a>无参数，有返回值</h4>      <p>此类函数，不接收参数，但是有返回值，应用场景如下：</p><ul><li>采集数据，例如 <strong>温度计</strong> ，返回结果就是当前的温度，而不需要传递任何的参数</li></ul>        <h4 id="有参数，无返回值"   >          <a href="#有参数，无返回值" class="heading-link"><i class="fas fa-link"></i></a>有参数，无返回值</h4>      <p>此类函数，接收参数，没有返回值，应用场景如下：</p><ul><li><p>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong> </p></li><li><p>例如 <strong>名片管理系统</strong>  针对 <strong>找到的名片</strong>  做 <strong>修改</strong> 、<strong>删除</strong>  操作</p></li></ul>        <h4 id="有参数，有返回值"   >          <a href="#有参数，有返回值" class="heading-link"><i class="fas fa-link"></i></a>有参数，有返回值</h4>      <p>此类函数，接收参数，同时有返回值，应用场景如下：</p><ul><li><p>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong> ，并且 <strong>返回期望的处理结果</strong> </p></li><li><p>例如 <strong>名片管理系统</strong>  使用 <strong>字典默认值</strong>  和 <strong>提示信息</strong>  提示用户输入内容</p></li></ul><p>&ensp;&ensp;&ensp;&ensp;- 如果输入，返回输入内容</p><p>&ensp;&ensp;&ensp;&ensp;- 如果没有输入，返回字典默认值</p>        <h3 id="函数的返回值-进阶"   >          <a href="#函数的返回值-进阶" class="heading-link"><i class="fas fa-link"></i></a>函数的返回值 进阶</h3>      <ul><li><p>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong> ，以便调用者针对具体的结果做后续的处理</p></li><li><p><strong>返回值</strong>  是函数 <strong>完成工作</strong> 后，<strong>最后</strong>  给调用者的 <strong>一个结果</strong> </p></li><li><p>在函数中使用 <code>return</code> 关键字可以返回结果</p></li><li><p>调用函数一方，可以 <strong>使用变量</strong>  来 <strong>接收</strong>  函数的返回结果</p></li></ul><blockquote><p>问题：一个函数执行后能否返回多个结果？</p></blockquote>        <h4 id="示例-——-温度和湿度测量"   >          <a href="#示例-——-温度和湿度测量" class="heading-link"><i class="fas fa-link"></i></a>示例 —— 温度和湿度测量</h4>      <ul><li><p>假设要开发一个函数能够同时返回当前的温度和湿度</p></li><li><p><strong>先完成返回温度</strong> 的功能如下：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">measure</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回当前的温度&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">&quot;开始测量...&quot;</span>)</span><br><span class="line">    temp = <span class="number">39</span></span><br><span class="line">    print(<span class="string">&quot;测量结束...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">result = measure()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></div></figure><ul><li><p>在利用 <strong>元组</strong>  在返回温度的同时，也能够返回 <strong>湿度</strong> </p></li><li><p>改造如下：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">measure</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回当前的温度&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;开始测量...&quot;</span>)</span><br><span class="line">    temp = <span class="number">39</span></span><br><span class="line">    wetness = <span class="number">10</span></span><br><span class="line">    print(<span class="string">&quot;测量结束...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (temp, wetness)</span><br></pre></td></tr></table></div></figure><blockquote><p>提示：如果一个函数返回的是元组，括号可以省略</p></blockquote><p><strong>技巧</strong> </p><ul><li><p>在 <code>Python</code> 中，可以 <strong>将一个元组</strong>  使用 <strong>赋值语句</strong>  同时赋值给 <strong>多个变量</strong> </p></li><li><p>注意：变量的数量需要和元组中的元素数量保持一致</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = temp, wetness = measure()</span><br></pre></td></tr></table></div></figure>        <h4 id="面试题-——-交换两个数字"   >          <a href="#面试题-——-交换两个数字" class="heading-link"><i class="fas fa-link"></i></a>面试题 —— 交换两个数字</h4>      <p><strong>题目要求</strong> </p><ol><li><p>有两个整数变量 <code>a = 6</code>, <code>b = 100</code></p></li><li><p>不使用其他变量，<strong>交换两个变量的值</strong> </p></li></ol>        <h4 id="解法-1-——-使用其他变量"   >          <a href="#解法-1-——-使用其他变量" class="heading-link"><i class="fas fa-link"></i></a>解法 1 —— 使用其他变量</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解法 1 - 使用临时变量</span></span><br><span class="line">c = b</span><br><span class="line">b = a</span><br><span class="line">a = c</span><br></pre></td></tr></table></div></figure>        <h4 id="解法-2-——-不使用临时变量"   >          <a href="#解法-2-——-不使用临时变量" class="heading-link"><i class="fas fa-link"></i></a>解法 2 —— 不使用临时变量</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解法 2 - 不使用临时变量</span></span><br><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></table></div></figure>        <h4 id="解法-3-——-Python-专有，利用元组"   >          <a href="#解法-3-——-Python-专有，利用元组" class="heading-link"><i class="fas fa-link"></i></a>解法 3 —— Python 专有，利用元组</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></div></figure>        <h3 id="函数的参数-进阶"   >          <a href="#函数的参数-进阶" class="heading-link"><i class="fas fa-link"></i></a>函数的参数 进阶</h3>              <h4 id="不可变和可变的参数"   >          <a href="#不可变和可变的参数" class="heading-link"><i class="fas fa-link"></i></a>不可变和可变的参数</h4>      <blockquote><p>问题 1：在函数内部，针对参数使用 <strong>赋值语句</strong> ，会不会影响调用函数时传递的 <strong>实参变量</strong> ？ —— 不会！</p></blockquote><ul><li>无论传递的参数是 <strong>可变</strong>  还是 <strong>不可变</strong> </li></ul><p>&ensp;&ensp;&ensp;&ensp;- 只要 <strong>针对参数</strong>  使用 <strong>赋值语句</strong> ，会在 <strong>函数内部</strong>  修改 <strong>局部变量的引用</strong> ，<strong>不会影响到 外部变量的引用</strong> </p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">num, num_list</span>):</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;函数内部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 赋值语句</span></span><br><span class="line">    num = <span class="number">200</span></span><br><span class="line">    num_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    print(num_list)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;函数代码完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">99</span></span><br><span class="line">gl_list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">demo(gl_num, gl_list)</span><br><span class="line">print(gl_num)</span><br><span class="line">print(gl_list)</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><blockquote><p>问题 2：如果传递的参数是 <strong>可变类型</strong> ，在函数内部，使用 <strong>方法</strong>  修改了数据的内容，<strong>同样会影响到外部的数据</strong> </p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutable</span>(<span class="params">num_list</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># num_list = [1, 2, 3]</span></span><br><span class="line">    num_list.extend([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    print(num_list)</span><br><span class="line"></span><br><span class="line">gl_list = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">mutable(gl_list)</span><br><span class="line">print(gl_list)</span><br></pre></td></tr></table></div></figure>        <h4 id="面试题-——"   >          <a href="#面试题-——" class="heading-link"><i class="fas fa-link"></i></a>面试题 —— +=</h4>      <ul><li>在 <code>python</code> 中，列表变量调用 <code>+=</code> 本质上是在执行列表变量的 <code>extend</code> 方法，不会修改变量的引用</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">num, num_list</span>):</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;函数内部代码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># num = num + num</span></span><br><span class="line">    num += num</span><br><span class="line">    <span class="comment"># num_list.extend(num_list) 由于是调用方法，所以不会修改变量的引用</span></span><br><span class="line">    <span class="comment"># 函数执行结束后，外部数据同样会发生变化</span></span><br><span class="line">    num_list += num_list</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    print(num_list)</span><br><span class="line">    print(<span class="string">&quot;函数代码完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">9</span></span><br><span class="line">gl_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">demo(gl_num, gl_list)</span><br><span class="line">print(gl_num)</span><br><span class="line">print(gl_list)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="缺省参数"   >          <a href="#缺省参数" class="heading-link"><i class="fas fa-link"></i></a>缺省参数</h4>      <ul><li><p>定义函数时，可以给 <strong>某个参数</strong>  指定一个<strong>默认值</strong> ，具有默认值的参数就叫做 <strong>缺省参数</strong> </p></li><li><p>调用函数时，如果没有传入 <strong>缺省参数</strong>  的值，则在函数内部使用定义函数时指定的 <strong>参数默认值</strong> </p></li><li><p>函数的缺省参数，<strong>将常见的值设置为参数的缺省值</strong> ，从而 <strong>简化函数的调用</strong> </p></li><li><p>例如：对列表排序的方法</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gl_num_list = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认就是升序排序，因为这种应用需求更多</span></span><br><span class="line">gl_num_list.sort()</span><br><span class="line">print(gl_num_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有当需要降序排序时，才需要传递 `reverse` 参数</span></span><br><span class="line">gl_num_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(gl_num_list)</span><br></pre></td></tr></table></div></figure>        <h4 id="指定函数的缺省参数"   >          <a href="#指定函数的缺省参数" class="heading-link"><i class="fas fa-link"></i></a>指定函数的缺省参数</h4>      <ul><li>在参数后使用赋值语句，可以指定参数的缺省值</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">name, gender=True</span>):</span></span><br><span class="line"></span><br><span class="line">    gender_text = <span class="string">&quot;男生&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">&quot;女生&quot;</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%s 是 %s&quot;</span> % (name, gender_text))</span><br></pre></td></tr></table></div></figure><p><strong>提示</strong> </p><ol><li><p>缺省参数，需要使用 <strong>最常见的值</strong>  作为默认值！</p></li><li><p>如果一个参数的值 <strong>不能确定</strong> ，则不应该设置默认值，具体的数值在调用函数时，由外界传递！</p></li></ol>        <h4 id="缺省参数的注意事项"   >          <a href="#缺省参数的注意事项" class="heading-link"><i class="fas fa-link"></i></a>缺省参数的注意事项</h4>              <h4 id="1-缺省参数的定义位置"   >          <a href="#1-缺省参数的定义位置" class="heading-link"><i class="fas fa-link"></i></a>1) 缺省参数的定义位置</h4>      <ul><li><p><strong>必须保证</strong>  <strong>带有默认值的缺省参数</strong>  <strong>在参数列表末尾</strong> </p></li><li><p>所以，以下定义是错误的！</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">name, gender=True, title</span>):</span></span><br></pre></td></tr></table></div></figure>        <h4 id="2-调用带有多个缺省参数的函数"   >          <a href="#2-调用带有多个缺省参数的函数" class="heading-link"><i class="fas fa-link"></i></a>2) 调用带有多个缺省参数的函数</h4>      <ul><li>在 <strong>调用函数时</strong> ，如果有 <strong>多个缺省参数</strong> ，<strong>需要指定参数名</strong> ，这样解释器才能够知道参数的对应关系！</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">name, title=<span class="string">&quot;&quot;</span>, gender=True</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param title: 职位</span></span><br><span class="line"><span class="string">    :param name: 班上同学的姓名</span></span><br><span class="line"><span class="string">    :param gender: True 男生 False 女生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    gender_text = <span class="string">&quot;男生&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">&quot;女生&quot;</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%s%s 是 %s&quot;</span> % (title, name, gender_text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：在指定缺省参数的默认值时，应该使用最常见的值作为默认值！</span></span><br><span class="line">print_info(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">print_info(<span class="string">&quot;老王&quot;</span>, title=<span class="string">&quot;班长&quot;</span>)</span><br><span class="line">print_info(<span class="string">&quot;小美&quot;</span>, gender=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="多值参数"   >          <a href="#多值参数" class="heading-link"><i class="fas fa-link"></i></a>多值参数</h3>              <h4 id="定义支持多值参数的函数"   >          <a href="#定义支持多值参数的函数" class="heading-link"><i class="fas fa-link"></i></a>定义支持多值参数的函数</h4>      <ul><li><p>有时可能需要 <strong>一个函数</strong>  能够处理的参数 <strong>个数</strong>  是不确定的，这个时候，就可以使用 <strong>多值参数</strong> </p></li><li><p><code>python</code> 中有 <strong>两种</strong>  多值参数：</p></li></ul><p>&ensp;&ensp;&ensp;&ensp;- 参数名前增加 <strong>一个</strong>  <code>*</code> 可以接收 <strong>元组</strong> </p><p>&ensp;&ensp;&ensp;&ensp;- 参数名前增加 <strong>两个</strong>  <code>*</code> 可以接收 <strong>字典</strong> </p><ul><li>一般在给多值参数命名时，<strong>习惯</strong> 使用以下两个名字</li></ul><p>&ensp;&ensp;&ensp;&ensp;- <code>*args</code> —— 存放 <strong>元组</strong>  参数，前面有一个 <code>*</code></p><p>&ensp;&ensp;&ensp;&ensp;- <code>**kwargs</code> —— 存放 <strong>字典</strong>  参数，前面有两个 <code>*</code></p><ul><li><p><code>args</code> 是 <code>arguments</code> 的缩写，有变量的含义</p></li><li><p><code>kw</code> 是 <code>keyword</code> 的缩写，<code>kwargs</code> 可以记忆 <strong>键值对参数</strong> </p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">num, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, name=<span class="string">&quot;小明&quot;</span>, age=<span class="number">18</span>, gender=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><blockquote><p>提示：<strong>多值参数</strong>  的应用会经常出现在网络上一些大牛开发的框架中，知道多值参数，<strong>有利于我们能够读懂大牛的代码</strong> </p></blockquote>        <h4 id="多值参数案例-——-计算任意多个数字的和"   >          <a href="#多值参数案例-——-计算任意多个数字的和" class="heading-link"><i class="fas fa-link"></i></a>多值参数案例 —— 计算任意多个数字的和</h4>      <p><strong>需求</strong> </p><ol><li><p>定义一个函数 <code>sum_numbers</code>，可以接收的 <strong>任意多个整数</strong> </p></li><li><p>功能要求：将传递的 <strong>所有数字累加</strong>  并且返回累加结果</p></li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">*args</span>):</span></span><br><span class="line"></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历 args 元组顺序求和</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        num += n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">print(sum_numbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></div></figure>        <h4 id="元组和字典的拆包（知道）"   >          <a href="#元组和字典的拆包（知道）" class="heading-link"><i class="fas fa-link"></i></a>元组和字典的拆包（知道）</h4>      <ul><li>在调用带有多值参数的函数时，如果希望：</li></ul><p>&ensp;&ensp;&ensp;&ensp;- 将一个 <strong>元组变量</strong> ，直接传递给 <code>args</code></p><p>&ensp;&ensp;&ensp;&ensp;- 将一个 <strong>字典变量</strong> ，直接传递给 <code>kwargs</code></p><ul><li>就可以使用 <strong>拆包</strong> ，简化参数的传递，<strong>拆包</strong>  的方式是：</li></ul><p>&ensp;&ensp;&ensp;&ensp;- 在 <strong>元组变量前</strong> ，增加 <strong>一个</strong>  <code>*</code></p><p>&ensp;&ensp;&ensp;&ensp;- 在 <strong>字典变量前</strong> ，增加 <strong>两个</strong>  <code>*</code></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span></span><br><span class="line">gl_nums = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">gl_xiaoming = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span></span><br><span class="line"><span class="comment"># demo(gl_nums, gl_xiaoming)</span></span><br><span class="line">demo(*gl_nums, **gl_xiaoming)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="函数的递归"   >          <a href="#函数的递归" class="heading-link"><i class="fas fa-link"></i></a>函数的递归</h3>      <blockquote><p>函数调用自身的 <strong>编程技巧</strong>  称为递归</p></blockquote>        <h4 id="递归函数的特点"   >          <a href="#递归函数的特点" class="heading-link"><i class="fas fa-link"></i></a>递归函数的特点</h4>      <p><strong>特点</strong> </p><ul><li><strong>一个函数</strong>  <strong>内部</strong>  <strong>调用自己</strong> </li></ul><p>&ensp;&ensp;&ensp;&ensp;- 函数内部可以调用其他函数，当然在函数内部也可以调用自己</p><p><strong>代码特点</strong> </p><ol><li><p>函数内部的 <strong>代码</strong>  是相同的，只是针对 <strong>参数</strong>  不同，<strong>处理的结果不同</strong> </p></li><li><p>当 <strong>参数满足一个条件</strong>  时，函数不再执行</p></li></ol><p>&ensp;&ensp;&ensp;&ensp;- <strong>这个非常重要</strong> ，通常被称为递归的出口，否则 <strong>会出现死循环</strong> ！</p><p>示例代码</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">num</span>):</span></span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 递归的出口很重要，否则会出现死循环</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    sum_numbers(num - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">sum_numbers(<span class="number">3</span>)</span><br></pre></td></tr></table></div></figure>        <h4 id="递归案例-——-计算数字累加"   >          <a href="#递归案例-——-计算数字累加" class="heading-link"><i class="fas fa-link"></i></a>递归案例 —— 计算数字累加</h4>      <p><strong>需求</strong> </p><ol><li><p>定义一个函数 <code>sum_numbers</code></p></li><li><p>能够接收一个 <code>num</code> 的整数参数</p></li><li><p>计算 1 + 2 + … num 的结果</p></li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">num</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 假设 sum_numbers 能够完成 num - 1 的累加</span></span><br><span class="line">    temp = sum_numbers(num - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 函数内部的核心算法就是 两个数字的相加</span></span><br><span class="line">    <span class="keyword">return</span> num + temp</span><br><span class="line"></span><br><span class="line">print(sum_numbers(<span class="number">2</span>))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><blockquote><p>提示：递归是一个 <strong>编程技巧</strong> ，初次接触递归会感觉有些吃力！在处理 <strong>不确定的循环条件时</strong> ，格外的有用，例如：<strong>遍历整个文件目录的结构</strong> </p></blockquote>        <h2 id="eval-函数"   >          <a href="#eval-函数" class="heading-link"><i class="fas fa-link"></i></a>eval 函数</h2>      <p><code>eval()</code> 函数十分强大 —— <strong>将字符串</strong> 当成 <strong>有效的表达式</strong> 来求值 并 <strong>返回计算结果</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本的数学计算</span></span><br><span class="line">In [<span class="number">1</span>]: eval(<span class="string">&quot;1 + 1&quot;</span>)</span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串重复</span></span><br><span class="line">In [<span class="number">2</span>]: eval(<span class="string">&quot;&#x27;*&#x27; * 10&quot;</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;**********&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换成列表</span></span><br><span class="line">In [<span class="number">3</span>]: type(eval(<span class="string">&quot;[1, 2, 3, 4, 5]&quot;</span>))</span><br><span class="line">Out[<span class="number">3</span>]: list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换成字典</span></span><br><span class="line">In [<span class="number">4</span>]: type(eval(<span class="string">&quot;&#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;&quot;</span>))</span><br><span class="line">Out[<span class="number">4</span>]: dict</span><br></pre></td></tr></table></div></figure>        <h3 id="案例-计算器"   >          <a href="#案例-计算器" class="heading-link"><i class="fas fa-link"></i></a>案例 - 计算器</h3>      <p><strong>需求</strong></p><ol><li><p>提示用户输入一个 <strong>加减乘除混合运算</strong></p></li><li><p>返回计算结果</p></li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input_str = input(<span class="string">&quot;请输入一个算术题：&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(eval(input_str))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="不要滥用-eval"   >          <a href="#不要滥用-eval" class="heading-link"><i class="fas fa-link"></i></a>不要滥用 eval</h3>      <blockquote><p>在开发时千万不要使用 <code>eval</code> 直接转换 <code>input</code> 的结果</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></div></figure><ul><li>等价代码</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;终端命令&quot;</span>)</span><br></pre></td></tr></table></div></figure><ul><li><p>执行成功，返回 0</p></li><li><p>执行失败，返回错误信息</p></li></ul><hr>        <h1 id="面向对象"   >          <a href="#面向对象" class="heading-link"><i class="fas fa-link"></i></a>面向对象</h1>              <h2 id="面向对象-OOP-基本概念"   >          <a href="#面向对象-OOP-基本概念" class="heading-link"><i class="fas fa-link"></i></a>面向对象(OOP)基本概念</h2>      <p><strong>面向对象编程</strong> —— <code>Object Oriented Programming</code> 简写 <code>OOP</code></p>        <h3 id="面向对象基本概念"   >          <a href="#面向对象基本概念" class="heading-link"><i class="fas fa-link"></i></a>面向对象基本概念</h3>      <ul><li><p>我们之前学习的编程方式就是 <strong>面向过程</strong> 的</p></li><li><p><strong>面相过程</strong> 和 <strong>面相对象</strong>，是两种不同的 <strong>编程方式</strong></p></li><li><p>对比 <strong>面向过程</strong> 的特点，可以更好地了解什么是 <strong>面向对象</strong></p></li></ul>        <h3 id="过程和函数（科普）"   >          <a href="#过程和函数（科普）" class="heading-link"><i class="fas fa-link"></i></a>过程和函数（科普）</h3>      <ul><li><p><strong>过程</strong> 是早期的一个编程概念</p></li><li><p><strong>过程</strong> 类似于函数，只能执行，但是没有返回值</p></li><li><p><strong>函数</strong> 不仅能执行，还可以返回结果</p></li></ul>        <h3 id="面相过程-和-面相对象-基本概念"   >          <a href="#面相过程-和-面相对象-基本概念" class="heading-link"><i class="fas fa-link"></i></a>面相过程 和 面相对象 基本概念</h3>              <h4 id="面相过程-——-怎么做？"   >          <a href="#面相过程-——-怎么做？" class="heading-link"><i class="fas fa-link"></i></a>面相过程 —— 怎么做？</h4>      <ol><li><p>把完成某一个需求的 <code>所有步骤</code> <code>从头到尾</code> 逐步实现</p></li><li><p>根据开发需求，将某些 <strong>功能独立</strong> 的代码 <strong>封装</strong> 成一个又一个 <strong>函数</strong></p></li><li><p>最后完成的代码，就是顺序地调用 <strong>不同的函数</strong></p></li></ol><p><strong>特点</strong></p><ol><li><p>注重 <strong>步骤与过程</strong>，不注重职责分工</p></li><li><p>如果需求复杂，代码会变得很复杂</p></li><li><p><strong>开发复杂项目，没有固定的套路，开发难度很大！</strong></p></li></ol>        <h4 id="面向对象-——-谁来做？"   >          <a href="#面向对象-——-谁来做？" class="heading-link"><i class="fas fa-link"></i></a>面向对象 —— 谁来做？</h4>      <blockquote><p>相比较函数，<strong>面向对象</strong> 是 <strong>更大</strong> 的 <strong>封装</strong>，根据 <strong>职责</strong> 在 <strong>一个对象中 封装 多个方法</strong></p></blockquote><ol><li><p>在完成某一个需求前，首先确定 <strong>职责</strong> —— <strong>要做的事情（方法）</strong></p></li><li><p>根据 <strong>职责</strong> 确定不同的 <strong>对象</strong>，在 <strong>对象</strong> 内部封装不同的 <strong>方法</strong>（多个）</p></li><li><p>最后完成的代码，就是顺序地让 <strong>不同的对象</strong> 调用 <strong>不同的方法</strong></p></li></ol><p><strong>特点</strong></p><ol><li><p>注重 <strong>对象和职责</strong>，不同的对象承担不同的职责</p></li><li><p>更加适合应对复杂的需求变化，<strong>是专门应对复杂项目开发，提供的固定套路</strong></p></li><li><p><strong>需要在面向过程基础上，再学习一些面向对象的语法</strong></p></li></ol>        <h2 id="类和对象"   >          <a href="#类和对象" class="heading-link"><i class="fas fa-link"></i></a>类和对象</h2>              <h3 id="类和对象的概念"   >          <a href="#类和对象的概念" class="heading-link"><i class="fas fa-link"></i></a>类和对象的概念</h3>      <p><strong>类</strong> 和 <strong>对象</strong> 是 <strong>面向对象编程的 两个 核心概念</strong></p>        <h3 id="1-1-类"   >          <a href="#1-1-类" class="heading-link"><i class="fas fa-link"></i></a>1.1 类</h3>      <ul><li><p><strong>类</strong> 是对一群具有 <strong>相同 特征</strong> 或者 <strong>行为</strong> 的事物的一个统称，是抽象的，<strong>不能直接使用</strong></p><ul><li><p><strong>特征</strong> 被称为 <strong>属性</strong></p></li><li><p><strong>行为</strong> 被称为 <strong>方法</strong></p></li></ul></li><li><p><strong>类</strong> 就相当于制造飞机时的<strong>图纸</strong>，是一个 <strong>模板</strong>，是 <strong>负责创建对象的</strong></p></li></ul>        <h3 id="对象"   >          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a>对象</h3>      <ul><li><p><strong>对象</strong> 是 <strong>由类创建出来的一个具体存在</strong>，可以直接使用</p></li><li><p>由 <strong>哪一个类</strong> 创建出来的 <strong>对象</strong>，就拥有在 <strong>哪一个类</strong> 中定义的：</p><ul><li><p>属性</p></li><li><p>方法</p></li></ul></li><li><p><strong>对象</strong> 就相当于用 <strong>图纸</strong> <strong>制造</strong> 的飞机</p></li></ul><blockquote><p>在程序开发中，应该 <strong>先有类，再有对象</strong></p></blockquote>        <h3 id="类和对象的关系"   >          <a href="#类和对象的关系" class="heading-link"><i class="fas fa-link"></i></a>类和对象的关系</h3>      <ul><li><p><strong>类是模板</strong>，<strong>对象</strong> 是根据 <strong>类</strong> 这个模板创建出来的，应该 <strong>先有类，再有对象</strong></p></li><li><p><strong>类</strong> 只有一个，而 <strong>对象</strong> 可以有很多个</p><ul><li><strong>不同的对象</strong> 之间 <strong>属性</strong> 可能会各不相同</li></ul></li><li><p><strong>类</strong> 中定义了什么 <strong>属性和方法</strong>，<strong>对象</strong> 中就有什么属性和方法，<strong>不可能多，也不可能少</strong></p></li></ul>        <h3 id="类的设计"   >          <a href="#类的设计" class="heading-link"><i class="fas fa-link"></i></a>类的设计</h3>      <p>在使用面相对象开发前，应该首先分析需求，确定一下，程序中需要包含哪些类！</p><p>在程序开发中，要设计一个类，通常需要满足一下三个要素：</p><ol><li><p><strong>类名</strong> 这类事物的名字，<strong>满足大驼峰命名法</strong></p></li><li><p><strong>属性</strong> 这类事物具有什么样的特征</p></li><li><p><strong>方法</strong> 这类事物具有什么样的行为</p></li></ol>        <h3 id="大驼峰命名法"   >          <a href="#大驼峰命名法" class="heading-link"><i class="fas fa-link"></i></a>大驼峰命名法</h3>      <p><code>CapWords</code></p><ol><li><p>每一个单词的首字母大写</p></li><li><p>单词与单词之间没有下划线</p></li></ol>        <h3 id="类名的确定"   >          <a href="#类名的确定" class="heading-link"><i class="fas fa-link"></i></a>类名的确定</h3>      <p><strong>名词提炼法</strong> 分析 <strong>整个业务流程</strong>，出现的 <strong>名词</strong>，通常就是找到的类</p>        <h3 id="属性和方法的确定"   >          <a href="#属性和方法的确定" class="heading-link"><i class="fas fa-link"></i></a>属性和方法的确定</h3>      <ul><li><p>对 <strong>对象的特征描述</strong>，通常可以定义成 <strong>属性</strong></p></li><li><p><strong>对象具有的行为</strong>（动词），通常可以定义成 <strong>方法</strong></p></li></ul><blockquote><p>提示：需求中没有涉及的属性或者方法在设计类时，不需要考虑</p></blockquote>        <h2 id="面相对象基础语法"   >          <a href="#面相对象基础语法" class="heading-link"><i class="fas fa-link"></i></a>面相对象基础语法</h2>              <h3 id="dir-内置函数（知道）"   >          <a href="#dir-内置函数（知道）" class="heading-link"><i class="fas fa-link"></i></a>dir 内置函数（知道）</h3>      <ul><li>在 <code>Python</code> 中 <strong>对象几乎是无所不在的</strong>，我们之前学习的 <strong>变量</strong>、<strong>数据</strong>、<strong>函数</strong> 都是对象</li></ul><p>在 <code>Python</code> 中可以使用以下两个方法验证：</p><ol><li><p>在 <strong>标识符</strong> / <strong>数据</strong> 后输入一个 <code>.</code>，然后按下 <code>TAB</code> 键，<code>iPython</code> 会提示该对象能够调用的 <strong>方法列表</strong></p></li><li><p>使用内置函数 <code>dir</code> 传入 <strong>标识符</strong> / <strong>数据</strong>，可以查看对象内的 <strong>所有属性及方法</strong></p></li></ol><p><strong>提示</strong> <code>__方法名__</code> 格式的方法是 <code>Python</code> 提供的 <strong>内置方法 / 属性</strong>，稍后会给大家介绍一些常用的 内置方法 / 属性</p><div class="table-container"><table><thead><tr><th>序号</th><th>方法名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td><code>__new__</code></td><td>方法</td><td><strong>**</strong>创建对象<strong>时，会被 ****</strong>自动** 调用</td></tr><tr><td>02</td><td><code>__init__</code></td><td>方法</td><td><strong>**</strong>对象被初始化<strong>时，会被 ****</strong>自动** 调用</td></tr><tr><td>03</td><td><code>__del__</code></td><td>方法</td><td><strong>**</strong>对象被从内存中销毁<strong>前，会被 ****</strong>自动** 调用</td></tr><tr><td>04</td><td><code>__str__</code></td><td>方法</td><td>返回**<strong>**对象的描述信息</strong>，<code>print</code> 函数输出使用</td></tr></tbody></table></div><p><strong>提示</strong> 利用好 <code>dir()</code> 函数，在学习时很多内容就不需要死记硬背了</p>        <h3 id="定义简单的类（只包含方法）"   >          <a href="#定义简单的类（只包含方法）" class="heading-link"><i class="fas fa-link"></i></a>定义简单的类（只包含方法）</h3>      <blockquote><p><strong>面向对象</strong> 是 <strong>更大</strong> 的 <strong>封装</strong>，在 <strong>一个类中 封装 多个方法</strong>，这样 <strong>通过这个类创建出来的对象，就可以直接调用这些方法了</strong>！</p></blockquote>        <h4 id="定义只包含方法的类"   >          <a href="#定义只包含方法的类" class="heading-link"><i class="fas fa-link"></i></a>定义只包含方法的类</h4>      <ul><li>在 <code>Python</code> 中要定义一个只包含方法的类，语法格式如下：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法1(<span class="params">self, 参数列表</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法2(<span class="params">self, 参数列表</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></div></figure><ul><li><p><strong>方法</strong> 的定义格式和之前学习过的<strong>函数</strong> 几乎一样</p></li><li><p>区别在于第一个参数必须是 <code>self</code>，大家暂时先记住，稍后介绍 <code>self</code></p></li></ul><blockquote><p>注意：<strong>类名</strong> 的 命名规则 要符合 <strong>大驼峰命名法</strong></p></blockquote>        <h4 id="创建对象"   >          <a href="#创建对象" class="heading-link"><i class="fas fa-link"></i></a>创建对象</h4>      <ul><li>当一个类定义完成之后，要使用这个类来创建对象，语法格式如下：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象变量 = 类名()</span><br></pre></td></tr></table></div></figure>        <h3 id="2-3-第一个面向对象程序"   >          <a href="#2-3-第一个面向对象程序" class="heading-link"><i class="fas fa-link"></i></a>2.3 第一个面向对象程序</h3>      <p><strong>需求</strong></p><ul><li><strong>小猫</strong> 爱 <strong>吃</strong> 鱼，<strong>小猫</strong> 要 <strong>喝</strong> 水</li></ul><p><strong>分析</strong></p><ol><li><p>定义一个猫类 <code>Cat</code></p></li><li><p>定义两个方法 <code>eat</code> 和 <code>drink</code></p></li><li><p>按照需求 —— 不需要定义属性</p></li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个猫类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;小猫爱吃鱼&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;小猫在喝水&quot;</span>)</span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.eat()</span><br></pre></td></tr></table></div></figure>        <h4 id="引用概念的强调"   >          <a href="#引用概念的强调" class="heading-link"><i class="fas fa-link"></i></a>引用概念的强调</h4>      <blockquote><p>在面向对象开发中，<strong>引用</strong>的概念是同样适用的！</p></blockquote><ul><li><p>在 <code>Python</code> 中使用类 <strong>创建对象之后</strong>，<code>tom</code> 变量中 仍然记录的是 <strong>对象在内存中的地址</strong></p></li><li><p>也就是 <code>tom</code> 变量 <strong>引用</strong> 了 <strong>新建的猫对象</strong></p></li><li><p>使用 <code>print</code> 输出 <strong>对象变量</strong>，默认情况下，是能够输出这个变量 <strong>引用的对象</strong> 是 <strong>由哪一个类创建的对象</strong>，以及 <strong>在内存中的地址</strong>（<strong>十六进制表示</strong>）</p></li></ul><blockquote><p>提示：在计算机中，通常使用 <strong>十六进制</strong> 表示 <strong>内存地址</strong></p></blockquote><ul><li><p><strong>十进制</strong> 和 <strong>十六进制</strong> 都是用来表达数字的，只是表示的方式不一样</p></li><li><p><strong>十进制</strong> 和 <strong>十六进制</strong> 的数字之间可以来回转换</p></li><li><p><code>%d</code> 可以以 <strong>10 进制</strong> 输出数字</p></li><li><p><code>%x</code> 可以以 <strong>16 进制</strong> 输出数字</p></li></ul>        <h4 id="案例进阶-——-使用-Cat-类再创建一个对象"   >          <a href="#案例进阶-——-使用-Cat-类再创建一个对象" class="heading-link"><i class="fas fa-link"></i></a>案例进阶 —— 使用 Cat 类再创建一个对象</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lazy_cat = Cat()</span><br><span class="line">lazy_cat.eat()</span><br><span class="line">lazy_cat.drink()</span><br></pre></td></tr></table></div></figure><blockquote><p>提问：<code>tom</code> 和 <code>lazy_cat</code> 是同一个对象吗？</p></blockquote>        <h3 id="方法中的-self-参数"   >          <a href="#方法中的-self-参数" class="heading-link"><i class="fas fa-link"></i></a>方法中的 self 参数</h3>              <h4 id="案例改造-——-给对象增加属性"   >          <a href="#案例改造-——-给对象增加属性" class="heading-link"><i class="fas fa-link"></i></a>案例改造 —— 给对象增加属性</h4>      <ul><li><p>在 <code>Python</code> 中，要 <strong>给对象设置属性</strong>，非常的容易，<strong>但是不推荐使用</strong></p><ul><li>因为：对象属性的封装应该封装在类的内部</li></ul></li><li><p>只需要在 <strong>类的外部的代码</strong> 中直接通过 <code>.</code> 设置一个属性即可</p></li></ul><blockquote><p>注意：这种方式虽然简单，但是不推荐使用！</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tom.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">lazy_cat.name = <span class="string">&quot;大懒猫&quot;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="使用-self-在方法内部输出每一只猫的名字"   >          <a href="#使用-self-在方法内部输出每一只猫的名字" class="heading-link"><i class="fas fa-link"></i></a>使用 self 在方法内部输出每一只猫的名字</h4>      <blockquote><p>由 <strong>哪一个对象</strong> 调用的方法，方法内的 <code>self</code> 就是 <strong>哪一个对象的引用</strong></p></blockquote><ul><li><p>在类封装的方法内部，<code>self</code> 就表示 <strong>当前调用方法的对象自己</strong></p></li><li><p><strong>调用方法时</strong>，程序员不需要传递 <code>self</code> 参数</p></li><li><p><strong>在方法内部</strong></p><ul><li><p>可以通过 <code>self.</code> <strong>访问对象的属性</strong></p></li><li><p>也可以通过 <code>self.</code> <strong>调用其他的对象方法</strong></p></li></ul></li><li><p>改造代码如下：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;%s 爱吃鱼&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">tom.eat()</span><br><span class="line"></span><br><span class="line">lazy_cat = Cat()</span><br><span class="line">lazy_cat.name = <span class="string">&quot;大懒猫&quot;</span></span><br><span class="line">lazy_cat.eat()</span><br></pre></td></tr></table></div></figure><ul><li><p>在 <strong>类的外部</strong>，通过 <code>变量名.</code> 访问对象的 <strong>属性和方法</strong></p></li><li><p>在 <strong>类封装的方法中</strong>，通过 <code>self.</code> 访问对象的 <strong>属性和方法</strong></p></li></ul>        <h3 id="初始化方法"   >          <a href="#初始化方法" class="heading-link"><i class="fas fa-link"></i></a>初始化方法</h3>              <h4 id="之前代码存在的问题-——-在类的外部给对象增加属性"   >          <a href="#之前代码存在的问题-——-在类的外部给对象增加属性" class="heading-link"><i class="fas fa-link"></i></a>之前代码存在的问题 —— 在类的外部给对象增加属性</h4>      <ul><li>将案例代码进行调整，<strong>先调用方法 再设置属性</strong>，观察一下执行效果</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tom = Cat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.eat()</span><br><span class="line">tom.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">print(tom)</span><br></pre></td></tr></table></div></figure><ul><li>程序执行报错如下：</li></ul><figure class="highlight text"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: &#x27;Cat&#x27; object has no attribute &#x27;name&#x27;</span><br><span class="line">属性错误：&#x27;Cat&#x27; 对象没有 &#x27;name&#x27; 属性</span><br></pre></td></tr></table></div></figure><p><strong>提示</strong></p><ul><li><p>在日常开发中，不推荐在 <strong>类的外部</strong> 给对象增加属性</p><ul><li>如果<strong>在运行时，没有找到属性，程序会报错</strong></li></ul></li><li><p>对象应该包含有哪些属性，应该 <strong>封装在类的内部</strong></p></li></ul>        <h4 id="初始化方法-1"   >          <a href="#初始化方法-1" class="heading-link"><i class="fas fa-link"></i></a>初始化方法</h4>      <ul><li><p>当使用 <code>类名()</code> 创建对象时，会 <strong>自动</strong> 执行以下操作：</p><ol><li><p>为对象在内存中 <strong>分配空间</strong> —— 创建对象</p></li><li><p>为对象的属性 <strong>设置初始值</strong> —— 初始化方法(<code>init</code>)</p></li></ol></li><li><p>这个 <strong>初始化方法</strong> 就是 <code>__init__</code> 方法，<code>__init__</code> 是对象的<strong>内置方法</strong></p></li></ul><blockquote><p><code>__init__</code> 方法是 <strong>专门</strong> 用来定义一个类 <strong>具有哪些属性的方法</strong>！</p></blockquote><p>在 <code>Cat</code> 中增加 <code>__init__</code> 方法，验证该方法在创建对象时会被自动调用</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个猫类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;初始化方法&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h4 id="在初始化方法内部定义属性"   >          <a href="#在初始化方法内部定义属性" class="heading-link"><i class="fas fa-link"></i></a>在初始化方法内部定义属性</h4>      <ul><li><p>在 <code>__init__</code> 方法内部使用 <code>self.属性名 = 属性的初始值</code> 就可以 <strong>定义属性</strong></p></li><li><p>定义属性之后，再使用 <code>Cat</code> 类创建的对象，都会拥有该属性</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;这是一个初始化方法&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义用 Cat 类创建的猫对象都有一个 name 的属性</span></span><br><span class="line">        self.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;%s 爱吃鱼&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用类名()创建对象的时候，会自动调用初始化方法 __init__</span></span><br><span class="line">tom = Cat()</span><br><span class="line"></span><br><span class="line">tom.eat()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="改造初始化方法-——-初始化的同时设置初始值"   >          <a href="#改造初始化方法-——-初始化的同时设置初始值" class="heading-link"><i class="fas fa-link"></i></a>改造初始化方法 —— 初始化的同时设置初始值</h4>      <ul><li><p>在开发中，如果希望在 <strong>创建对象的同时，就设置对象的属性</strong>，可以对 <code>__init__</code> 方法进行 <strong>改造</strong></p><ol><li><p>把希望设置的属性值，定义成 <code>__init__</code> 方法的参数</p></li><li><p>在方法内部使用 <code>self.属性 = 形参</code> 接收外部传递的参数</p></li><li><p>在创建对象时，使用 <code>类名(属性1, 属性2...)</code> 调用</p></li></ol></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">&quot;初始化方法 %s&quot;</span> % name)</span><br><span class="line">        self.name = name</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">tom = Cat(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">lazy_cat = Cat(<span class="string">&quot;大懒猫&quot;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure>        <h3 id="内置方法和属性"   >          <a href="#内置方法和属性" class="heading-link"><i class="fas fa-link"></i></a>内置方法和属性</h3>      <div class="table-container"><table><thead><tr><th>序号</th><th>方法名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td><code>__del__</code></td><td>方法</td><td><strong>**</strong>对象被从内存中销毁<strong>前，会被 ****</strong>自动** 调用</td></tr><tr><td>02</td><td><code>__str__</code></td><td>方法</td><td>返回**<strong>**对象的描述信息</strong>，<code>print</code> 函数输出使用</td></tr></tbody></table></div>        <h4 id="del-方法（知道）"   >          <a href="#del-方法（知道）" class="heading-link"><i class="fas fa-link"></i></a>__del__ 方法（知道）</h4>      <ul><li><p>在 <code>Python</code> 中</p><ul><li><p>当使用 <code>类名()</code> 创建对象时，为对象 <strong>分配完空间</strong>后，<strong>自动</strong> 调用 <code>__init__</code> 方法</p></li><li><p>当一个 <strong>对象被从内存中销毁</strong> 前，会 <strong>自动</strong> 调用 <code>__del__</code> 方法</p></li></ul></li><li><p><strong>应用场景</strong></p><ul><li><p><code>__init__</code> 改造初始化方法，可以让创建对象更加灵活</p></li><li><p><code>__del__</code> 如果希望在对象被销毁前，再做一些事情，可以考虑一下 <code>__del__</code> 方法</p></li></ul></li><li><p><strong>生命周期</strong></p><ul><li><p>一个对象从调用 <code>类名()</code> 创建，生命周期开始</p></li><li><p>一个对象的 <code>__del__</code> 方法一旦被调用，生命周期结束</p></li><li><p>在对象的生命周期内，可以访问对象属性，或者让对象调用方法</p></li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, new_name</span>):</span></span><br><span class="line"></span><br><span class="line">        self.name = new_name</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s 来了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s 去了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tom 是一个全局变量</span></span><br><span class="line">tom = Cat(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">print(tom.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># del 关键字可以删除一个对象</span></span><br><span class="line"><span class="keyword">del</span> tom</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="str-方法"   >          <a href="#str-方法" class="heading-link"><i class="fas fa-link"></i></a>__str__ 方法</h4>      <ul><li><p>在 <code>Python</code> 中，使用 <code>print</code> 输出 <strong>对象变量</strong>，默认情况下，会输出这个变量 <strong>引用的对象</strong> 是 <strong>由哪一个类创建的对象</strong>，以及 <strong>在内存中的地址</strong>（<strong>十六进制表示</strong>）</p></li><li><p>如果在开发中，希望使用 <code>print</code> 输出 <strong>对象变量</strong> 时，能够打印 <strong>自定义的内容</strong>，就可以利用 <code>__str__</code> 这个内置方法了</p></li></ul><blockquote><p>注意：<code>__str__</code> 方法必须返回一个字符串</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, new_name</span>):</span></span><br><span class="line"></span><br><span class="line">        self.name = new_name</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s 来了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s 去了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是小猫：%s&quot;</span> % self.name</span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">print(tom)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="面向对象封装案例"   >          <a href="#面向对象封装案例" class="heading-link"><i class="fas fa-link"></i></a>面向对象封装案例</h2>              <h3 id="封装"   >          <a href="#封装" class="heading-link"><i class="fas fa-link"></i></a>封装</h3>      <ol><li><p><strong>封装</strong> 是面向对象编程的一大特点</p></li><li><p>面向对象编程的 <strong>第一步</strong> —— 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</p></li><li><p><strong>外界</strong> 使用 <strong>类</strong> 创建 <strong>对象</strong>，然后 <strong>让对象调用方法</strong></p></li><li><p><strong>对象方法的细节</strong> 都被 <strong>封装</strong> 在 <strong>类的内部</strong></p></li></ol>        <h3 id="小明爱跑步"   >          <a href="#小明爱跑步" class="heading-link"><i class="fas fa-link"></i></a>小明爱跑步</h3>      <p><strong>需求</strong></p><ol><li><p><strong>小明</strong> <strong>体重</strong> <code>75.0</code> 公斤</p></li><li><p>小明每次 <strong>跑步</strong> 会减肥 <code>0.5</code> 公斤</p></li><li><p>小明每次 <strong>吃东西</strong> 体重增加 <code>1</code> 公斤</p></li></ol><blockquote><p>提示：在 <strong>对象的方法内部</strong>，是可以 <strong>直接访问对象的属性</strong> 的！</p></blockquote><ul><li>代码实现：</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;人类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, weight</span>):</span></span><br><span class="line"></span><br><span class="line">        self.name = name</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我的名字叫 %s 体重 %.2f 公斤&quot;</span> % (self.name, self.weight)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;跑步&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s 爱跑步，跑步锻炼身体&quot;</span> % self.name)</span><br><span class="line">        self.weight -= <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;吃东西&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s 是吃货，吃完这顿再减肥&quot;</span> % self.name)</span><br><span class="line">        self.weight += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoming = Person(<span class="string">&quot;小明&quot;</span>, <span class="number">75</span>)</span><br><span class="line"></span><br><span class="line">xiaoming.run()</span><br><span class="line">xiaoming.eat()</span><br><span class="line">xiaoming.eat()</span><br><span class="line"></span><br><span class="line">print(xiaoming)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="小明爱跑步扩展-——-小美也爱跑步"   >          <a href="#小明爱跑步扩展-——-小美也爱跑步" class="heading-link"><i class="fas fa-link"></i></a>小明爱跑步扩展 —— 小美也爱跑步</h4>      <p><strong>需求</strong></p><ol><li><p><strong>小明</strong> 和 <strong>小美</strong> 都爱跑步</p></li><li><p><strong>小明</strong> <strong>体重</strong> <code>75.0</code> 公斤</p></li><li><p><strong>小美</strong> <strong>体重</strong> <code>45.0</code> 公斤</p></li><li><p>每次 <strong>跑步</strong> 都会减少 <code>0.5</code> 公斤</p></li><li><p>每次 <strong>吃东西</strong> 都会增加 <code>1</code> 公斤</p></li></ol><p><strong>提示</strong></p><ol><li><p>在 <strong>对象的方法内部</strong>，是可以 <strong>直接访问对象的属性</strong> 的</p></li><li><p><strong>同一个类</strong> 创建的 <strong>多个对象</strong> 之间，<strong>属性</strong> 互不干扰！</p></li></ol>        <h3 id="摆放家具"   >          <a href="#摆放家具" class="heading-link"><i class="fas fa-link"></i></a>摆放家具</h3>      <p><strong>需求</strong></p><ol><li><p><strong>房子(House)</strong> 有 <strong>户型</strong>、<strong>总面积</strong> 和 <strong>家具名称列表</strong></p><ul><li>新房子没有任何的家具</li></ul></li><li><p><strong>家具(HouseItem)</strong> 有 <strong>名字</strong> 和 <strong>占地面积</strong>，其中</p><ul><li><p><strong>席梦思(bed)</strong> 占地 <code>4</code> 平米</p></li><li><p><strong>衣柜(chest)</strong> 占地 <code>2</code> 平米  </p></li><li><p><strong>餐桌(table)</strong> 占地 <code>1.5</code> 平米</p></li></ul></li><li><p>将以上三件 <strong>家具</strong> <strong>添加</strong> 到 <strong>房子</strong> 中</p></li><li><p>打印房子时，要求输出：<strong>户型</strong>、<strong>总面积</strong>、<strong>剩余面积</strong>、<strong>家具名称列表</strong></p></li></ol><p><strong>剩余面积</strong></p><ol><li><p>在创建房子对象时，定义一个 <strong>剩余面积的属性</strong>，<strong>初始值和总面积相等</strong></p></li><li><p>当调用 <code>add_item</code> 方法，向房间 <strong>添加家具</strong> 时，让 <strong>剩余面积</strong> -= <strong>家具面积</strong></p></li></ol><p><strong>思考</strong>：应该先开发哪一个类？</p><p><strong>答案</strong> —— <strong>家具类</strong></p><ol><li><p>家具简单</p></li><li><p>房子要使用到家具，<strong>被使用的类</strong>，通常应该先开发</p></li></ol>        <h4 id="创建家具"   >          <a href="#创建家具" class="heading-link"><i class="fas fa-link"></i></a>创建家具</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseItem</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, area</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 家具名称</span></span><br><span class="line"><span class="string">        :param area: 占地面积</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[%s] 占地面积 %.2f&quot;</span> % (self.name, self.area)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建家具</span></span><br><span class="line">bed = HouseItem(<span class="string">&quot;席梦思&quot;</span>, <span class="number">4</span>)</span><br><span class="line">chest = HouseItem(<span class="string">&quot;衣柜&quot;</span>, <span class="number">2</span>)</span><br><span class="line">table = HouseItem(<span class="string">&quot;餐桌&quot;</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line">print(bed)</span><br><span class="line">print(chest)</span><br><span class="line">print(table)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>小结</strong></p><ol><li><p>创建了一个 <strong>家具类</strong>，使用到 <code>__init__</code> 和 <code>__str__</code> 两个内置方法</p></li><li><p>使用 <strong>家具类</strong> 创建了 <strong>三个家具对象</strong>，并且 <strong>输出家具信息</strong></p></li></ol>        <h3 id="3-2-创建房间"   >          <a href="#3-2-创建房间" class="heading-link"><i class="fas fa-link"></i></a>3.2 创建房间</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, house_type, area</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param house_type: 户型</span></span><br><span class="line"><span class="string">        :param area: 总面积</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.house_type = house_type</span><br><span class="line">        self.area = area</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 剩余面积默认和总面积一致</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 默认没有任何的家具</span></span><br><span class="line">        self.item_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Python 能够自动的将一对括号内部的代码连接在一起</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;户型：%s\n总面积：%.2f[剩余：%.2f]\n家具：%s&quot;</span></span><br><span class="line">                % (self.house_type, self.area,</span><br><span class="line">                   self.free_area, self.item_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_item</span>(<span class="params">self, item</span>):</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;要添加 %s&quot;</span> % item)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建房子对象</span></span><br><span class="line">my_home = House(<span class="string">&quot;两室一厅&quot;</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">my_home.add_item(bed)</span><br><span class="line">my_home.add_item(chest)</span><br><span class="line">my_home.add_item(table)</span><br><span class="line"></span><br><span class="line">print(my_home)</span><br></pre></td></tr></table></div></figure><p><strong>小结</strong></p><ol><li><p>创建了一个 <strong>房子类</strong>，使用到 <code>__init__</code> 和 <code>__str__</code> 两个内置方法</p></li><li><p>准备了一个 <code>add_item</code> 方法 <strong>准备添加家具</strong></p></li><li><p>使用 <strong>房子类</strong> 创建了 <strong>一个房子对象</strong></p></li><li><p>让 <strong>房子对象</strong> 调用了三次 <code>add_item</code> 方法，将 <strong>三件家具</strong> 以实参传递到 <code>add_item</code> 内部</p></li></ol>        <h4 id="添加家具"   >          <a href="#添加家具" class="heading-link"><i class="fas fa-link"></i></a>添加家具</h4>      <p><strong>需求</strong></p><ul><li><p>1&gt; <strong>判断</strong> <strong>家具的面积</strong> 是否 <strong>超过剩余面积</strong>，<strong>如果超过</strong>，提示不能添加这件家具</p></li><li><p>2&gt; 将 <strong>家具的名称</strong> 追加到 <strong>家具名称列表</strong> 中</p></li><li><p>3&gt; 用 <strong>房子的剩余面积</strong> - <strong>家具面积</strong></p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_item</span>(<span class="params">self, item</span>):</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;要添加 %s&quot;</span> % item)</span><br><span class="line">    <span class="comment"># 1. 判断家具面积是否大于剩余面积</span></span><br><span class="line">    <span class="keyword">if</span> item.area &gt; self.free_area:</span><br><span class="line">        print(<span class="string">&quot;%s 的面积太大，不能添加到房子中&quot;</span> % item.name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 将家具的名称追加到名称列表中</span></span><br><span class="line">    self.item_list.append(item.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 计算剩余面积</span></span><br><span class="line">    self.free_area -= item.area</span><br></pre></td></tr></table></div></figure>        <h4 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a>小结</h4>      <ul><li><p>主程序只负责创建 <strong>房子</strong> 对象和 <strong>家具</strong> 对象</p></li><li><p>让 <strong>房子</strong> 对象调用 <code>add_item</code> 方法 <strong>将家具添加到房子</strong>中</p></li><li><p><strong>面积计算</strong>、<strong>剩余面积</strong>、<strong>家具列表</strong> 等处理都被 <strong>封装</strong> 到 <strong>房子类的内部</strong></p></li></ul>        <h2 id="面向对象封装案例-II"   >          <a href="#面向对象封装案例-II" class="heading-link"><i class="fas fa-link"></i></a>面向对象封装案例 II</h2>      <p><strong>封装</strong></p><ol><li><p><strong>封装</strong> 是面向对象编程的一大特点</p></li><li><p>面向对象编程的 <strong>第一步</strong> —— 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</p></li><li><p><strong>外界</strong> 使用 <strong>类</strong> 创建 <strong>对象</strong>，然后 <strong>让对象调用方法</strong></p></li><li><p><strong>对象方法的细节</strong> 都被 <strong>封装</strong> 在 <strong>类的内部</strong></p></li></ol><blockquote><p>一个对象的 <strong>属性</strong> 可以是 <strong>另外一个类创建的对象</strong></p></blockquote>        <h3 id="士兵突击"   >          <a href="#士兵突击" class="heading-link"><i class="fas fa-link"></i></a>士兵突击</h3>      <p><strong>需求</strong></p><ol><li><p><strong>士兵</strong> <strong>许三多</strong> 有一把 <strong>AK47</strong></p></li><li><p><strong>士兵</strong> 可以 <strong>开火</strong></p></li><li><p><strong>枪</strong> 能够 <strong>发射</strong> 子弹</p></li><li><p><strong>枪</strong> 装填 <strong>装填子弹</strong> —— <strong>增加子弹数量</strong></p></li></ol>        <h4 id="开发枪类"   >          <a href="#开发枪类" class="heading-link"><i class="fas fa-link"></i></a>开发枪类</h4>      <p><strong><code>shoot</code>**</strong> 方法需求**</p><ul><li><p>1&gt; 判断是否有子弹，没有子弹无法射击</p></li><li><p>2&gt; 使用 <code>print</code> 提示射击，并且输出子弹数量</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, model</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 枪的型号</span></span><br><span class="line">        self.model = model</span><br><span class="line">        <span class="comment"># 子弹数量</span></span><br><span class="line">        self.bullet_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_bullet</span>(<span class="params">self, count</span>):</span></span><br><span class="line"></span><br><span class="line">        self.bullet_count += count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shoot</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否还有子弹</span></span><br><span class="line">        <span class="keyword">if</span> self.bullet_count &lt;= <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;没有子弹了...&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发射一颗子弹</span></span><br><span class="line">        self.bullet_count -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        print(<span class="string">&quot;%s 发射子弹[%d]...&quot;</span> % (self.model, self.bullet_count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建枪对象</span></span><br><span class="line">ak47 = Gun(<span class="string">&quot;ak47&quot;</span>)</span><br><span class="line">ak47.add_bullet(<span class="number">50</span>)</span><br><span class="line">ak47.shoot()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="开发士兵类"   >          <a href="#开发士兵类" class="heading-link"><i class="fas fa-link"></i></a>开发士兵类</h4>      <blockquote><p>假设：每一个新兵 都 <strong>没有枪</strong></p></blockquote><p><strong>定义没有初始值的属性</strong></p><p>在定义属性时，如果 <strong>不知道设置什么初始值</strong>，可以设置为 <code>None</code></p><ul><li><p><code>None</code> <strong>关键字</strong> 表示 <strong>什么都没有</strong></p></li><li><p>表示一个 <strong>空对象</strong>，<strong>没有方法和属性，是一个特殊的常量</strong></p></li><li><p>可以将 <code>None</code> 赋值给任何一个变量</p></li></ul><p><strong><code>fire</code>**</strong> 方法需求**</p><ul><li><p>1&gt; 判断是否有枪，没有枪没法冲锋</p></li><li><p>2&gt; 喊一声口号</p></li><li><p>3&gt; 装填子弹</p></li><li><p>4&gt; 射击</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soldier</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 姓名</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 枪，士兵初始没有枪 None 关键字表示什么都没有</span></span><br><span class="line">        self.gun = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断士兵是否有枪</span></span><br><span class="line">        <span class="keyword">if</span> self.gun <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">&quot;[%s] 还没有枪...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 高喊口号</span></span><br><span class="line">        print(<span class="string">&quot;冲啊...[%s]&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 让枪装填子弹</span></span><br><span class="line">        self.gun.add_bullet(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 让枪发射子弹</span></span><br><span class="line">        self.gun.shoot()</span><br></pre></td></tr></table></div></figure><p><strong>小结</strong></p><ol><li><p>创建了一个 <strong>士兵类</strong>，使用到 <code>__init__</code> 内置方法</p></li><li><p>在定义属性时，如果 <strong>不知道设置什么初始值</strong>，可以设置为 <code>None</code></p></li><li><p>在 <strong>封装的</strong> 方法内部，还可以让 <strong>自己的</strong> <strong>使用其他类创建的对象属性</strong> 调用已经 <strong>封装好的方法</strong></p></li></ol>        <h3 id="身份运算符"   >          <a href="#身份运算符" class="heading-link"><i class="fas fa-link"></i></a>身份运算符</h3>      <p>身份运算符用于 <strong>比较</strong> 两个对象的 <strong>内存地址</strong> 是否一致 —— <strong>是否是对同一个对象的引用</strong></p><ul><li>在 <code>Python</code> 中针对 <code>None</code> 比较时，建议使用 <code>is</code> 判断</li></ul><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用同一个对象</td><td>x is y，类似 id(x) == id(y)</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用不同对象</td><td>x is not y，类似 id(a) != id(b)</td></tr></tbody></table></div>        <h3 id="is-与-区别："   >          <a href="#is-与-区别：" class="heading-link"><i class="fas fa-link"></i></a>is 与 == 区别：</h3>      <p><code>is</code> 用于判断 <strong>两个变量 引用对象是否为同一个</strong><br><code>==</code> 用于判断 <strong>引用变量的值</strong> 是否相等</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a </span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b == a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></div></figure>        <h2 id="私有属性和私有方法"   >          <a href="#私有属性和私有方法" class="heading-link"><i class="fas fa-link"></i></a>私有属性和私有方法</h2>              <h3 id="应用场景及定义方式"   >          <a href="#应用场景及定义方式" class="heading-link"><i class="fas fa-link"></i></a>应用场景及定义方式</h3>      <p><strong>应用场景</strong></p><ul><li><p>在实际开发中，<strong>对象</strong> 的 <strong>某些属性或方法</strong> 可能只希望 <strong>在对象的内部被使用</strong>，而 <strong>不希望在外部被访问到</strong></p></li><li><p><strong>私有属性</strong> 就是 <strong>对象</strong> 不希望公开的 <strong>属性</strong></p></li><li><p><strong>私有方法</strong> 就是 <strong>对象</strong> 不希望公开的 <strong>方法</strong></p></li></ul><p><strong>定义方式</strong></p><ul><li>在 <strong>定义属性或方法时</strong>，在 <strong>属性名或者方法名前</strong> 增加 <strong>两个下划线</strong>，定义的就是 <strong>私有</strong> 属性或方法</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line"></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 不要问女生的年龄</span></span><br><span class="line">        self.__age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__secret</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;我的年龄是 %d&quot;</span> % self.__age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaofang = Women(<span class="string">&quot;小芳&quot;</span>)</span><br><span class="line"><span class="comment"># 私有属性，外部不能直接访问</span></span><br><span class="line"><span class="comment"># print(xiaofang.__age)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line"><span class="comment"># xiaofang.__secret()</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="伪私有属性和私有方法（科普）"   >          <a href="#伪私有属性和私有方法（科普）" class="heading-link"><i class="fas fa-link"></i></a>伪私有属性和私有方法（科普）</h3>      <blockquote><p>提示：在日常开发中，<strong>不要使用这种方式</strong>，<strong>访问对象的 私有属性 或 私有方法</strong></p></blockquote><p><code>Python</code> 中，并没有 <strong>真正意义</strong> 的 <strong>私有</strong></p><ul><li><p>在给 <strong>属性</strong>、<strong>方法</strong> 命名时，实际是对 <strong>名称</strong> 做了一些特殊处理，使得外界无法访问到</p></li><li><p><strong>处理方式</strong>：在 <strong>名称</strong> 前面加上 <code>_类名</code> =&gt; <code>_类名__名称</code></p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 私有属性，外部不能直接访问到</span></span><br><span class="line">print(xiaofang._Women__age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line">xiaofang._Women__secret()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="单例"   >          <a href="#单例" class="heading-link"><i class="fas fa-link"></i></a>单例</h2>              <h3 id="单例设计模式"   >          <a href="#单例设计模式" class="heading-link"><i class="fas fa-link"></i></a>单例设计模式</h3>      <ul><li><p>设计模式</p><ul><li><p><strong>设计模式</strong> 是 <strong>前人工作的总结和提炼</strong>，通常，被人们广泛流传的设计模式都是针对 <strong>某一特定问题</strong> 的成熟的解决方案</p></li><li><p>使用 <strong>设计模式</strong> 是为了可重用代码、让代码更容易被他人理解、保证代码可靠性</p></li></ul></li><li><p>单例设计模式</p><ul><li><p><strong>目的</strong> —— 让 <strong>类</strong> 创建的对象，在系统中 <strong>只有</strong> <strong>唯一的一个实例</strong></p></li><li><p>每一次执行 <code>类名()</code> 返回的对象，<strong>内存地址是相同的</strong></p></li></ul></li></ul>        <h3 id="单例设计模式的应用场景"   >          <a href="#单例设计模式的应用场景" class="heading-link"><i class="fas fa-link"></i></a>单例设计模式的应用场景</h3>      <ul><li><p><strong>音乐播放</strong> 对象</p></li><li><p><strong>回收站</strong> 对象</p></li><li><p><strong>打印机</strong> 对象</p></li><li><p>……</p></li></ul>        <h3 id="new-方法"   >          <a href="#new-方法" class="heading-link"><i class="fas fa-link"></i></a>__new__ 方法</h3>      <ul><li><p>使用 <strong>类名()</strong> 创建对象时，<code>Python</code> 的解释器 <strong>首先</strong> 会 调用 <code>__new__</code> 方法为对象 <strong>分配空间</strong></p></li><li><p><code>__new__</code> 是一个 由 <code>object</code> 基类提供的 <strong>内置的静态方法</strong>，主要作用有两个：</p><ul><li><ol><li>在内存中为对象 <strong>分配空间</strong></li></ol></li><li><ol><li><strong>返回</strong> 对象的引用</li></ol></li></ul></li><li><p><code>Python</code> 的解释器获得对象的 <strong>引用</strong> 后，将引用作为 <strong>第一个参数</strong>，传递给 <code>__init__</code> 方法</p></li></ul><blockquote><p>重写 <code>__new__</code> 方法 的代码非常固定！</p></blockquote><ul><li><p>重写 <code>__new__</code> 方法 <strong>一定要</strong> <code>return super().__new__(cls)</code></p></li><li><p>否则 Python 的解释器 <strong>得不到</strong> 分配了空间的 <strong>对象引用</strong>，<strong>就不会调用对象的初始化方法</strong></p></li><li><p>注意：<code>__new__</code> 是一个静态方法，在调用时需要 <strong>主动传递</strong> <code>cls</code> 参数</p></li></ul><p><strong>示例代码</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 如果不返回任何结果，</span></span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;初始化音乐播放对象&quot;</span>)</span><br><span class="line"></span><br><span class="line">player = MusicPlayer()</span><br><span class="line"></span><br><span class="line">print(player)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="Python-中的单例"   >          <a href="#Python-中的单例" class="heading-link"><i class="fas fa-link"></i></a>Python 中的单例</h3>      <ul><li><p><strong>单例</strong> —— 让 <strong>类</strong> 创建的对象，在系统中 <strong>只有</strong> <strong>唯一的一个实例</strong></p><ol><li><p>定义一个 <strong>类属性</strong>，初始值是 <code>None</code>，用于记录 <strong>单例对象的引用</strong></p></li><li><p>重写 <code>__new__</code> 方法</p></li><li><p>如果 <strong>类属性</strong> <code>is None</code>，调用父类方法分配空间，并在类属性中记录结果</p></li><li><p>返回 <strong>类属性</strong> 中记录的 <strong>对象引用</strong></p></li></ol></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义类属性记录单例对象引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否已经被赋值</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 返回类属性的单例引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="只执行一次初始化工作"   >          <a href="#只执行一次初始化工作" class="heading-link"><i class="fas fa-link"></i></a>只执行一次初始化工作</h4>      <ul><li><p>在每次使用 <code>类名()</code> 创建对象时，<code>Python</code> 的解释器都会自动调用两个方法：</p><ul><li><p><code>__new__</code> 分配空间</p></li><li><p><code>__init__</code> 对象初始化</p></li></ul></li><li><p>在上一小节对 <code>__new__</code> 方法改造之后，每次都会得到 <strong>第一次被创建对象的引用</strong></p></li><li><p>但是：<strong>初始化方法还会被再次调用</strong></p></li></ul><p><strong>需求</strong></p><ul><li>让 <strong>初始化动作</strong> 只被 <strong>执行一次</strong></li></ul><p><strong>解决办法</strong></p><ol><li><p>定义一个类属性 <code>init_flag</code> 标记是否 <strong>执行过初始化动作</strong>，初始值为 <code>False</code></p></li><li><p>在 <code>__init__</code> 方法中，判断 <code>init_flag</code>，如果为 <code>False</code> 就执行初始化动作</p></li><li><p>然后将 <code>init_flag</code> 设置为 <code>True</code></p></li><li><p>这样，再次 <strong>自动</strong> 调用 <code>__init__</code> 方法时，<strong>初始化动作就不会被再次执行</strong> 了</p></li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录第一个被创建对象的引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 记录是否执行过初始化动作</span></span><br><span class="line">    init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否是空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 2. 调用父类的方法，为第一个对象分配空间</span></span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> MusicPlayer.init_flag:</span><br><span class="line">            print(<span class="string">&quot;初始化音乐播放器&quot;</span>)</span><br><span class="line"></span><br><span class="line">            MusicPlayer.init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个对象</span></span><br><span class="line">player1 = MusicPlayer()</span><br><span class="line">print(player1)</span><br><span class="line"></span><br><span class="line">player2 = MusicPlayer()</span><br><span class="line">print(player2)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="继承"   >          <a href="#继承" class="heading-link"><i class="fas fa-link"></i></a>继承</h2>      <p><strong>面向对象三大特性</strong></p><ol><li><p><strong>封装</strong> 根据 <strong>职责</strong> 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</p></li><li><p><strong>继承</strong> <strong>实现代码的重用</strong>，相同的代码不需要重复的编写</p></li><li><p><strong>多态</strong> 不同的对象调用相同的方法，产生不同的执行结果，<strong>增加代码的灵活度</strong></p></li></ol>        <h3 id="单继承"   >          <a href="#单继承" class="heading-link"><i class="fas fa-link"></i></a>单继承</h3>              <h4 id="继承的概念、语法和特点"   >          <a href="#继承的概念、语法和特点" class="heading-link"><i class="fas fa-link"></i></a>继承的概念、语法和特点</h4>      <p><strong>继承的概念</strong>：<strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法</strong> 和 <strong>属性</strong></p>        <h4 id="1-继承的语法"   >          <a href="#1-继承的语法" class="heading-link"><i class="fas fa-link"></i></a>1) 继承的语法</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params">父类名</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></div></figure><ul><li><p><strong>子类</strong> 继承自 <strong>父类</strong>，可以直接 <strong>享受</strong> 父类中已经封装好的方法，不需要再次开发</p></li><li><p><strong>子类</strong> 中应该根据 <strong>职责</strong>，封装 <strong>子类特有的</strong> <strong>属性和方法</strong></p></li></ul>        <h4 id="2-专业术语"   >          <a href="#2-专业术语" class="heading-link"><i class="fas fa-link"></i></a>2) 专业术语</h4>      <ul><li><p><code>Dog</code> 类是 <code>Animal</code> 类的<strong>子类</strong>，<code>Animal</code> 类是 <code>Dog</code> 类的<strong>父类</strong>，<code>Dog</code> 类从 <code>Animal</code> 类<strong>继承</strong></p></li><li><p><code>Dog</code> 类是 <code>Animal</code> 类的<strong>派生类</strong>，<code>Animal</code> 类是 <code>Dog</code> 类的<strong>基类</strong>，<code>Dog</code> 类从 <code>Animal</code> 类<strong>派生</strong></p></li></ul>        <h4 id="3-继承的传递性"   >          <a href="#3-继承的传递性" class="heading-link"><i class="fas fa-link"></i></a>3) 继承的传递性</h4>      <ul><li><p><code>C</code> 类从 <code>B</code> 类继承，<code>B</code> 类又从 <code>A</code> 类继承</p></li><li><p>那么 <code>C</code> 类就具有 <code>B</code> 类和 <code>A</code> 类的所有属性和方法</p></li></ul><p><strong>子类</strong> 拥有 <strong>父类</strong> 以及 <strong>父类的父类</strong> 中封装的所有 <strong>属性</strong> 和 <strong>方法</strong></p><p><strong>提问</strong></p><p><strong>哮天犬</strong> 能够调用 <code>Cat</code> 类中定义的 <code>catch</code> 方法吗？</p><p><strong>答案</strong></p><p><strong>不能</strong>，因为 <strong>哮天犬</strong> 和 <code>Cat</code> 之间没有 <strong>继承</strong> 关系</p>        <h3 id="方法的重写"   >          <a href="#方法的重写" class="heading-link"><i class="fas fa-link"></i></a>方法的重写</h3>      <ul><li><p><strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法</strong> 和 <strong>属性</strong></p></li><li><p><strong>子类</strong> 继承自 <strong>父类</strong>，可以直接 <strong>享受</strong> 父类中已经封装好的方法，不需要再次开发</p></li></ul><p><strong>应用场景</strong></p><ul><li>当 <strong>父类</strong> 的方法实现不能满足子类需求时，可以对方法进行 <strong>重写(override)</strong></li></ul><p><strong>重写</strong> 父类方法有两种情况：</p><ol><li><p><strong>覆盖</strong> 父类的方法</p></li><li><p>对父类方法进行 <strong>扩展</strong></p></li></ol>        <h4 id="1-覆盖父类的方法"   >          <a href="#1-覆盖父类的方法" class="heading-link"><i class="fas fa-link"></i></a>1) 覆盖父类的方法</h4>      <ul><li><p>如果在开发中，<strong>父类的方法实现</strong> 和 <strong>子类的方法实现</strong>，<strong>完全不同</strong></p></li><li><p>就可以使用 <strong>覆盖</strong> 的方式，<strong>在子类中</strong> <strong>重新编写</strong> 父类的方法实现</p></li></ul><blockquote><p>具体的实现方式，就相当于在 <strong>子类中</strong> 定义了一个 <strong>和父类同名的方法并且实现</strong></p></blockquote><p>重写之后，在运行时，<strong>只会调用</strong> 子类中重写的方法，而不再会调用 <strong>父类封装的方法</strong></p>        <h4 id="2-对父类方法进行-扩展"   >          <a href="#2-对父类方法进行-扩展" class="heading-link"><i class="fas fa-link"></i></a>2) 对父类方法进行 扩展</h4>      <ul><li><p>如果在开发中，<strong>子类的方法实现</strong> 中 <strong>包含</strong> <strong>父类的方法实现</strong></p><ul><li><strong>父类原本封装的方法实现</strong> 是 <strong>子类方法的一部分</strong></li></ul></li><li><p>就可以使用 <strong>扩展</strong> 的方式</p><ol><li><p><strong>在子类中</strong> <strong>重写</strong> 父类的方法</p></li><li><p>在需要的位置使用 <code>super().父类方法</code> 来调用父类方法的执行</p></li><li><p>代码其他的位置针对子类的需求，编写 <strong>子类特有的代码实现</strong></p></li></ol></li></ul>        <h4 id="关于-super"   >          <a href="#关于-super" class="heading-link"><i class="fas fa-link"></i></a>关于 super</h4>      <ul><li><p>在 <code>Python</code> 中 <code>super</code> 是一个 <strong>特殊的类</strong></p></li><li><p><code>super()</code> 就是使用 <code>super</code> 类创建出来的对象</p></li><li><p><strong>最常</strong> 使用的场景就是在 <strong>重写父类方法时</strong>，调用 <strong>在父类中封装的方法实现</strong></p></li></ul>        <h4 id="调用父类方法的另外一种方式（知道）"   >          <a href="#调用父类方法的另外一种方式（知道）" class="heading-link"><i class="fas fa-link"></i></a>调用父类方法的另外一种方式（知道）</h4>      <blockquote><p>在 <code>Python 2.x</code> 时，如果需要调用父类的方法，还可以使用以下方式：</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类名.方法(self)</span><br></pre></td></tr></table></div></figure><ul><li><p>这种方式，目前在 <code>Python 3.x</code> 还支持这种方式</p></li><li><p>这种方法 <strong>不推荐使用</strong>，因为一旦 <strong>父类发生变化</strong>，方法调用位置的 <strong>类名</strong> 同样需要修改</p></li></ul><p><strong>提示</strong></p><ul><li><p>在开发时，<code>父类名</code> 和 <code>super()</code> 两种方式不要混用</p></li><li><p>如果使用 <strong>当前子类名</strong> 调用方法，会形成递归调用，<strong>出现死循环</strong></p></li></ul>        <h3 id="父类的-私有属性-和-私有方法"   >          <a href="#父类的-私有属性-和-私有方法" class="heading-link"><i class="fas fa-link"></i></a>父类的 私有属性 和 私有方法</h3>      <ol><li><p><strong>子类对象</strong> <strong>不能</strong> 在自己的方法内部，<strong>直接</strong> 访问 父类的 <strong>私有属性</strong> 或 <strong>私有方法</strong></p></li><li><p><strong>子类对象</strong> 可以通过 <strong>父类</strong> 的 <strong>公有方法</strong> <strong>间接</strong> 访问到 <strong>私有属性</strong> 或 <strong>私有方法</strong></p></li></ol><blockquote></blockquote><ul><li><p><strong>私有属性、方法</strong> 是对象的隐私，不对外公开，<strong>外界</strong> 以及 <strong>子类</strong> 都不能直接访问</p></li><li><p><strong>私有属性、方法</strong> 通常用于做一些内部的事情</p></li></ul><p><strong>示例</strong></p><ul><li><p><code>B</code> 的对象不能直接访问 <code>__num2</code> 属性</p></li><li><p><code>B</code> 的对象不能在 <code>demo</code> 方法内访问 <code>__num2</code> 属性</p></li><li><p><code>B</code> 的对象可以在 <code>demo</code> 方法内，调用父类的 <code>test</code> 方法</p></li><li><p>父类的 <code>test</code> 方法内部，能够访问 <code>__num2</code> 属性和 <code>__test</code> 方法</p></li></ul>        <h3 id="多继承"   >          <a href="#多继承" class="heading-link"><i class="fas fa-link"></i></a>多继承</h3>      <p><strong>概念</strong></p><ul><li><p><strong>子类</strong> 可以拥有 <strong>多个父类</strong>，并且具有 <strong>所有父类</strong> 的 <strong>属性</strong> 和 <strong>方法</strong></p></li><li><p>例如：<strong>孩子</strong> 会继承自己 <strong>父亲</strong> 和 <strong>母亲</strong> 的 <strong>特性</strong></p></li></ul><p><strong>语法</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名(<span class="params">父类名<span class="number">1</span>, 父类名<span class="number">2.</span>..</span>)</span></span><br><span class="line"><span class="class">    <span class="title">pass</span></span></span><br></pre></td></tr></table></div></figure>        <h3 id="多继承的使用注意事项"   >          <a href="#多继承的使用注意事项" class="heading-link"><i class="fas fa-link"></i></a>多继承的使用注意事项</h3>      <p><strong>问题的提出</strong></p><ul><li>如果 <strong>不同的父类</strong> 中存在 <strong>同名的方法</strong>，<strong>子类对象</strong> 在调用方法时，会调用 <strong>哪一个父类中</strong>的方法呢？</li></ul><blockquote><p>提示：<strong>开发时，应该尽量避免这种容易产生混淆的情况！</strong> —— 如果 <strong>父类之间</strong> 存在 <strong>同名的属性或者方法</strong>，应该 <strong>尽量避免</strong> 使用多继承</p></blockquote>        <h4 id="Python-中的-MRO-——-方法搜索顺序（知道）"   >          <a href="#Python-中的-MRO-——-方法搜索顺序（知道）" class="heading-link"><i class="fas fa-link"></i></a>Python 中的 MRO —— 方法搜索顺序（知道）</h4>      <ul><li><p><code>Python</code> 中针对 <strong>类</strong> 提供了一个 <strong>内置属性</strong> <code>__mro__</code> 可以查看 <strong>方法</strong> 搜索顺序</p></li><li><p>MRO 是 <code>method resolution order</code>，主要用于 <strong>在多继承时判断 方法、属性 的调用 路径</strong></p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(C.__mro__)</span><br></pre></td></tr></table></div></figure><p><strong>输出结果</strong></p><figure class="highlight text"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br></pre></td></tr></table></div></figure><ul><li><p>在搜索方法时，是按照 <code>__mro__</code> 的输出结果 <strong>从左至右</strong> 的顺序查找的</p></li><li><p>如果在当前类中 <strong>找到方法，就直接执行，不再搜索</strong></p></li><li><p>如果 <strong>没有找到，就查找下一个类</strong> 中是否有对应的方法，<strong>如果找到，就直接执行，不再搜索</strong></p></li><li><p>如果找到最后一个类，还没有找到方法，程序报错</p></li></ul>        <h3 id="新式类与旧式（经典）类"   >          <a href="#新式类与旧式（经典）类" class="heading-link"><i class="fas fa-link"></i></a>新式类与旧式（经典）类</h3>      <blockquote><p><code>object</code> 是 <code>Python</code> 为所有对象提供的 <strong>基类</strong>，提供有一些内置的属性和方法，可以使用 <code>dir</code> 函数查看</p></blockquote><ul><li><p><strong>新式类</strong>：以 <code>object</code> 为基类的类，<strong>推荐使用</strong></p></li><li><p><strong>经典类</strong>：不以 <code>object</code> 为基类的类，<strong>不推荐使用</strong></p></li><li><p>在 <code>Python 3.x</code> 中定义类时，如果没有指定父类，会 <strong>默认使用</strong> <code>object</code> 作为该类的 <strong>基类</strong> —— <code>Python 3.x</code> 中定义的类都是 <strong>新式类</strong></p></li><li><p>在 <code>Python 2.x</code> 中定义类时，如果没有指定父类，则不会以 <code>object</code> 作为 <strong>基类</strong></p></li></ul><blockquote><p><strong>新式类</strong> 和 <strong>经典类</strong> 在多继承时 —— <strong>会影响到方法的搜索顺序</strong></p></blockquote><p>为了保证编写的代码能够同时在 <code>Python 2.x</code> 和 <code>Python 3.x</code> 运行！<br>今后在定义类时，<strong>如果没有父类，建议统一继承自 **</strong><code>object</code>**</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params">object</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></div></figure>        <h2 id="多态"   >          <a href="#多态" class="heading-link"><i class="fas fa-link"></i></a>多态</h2>      <ul><li>多态</li></ul><p><strong>面向对象三大特性</strong></p><ol><li><p><strong>封装</strong> 根据 <strong>职责</strong> 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</p><ul><li>定义类的准则</li></ul></li><li><p><strong>继承</strong> <strong>实现代码的重用</strong>，相同的代码不需要重复的编写</p><ul><li><p>设计类的技巧</p></li><li><p>子类针对自己特有的需求，编写特定的代码</p></li></ul></li><li><p><strong>多态</strong> 不同的 <strong>子类对象</strong> 调用相同的 <strong>父类方法</strong>，产生不同的执行结果</p></li></ol><ul><li><p><strong>多态</strong> 可以 <strong>增加代码的灵活度</strong></p></li><li><p>以 <strong>继承</strong> 和 <strong>重写父类方法</strong> 为前提</p></li><li><p>是调用方法的技巧，<strong>不会影响到类的内部设计</strong></p></li></ul>        <h3 id="多态案例演练"   >          <a href="#多态案例演练" class="heading-link"><i class="fas fa-link"></i></a>多态案例演练</h3>      <p><strong>需求</strong></p><ol><li><p>在 <code>Dog</code> 类中封装方法 <code>game</code></p><ul><li>普通狗只是简单的玩耍</li></ul></li><li><p>定义 <code>XiaoTianDog</code> 继承自 <code>Dog</code>，并且重写 <code>game</code> 方法</p><ul><li>哮天犬需要在天上玩耍</li></ul></li><li><p>定义 <code>Person</code> 类，并且封装一个 <strong>和狗玩</strong> 的方法</p><ul><li>在方法内部，直接让 <strong>狗对象</strong> 调用 <code>game</code> 方法</li></ul></li></ol><p><strong>案例小结</strong></p><ul><li><p><code>Person</code> 类中只需要让 <strong>狗对象</strong> 调用 <code>game</code> 方法，而不关心具体是 <strong>什么狗</strong></p><ul><li><code>game</code> 方法是在 <code>Dog</code> 父类中定义的</li></ul></li><li><p>在程序执行时，传入不同的 <strong>狗对象</strong> 实参，就会产生不同的执行效果</p></li></ul><blockquote><p><strong>多态</strong> 更容易编写出出通用的代码，做出通用的编程，以适应需求的不断变化！</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;%s 蹦蹦跳跳的玩耍...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoTianDog</span>(<span class="params">Dog</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;%s 飞到天上去玩耍...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_with_dog</span>(<span class="params">self, dog</span>):</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s 和 %s 快乐的玩耍...&quot;</span> % (self.name, dog.name))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让狗玩耍</span></span><br><span class="line">        dog.game()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建一个狗对象</span></span><br><span class="line"><span class="comment"># wangcai = Dog(&quot;旺财&quot;)</span></span><br><span class="line">wangcai = XiaoTianDog(<span class="string">&quot;飞天旺财&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个小明对象</span></span><br><span class="line">xiaoming = Person(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 让小明调用和狗玩的方法</span></span><br><span class="line">xiaoming.game_with_dog(wangcai)</span><br><span class="line">        </span><br></pre></td></tr></table></div></figure>        <h2 id="类属性和类方法"   >          <a href="#类属性和类方法" class="heading-link"><i class="fas fa-link"></i></a>类属性和类方法</h2>              <h3 id="类的结构"   >          <a href="#类的结构" class="heading-link"><i class="fas fa-link"></i></a>类的结构</h3>              <h3 id="术语-——-实例"   >          <a href="#术语-——-实例" class="heading-link"><i class="fas fa-link"></i></a>术语 —— 实例</h3>      <ol><li><p>使用面相对象开发，<strong>第 1 步</strong> 是设计 <strong>类</strong></p></li><li><p>使用 <strong>类名()</strong> 创建对象，<strong>创建对象</strong> 的动作有两步：</p><ul><li><ol><li>在内存中为对象 <strong>分配空间</strong></li></ol></li><li><ol><li>调用初始化方法 <code>__init__</code> 为 <strong>对象初始化</strong></li></ol></li></ul></li><li><p>对象创建后，<strong>内存</strong> 中就有了一个对象的 <strong>实实在在</strong> 的存在 —— <strong>实例</strong></p></li></ol><p>因此，通常也会把：</p><ol><li><p>创建出来的 <strong>对象</strong> 叫做 <strong>类</strong> 的 <strong>实例</strong></p></li><li><p>创建对象的 <strong>动作</strong> 叫做 <strong>实例化</strong></p></li><li><p><strong>对象的属性</strong> 叫做 <strong>实例属性</strong></p></li><li><p><strong>对象调用的方法</strong> 叫做 <strong>实例方法</strong></p></li></ol><p>在程序执行时：</p><ol><li><p>对象各自拥有自己的 <strong>实例属性</strong></p></li><li><p>调用对象方法，可以通过 <code>self.</code></p><ul><li><p>访问自己的属性</p></li><li><p>调用自己的方法</p></li></ul></li></ol><p><strong>结论</strong></p><ul><li><p><strong>每一个对象</strong> 都有自己 <strong>独立的内存空间</strong>，<strong>保存各自不同的属性</strong></p></li><li><p><strong>多个对象的方法</strong>，<strong>在内存中只有一份</strong>，在调用方法时，<strong>需要把对象的引用</strong> 传递到方法内部</p></li></ul>        <h3 id="类是一个特殊的对象"   >          <a href="#类是一个特殊的对象" class="heading-link"><i class="fas fa-link"></i></a>类是一个特殊的对象</h3>      <blockquote><p><code>Python</code> 中 <strong>一切皆对象</strong>：</p></blockquote><ul><li><p><code>class AAA:</code> 定义的类属于 <strong>类对象</strong></p></li><li><p><code>obj1 = AAA()</code> 属于 <strong>实例对象</strong></p></li><li><p>在程序运行时，<strong>类</strong> 同样 <strong>会被加载到内存</strong></p></li><li><p>在 <code>Python</code> 中，<strong>类</strong> 是一个特殊的对象 —— <strong>类对象</strong></p></li><li><p>在程序运行时，<strong>类对象</strong> 在内存中 <strong>只有一份</strong>，使用 <strong>一个类</strong> 可以创建出 <strong>很多个对象实例</strong></p></li><li><p>除了封装 <strong>实例</strong> 的 <strong>属性</strong> 和 <strong>方法</strong>外，<strong>类对象</strong> 还可以拥有自己的 <strong>属性</strong> 和 <strong>方法</strong></p><ol><li><p><strong>类属性</strong></p></li><li><p><strong>类方法</strong></p></li></ol></li><li><p>通过 <strong>类名.</strong> 的方式可以 <strong>访问类的属性</strong> 或者 <strong>调用类的方法</strong></p></li></ul>        <h3 id="类属性和实例属性"   >          <a href="#类属性和实例属性" class="heading-link"><i class="fas fa-link"></i></a>类属性和实例属性</h3>              <h3 id="概念和使用"   >          <a href="#概念和使用" class="heading-link"><i class="fas fa-link"></i></a>概念和使用</h3>      <ul><li><p><strong>类属性</strong> 就是给 <strong>类对象</strong> 中定义的 <strong>属性</strong></p></li><li><p>通常用来记录 <strong>与这个类相关</strong> 的特征</p></li><li><p><strong>类属性</strong> <strong>不会用于</strong>记录 <strong>具体对象的特征</strong></p></li></ul><p><strong>示例需求</strong></p><ul><li><p>定义一个 <strong>工具类</strong></p></li><li><p>每件工具都有自己的 <code>name</code></p></li><li><p><strong>需求</strong> —— 知道使用这个类，创建了多少个工具对象？</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 针对类属性做一个计数+1</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工具对象</span></span><br><span class="line">tool1 = Tool(<span class="string">&quot;斧头&quot;</span>)</span><br><span class="line">tool2 = Tool(<span class="string">&quot;榔头&quot;</span>)</span><br><span class="line">tool3 = Tool(<span class="string">&quot;铁锹&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 知道使用 Tool 类到底创建了多少个对象?</span></span><br><span class="line">print(<span class="string">&quot;现在创建了 %d 个工具&quot;</span> % Tool.count)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="属性的获取机制（科普）"   >          <a href="#属性的获取机制（科普）" class="heading-link"><i class="fas fa-link"></i></a>属性的获取机制（科普）</h3>      <ul><li>在 <code>Python</code> 中 <strong>属性的获取</strong> 存在一个 <strong>向上查找机制</strong></li></ul><ul><li><p>因此，要访问类属性有两种方式：</p><ol><li><p><strong>类名.类属性</strong></p></li><li><p><strong>对象.类属性</strong> （不推荐）</p></li></ol></li></ul><p><strong>注意</strong></p><ul><li>如果使用 <code>对象.类属性 = 值</code> 赋值语句，只会 <strong>给对象添加一个属性</strong>，而不会影响到 <strong>类属性的值</strong></li></ul>        <h3 id="类方法和静态方法"   >          <a href="#类方法和静态方法" class="heading-link"><i class="fas fa-link"></i></a>类方法和静态方法</h3>              <h3 id="类方法"   >          <a href="#类方法" class="heading-link"><i class="fas fa-link"></i></a>类方法</h3>      <ul><li><p><strong>类属性</strong> 就是针对 <strong>类对象</strong> 定义的属性</p><ul><li><p>使用 <strong>赋值语句</strong> 在 <code>class</code> 关键字下方可以定义 <strong>类属性</strong></p></li><li><p><strong>类属性</strong> 用于记录 <strong>与这个类相关</strong> 的特征</p></li></ul></li><li><p><strong>类方法</strong> 就是针对 <strong>类对象</strong> 定义的方法</p><ul><li>在 <strong>类方法</strong> 内部可以直接访问 <strong>类属性</strong> 或者调用其他的 <strong>类方法</strong></li></ul></li></ul><p><strong>语法如下</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 类方法名(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></div></figure><ul><li><p>类方法需要用 <strong>修饰器</strong> <code>@classmethod</code> 来标识，<strong>告诉解释器这是一个类方法</strong></p></li><li><p>类方法的 <strong>第一个参数</strong> 应该是 <code>cls</code></p><ul><li><p>由 <strong>哪一个类</strong> 调用的方法，方法内的 <code>cls</code> 就是 <strong>哪一个类的引用</strong></p></li><li><p>这个参数和 <strong>实例方法</strong> 的第一个参数是 <code>self</code> 类似</p></li><li><p><strong>提示</strong> 使用其他名称也可以，不过习惯使用 <code>cls</code></p></li></ul></li></ul><ol><li><p>通过 <strong>类名.</strong> 调用 <strong>类方法</strong>，<strong>调用方法时</strong>，不需要传递 <code>cls</code> 参数</p></li><li><p><strong>在方法内部</strong></p><ul><li><p>可以通过 <code>cls.</code> <strong>访问类的属性</strong></p></li><li><p>也可以通过 <code>cls.</code> <strong>调用其他的类方法</strong></p></li></ul></li></ol><p><strong>示例需求</strong></p><ul><li><p>定义一个 <strong>工具类</strong></p></li><li><p>每件工具都有自己的 <code>name</code></p></li><li><p><strong>需求</strong> —— 在 <strong>类</strong> 封装一个 <code>show_tool_count</code> 的类方法，输出使用当前这个类，创建的对象个数</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_tool_count</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示工具对象的总数&quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;工具对象的总数 %d&quot;</span> % cls.count)</span><br></pre></td></tr></table></div></figure><blockquote><p>在类方法内部，可以直接使用 <code>cls</code> 访问 <strong>类属性</strong> 或者 <strong>调用类方法</strong></p></blockquote>        <h3 id="静态方法"   >          <a href="#静态方法" class="heading-link"><i class="fas fa-link"></i></a>静态方法</h3>      <ul><li><p>在开发时，如果需要在 <strong>类</strong> 中封装一个方法，这个方法：</p><ul><li><p>既 <strong>不需要</strong> 访问 <strong>实例属性</strong> 或者调用 <strong>实例方法</strong></p></li><li><p>也 <strong>不需要</strong> 访问 <strong>类属性</strong> 或者调用 <strong>类方法</strong></p></li></ul></li><li><p>这个时候，可以把这个方法封装成一个 <strong>静态方法</strong></p></li></ul><p><strong>语法如下</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 静态方法名():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></div></figure><ul><li><p><strong>静态方法</strong> 需要用 <strong>修饰器</strong> <code>@staticmethod</code> 来标识，<strong>告诉解释器这是一个静态方法</strong></p></li><li><p>通过 <strong>类名.</strong> 调用 <strong>静态方法</strong></p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">object</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 狗对象计数</span></span><br><span class="line">    dog_count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 不需要访问实例属性也不需要访问类属性的方法</span></span><br><span class="line">        print(<span class="string">&quot;狗在跑...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        </span><br></pre></td></tr></table></div></figure>        <h3 id="方法综合案例"   >          <a href="#方法综合案例" class="heading-link"><i class="fas fa-link"></i></a>方法综合案例</h3>      <p><strong>需求</strong></p><ol><li><p>设计一个 <code>Game</code> 类</p></li><li><p>属性：</p><ul><li><p>定义一个 <strong>类属性</strong> <code>top_score</code> 记录游戏的 <strong>历史最高分</strong></p></li><li><p>定义一个 <strong>实例属性</strong> <code>player_name</code> 记录 <strong>当前游戏的玩家姓名</strong></p></li></ul></li><li><p>方法：</p><ul><li><p><strong>静态方法</strong> <code>show_help</code> 显示游戏帮助信息</p></li><li><p><strong>类方法</strong> <code>show_top_score</code> 显示历史最高分</p></li><li><p><strong>实例方法</strong> <code>start_game</code> 开始当前玩家的游戏</p></li></ul></li><li><p>主程序步骤</p><ul><li><ol><li>查看帮助信息</li></ol></li><li><ol><li>查看历史最高分</li></ol></li><li><ol><li>创建游戏对象，开始游戏</li></ol></li></ul></li></ol>        <h4 id="案例小结"   >          <a href="#案例小结" class="heading-link"><i class="fas fa-link"></i></a>案例小结</h4>      <ol><li><p><strong>实例方法</strong> —— 方法内部需要访问 <strong>实例属性</strong></p><ul><li><strong>实例方法</strong> 内部可以使用 <strong>类名.</strong> 访问类属性</li></ul></li><li><p><strong>类方法</strong> —— 方法内部 <strong>只</strong> 需要访问 <strong>类属性</strong></p></li><li><p><strong>静态方法</strong> —— 方法内部，不需要访问 <strong>实例属性</strong> 和 <strong>类属性</strong></p></li></ol><p><strong>提问</strong></p><p>如果方法内部 即需要访问 <strong>实例属性</strong>，又需要访问 <strong>类属性</strong>，应该定义成什么方法？</p><p><strong>答案</strong></p><ul><li><p>应该定义 <strong>实例方法</strong></p></li><li><p>因为，<strong>类只有一个</strong>，在 <strong>实例方法</strong> 内部可以使用 <strong>类名.</strong> 访问类属性</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏最高分，类属性</span></span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_help</span>():</span></span><br><span class="line">        print(<span class="string">&quot;帮助信息：让僵尸走进房间&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_top_score</span>(<span class="params">cls</span>):</span></span><br><span class="line">        print(<span class="string">&quot;游戏最高分是 %d&quot;</span> % cls.top_score)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, player_name</span>):</span></span><br><span class="line">        self.player_name = player_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_game</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;[%s] 开始游戏...&quot;</span> % self.player_name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用类名.修改历史最高分</span></span><br><span class="line">        Game.top_score = <span class="number">999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 查看游戏帮助</span></span><br><span class="line">Game.show_help()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建游戏对象，开始游戏</span></span><br><span class="line">game = Game(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"></span><br><span class="line">game.start_game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 游戏结束，查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="模块和包"   >          <a href="#模块和包" class="heading-link"><i class="fas fa-link"></i></a>模块和包</h2>              <h3 id="模块"   >          <a href="#模块" class="heading-link"><i class="fas fa-link"></i></a>模块</h3>              <h3 id="模块的概念"   >          <a href="#模块的概念" class="heading-link"><i class="fas fa-link"></i></a>模块的概念</h3>      <blockquote><p><strong>模块是 Python 程序架构的一个核心概念</strong></p></blockquote><ul><li><p>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></p></li><li><p><strong>模块名</strong> 同样也是一个 <strong>标识符</strong>，需要符合标识符的命名规则</p></li><li><p>在模块中定义的 <strong>全局变量</strong> 、<strong>函数</strong>、<strong>类</strong> 都是提供给外界直接使用的 <strong>工具</strong></p></li><li><p><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要先 <strong>导入</strong> 这个模块</p></li></ul>        <h3 id="模块的两种导入方式"   >          <a href="#模块的两种导入方式" class="heading-link"><i class="fas fa-link"></i></a>模块的两种导入方式</h3>              <h4 id="1）import-导入"   >          <a href="#1）import-导入" class="heading-link"><i class="fas fa-link"></i></a>1）import 导入</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span>, 模块名<span class="number">2</span> </span><br></pre></td></tr></table></div></figure><blockquote><p>提示：在导入模块时，每个导入应该独占一行</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span></span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">2</span> </span><br></pre></td></tr></table></div></figure><ul><li><p><strong>导入之后</strong></p><ul><li>通过 <code>模块名.</code> 使用 <strong>模块提供的工具</strong> —— <strong>全局变量</strong>、<strong>函数</strong>、<strong>类</strong></li></ul></li></ul>        <h4 id="使用-as-指定模块的别名"   >          <a href="#使用-as-指定模块的别名" class="heading-link"><i class="fas fa-link"></i></a>使用 as 指定模块的别名</h4>      <blockquote><p><strong>如果模块的名字太长</strong>，可以使用 <code>as</code> 指定模块的名称，以方便在代码中的使用</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span> <span class="keyword">as</span> 模块别名</span><br></pre></td></tr></table></div></figure><blockquote><p>注意：<strong>模块别名</strong> 应该符合 <strong>大驼峰命名法</strong></p></blockquote>        <h4 id="2）from…import-导入"   >          <a href="#2）from…import-导入" class="heading-link"><i class="fas fa-link"></i></a>2）from…import 导入</h4>      <ul><li><p>如果希望 <strong>从某一个模块</strong> 中，导入 <strong>部分</strong> 工具，就可以使用 <code>from ... import</code> 的方式</p></li><li><p><code>import 模块名</code> 是 <strong>一次性</strong> 把模块中 <strong>所有工具全部导入</strong>，并且通过 <strong>模块名/别名</strong> 访问</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 模块 导入 某一个工具</span></span><br><span class="line"><span class="keyword">from</span> 模块名<span class="number">1</span> <span class="keyword">import</span> 工具名</span><br></pre></td></tr></table></div></figure><ul><li><p>导入之后</p><ul><li><p><strong>不需要</strong> 通过 <code>模块名.</code></p></li><li><p>可以直接使用 <strong>模块提供的工具</strong> —— <strong>全局变量</strong>、<strong>函数</strong>、<strong>类</strong></p></li></ul></li></ul><p><strong>注意</strong></p><blockquote><p>如果 <strong>两个模块</strong>，存在 <strong>同名的函数</strong>，那么 <strong>后导入模块的函数</strong>，会 <strong>覆盖掉先导入的函数</strong></p></blockquote><ul><li><p>开发时 <code>import</code> 代码应该统一写在 <strong>代码的顶部</strong>，更容易及时发现冲突</p></li><li><p>一旦发现冲突，可以使用 <code>as</code> 关键字 <strong>给其中一个工具起一个别名</strong></p></li></ul>        <h4 id="from…import-（知道）"   >          <a href="#from…import-（知道）" class="heading-link"><i class="fas fa-link"></i></a>from…import *（知道）</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 模块 导入 所有工具</span></span><br><span class="line"><span class="keyword">from</span> 模块名<span class="number">1</span> <span class="keyword">import</span> *</span><br></pre></td></tr></table></div></figure><p><strong>注意</strong></p><blockquote><p>这种方式不推荐使用，因为函数重名并没有任何的提示，出现问题不好排查</p></blockquote>        <h3 id="模块的搜索顺序-扩展"   >          <a href="#模块的搜索顺序-扩展" class="heading-link"><i class="fas fa-link"></i></a>模块的搜索顺序[扩展]</h3>      <p><code>Python</code> 的解释器在 <strong>导入模块</strong> 时，会：</p><ol><li><p>搜索 <strong>当前目录</strong> 指定模块名的文件，<strong>如果有就直接导入</strong></p></li><li><p>如果没有，再搜索 <strong>系统目录</strong></p></li></ol><blockquote><p>在开发时，给文件起名，不要和 <strong>系统的模块文件</strong> <strong>重名</strong></p></blockquote><p><code>Python</code> 中每一个模块都有一个内置属性 <code>__file__</code> 可以 <strong>查看模块</strong> 的 <strong>完整路径</strong></p><p><strong>示例</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个 0～10 的数字</span></span><br><span class="line">rand = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(rand)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><blockquote><p>注意：如果当前目录下，存在一个 <code>random.py</code> 的文件，程序就无法正常执行了！</p></blockquote><ul><li>这个时候，<code>Python</code> 的解释器会 <strong>加载当前目录</strong> 下的 <code>random.py</code> 而不会加载 <strong>系统的</strong> <code>random</code> 模块</li></ul>        <h3 id="原则-——-每一个文件都应该是可以被导入的"   >          <a href="#原则-——-每一个文件都应该是可以被导入的" class="heading-link"><i class="fas fa-link"></i></a>原则 —— 每一个文件都应该是可以被导入的</h3>      <ul><li><p>一个 <strong>独立的 **</strong><code>Python</code><strong>** 文件</strong> 就是一个 <strong>模块</strong></p></li><li><p>在导入文件时，文件中 <strong>所有没有任何缩进的代码</strong> 都会被执行一遍！</p></li></ul><p><strong>实际开发场景</strong></p><ul><li><p>在实际开发中，每一个模块都是独立开发的，大多都有专人负责</p></li><li><p><strong>开发人员</strong> 通常会在 <strong>模块下方</strong> <strong>增加一些测试代码</strong></p><ul><li>仅在模块内使用，而被导入到其他文件中不需要执行</li></ul></li></ul>        <h4 id="name-属性"   >          <a href="#name-属性" class="heading-link"><i class="fas fa-link"></i></a>__name__ 属性</h4>      <blockquote></blockquote><ul><li><p><code>__name__</code> 属性可以做到，测试模块的代码 <strong>只在测试情况下被运行</strong>，而在 <strong>被导入时不会被执行</strong>！</p></li><li><p><code>__name__</code> 是 <code>Python</code> 的一个内置属性，记录着一个 <strong>字符串</strong></p></li><li><p>如果 <strong>是被其他文件导入的</strong>，<code>__name__</code> 就是 <strong>模块名</strong></p></li><li><p>如果 <strong>是当前执行的程序</strong> <code>__name__</code> 是 <strong><code>__main__</code></strong></p></li></ul><p><strong>在很多 **</strong><code>Python</code><strong>** 文件中都会看到以下格式的代码</strong>：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在代码的最下方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 __name__ 判断是否执行下方代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="包（Package）"   >          <a href="#包（Package）" class="heading-link"><i class="fas fa-link"></i></a>包（Package）</h3>              <h3 id="概念"   >          <a href="#概念" class="heading-link"><i class="fas fa-link"></i></a>概念</h3>      <ul><li><p><strong>包</strong> 是一个 <strong>包含多个模块</strong> 的 <strong>特殊目录</strong></p></li><li><p>目录下有一个 <strong>特殊的文件</strong> <code>__init__.py</code></p></li><li><p>包名的 <strong>命名方式</strong> 和变量名一致，<strong>小写字母</strong> + <code>_</code></p></li></ul><p><strong>好处</strong></p><ul><li>使用 <code>import 包名</code> 可以一次性导入 <strong>包</strong> 中 <strong>所有的模块</strong></li></ul>        <h3 id="案例演练"   >          <a href="#案例演练" class="heading-link"><i class="fas fa-link"></i></a>案例演练</h3>      <ol><li><p>新建一个 <code>hm_message</code> 的 <strong>包</strong></p></li><li><p>在目录下，新建两个文件 <code>send_message</code> 和 <code>receive_message</code></p></li><li><p>在 <code>send_message</code> 文件中定义一个 <code>send</code> 函数</p></li><li><p>在 <code>receive_message</code> 文件中定义一个 <code>receive</code> 函数</p></li><li><p>在外部直接导入 <code>hm_message</code> 的包</p></li></ol>        <h3 id="init-py"   >          <a href="#init-py" class="heading-link"><i class="fas fa-link"></i></a>__init__.py</h3>      <ul><li>要在外界使用 <strong>包</strong> 中的模块，需要在 <code>__init__.py</code> 中指定 <strong>对外界提供的模块列表</strong></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 当前目录 导入 模块列表</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> receive_message</span><br></pre></td></tr></table></div></figure>        <h3 id="发布模块（知道）"   >          <a href="#发布模块（知道）" class="heading-link"><i class="fas fa-link"></i></a>发布模块（知道）</h3>      <ul><li>如果希望自己开发的模块，<strong>分享</strong> 给其他人，可以按照以下步骤操作</li></ul>        <h3 id="制作发布压缩包步骤"   >          <a href="#制作发布压缩包步骤" class="heading-link"><i class="fas fa-link"></i></a>制作发布压缩包步骤</h3>              <h4 id="1-创建-setup-py"   >          <a href="#1-创建-setup-py" class="heading-link"><i class="fas fa-link"></i></a>1) 创建 setup.py</h4>      <ul><li><code>setup.py</code> 的文件</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">&quot;hm_message&quot;</span>,  <span class="comment"># 包名</span></span><br><span class="line">      version=<span class="string">&quot;1.0&quot;</span>,  <span class="comment"># 版本</span></span><br><span class="line">      description=<span class="string">&quot;itheima&#x27;s 发送和接收消息模块&quot;</span>,  <span class="comment"># 描述信息</span></span><br><span class="line">      long_description=<span class="string">&quot;完整的发送和接收消息模块&quot;</span>,  <span class="comment"># 完整描述信息</span></span><br><span class="line">      author=<span class="string">&quot;itheima&quot;</span>,  <span class="comment"># 作者</span></span><br><span class="line">      author_email=<span class="string">&quot;itheima@itheima.com&quot;</span>,  <span class="comment"># 作者邮箱</span></span><br><span class="line">      url=<span class="string">&quot;www.itheima.com&quot;</span>,  <span class="comment"># 主页</span></span><br><span class="line">      py_modules=[<span class="string">&quot;hm_message.send_message&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;hm_message.receive_message&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>有关字典参数的详细信息，可以参阅官方网站：</p><p><span class="exturl"><a class="exturl__link"   href="https://docs.python.org/2/distutils/apiref.html" >https://docs.python.org/2/distutils/apiref.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="2-构建模块"   >          <a href="#2-构建模块" class="heading-link"><i class="fas fa-link"></i></a>2) 构建模块</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 setup.py build</span><br></pre></td></tr></table></div></figure>        <h4 id="3-生成发布压缩包"   >          <a href="#3-生成发布压缩包" class="heading-link"><i class="fas fa-link"></i></a>3) 生成发布压缩包</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 setup.py sdist</span><br></pre></td></tr></table></div></figure><blockquote><p>注意：要制作哪个版本的模块，就使用哪个版本的解释器执行！</p></blockquote>        <h3 id="安装模块"   >          <a href="#安装模块" class="heading-link"><i class="fas fa-link"></i></a>安装模块</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf hm_message-1.0.tar.gz </span><br><span class="line"></span><br><span class="line">$ sudo python3 setup.py install</span><br></pre></td></tr></table></div></figure><p><strong>卸载模块</strong></p><p>直接从安装目录下，把安装模块的 <strong>目录</strong> 删除就可以</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/lib/python3<span class="number">.5</span>/dist-packages/</span><br><span class="line">$ sudo rm -r hm_message*</span><br></pre></td></tr></table></div></figure>        <h3 id="pip-安装第三方模块"   >          <a href="#pip-安装第三方模块" class="heading-link"><i class="fas fa-link"></i></a>pip 安装第三方模块</h3>      <ul><li><p><strong>第三方模块</strong> 通常是指由 <strong>知名的第三方团队</strong> <strong>开发的</strong> 并且被 <strong>程序员广泛使用</strong> 的 <code>Python</code> 包 / 模块</p><ul><li>例如 <code>pygame</code> 就是一套非常成熟的 <strong>游戏开发模块</strong></li></ul></li><li><p><code>pip</code> 是一个现代的，通用的 <code>Python</code> 包管理工具</p></li><li><p>提供了对 <code>Python</code> 包的查找、下载、安装、卸载等功能</p></li></ul><p>安装和卸载命令如下：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将模块安装到 Python 2.x 环境</span></span><br><span class="line">$ sudo pip install pygame</span><br><span class="line">$ sudo pip uninstall pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模块安装到 Python 3.x 环境</span></span><br><span class="line">$ sudo pip3 install pygame</span><br><span class="line">$ sudo pip3 uninstall pygame</span><br></pre></td></tr></table></div></figure>        <h4 id="在-Mac-下安装-iPython"   >          <a href="#在-Mac-下安装-iPython" class="heading-link"><i class="fas fa-link"></i></a>在 Mac 下安装 iPython</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install ipython</span><br></pre></td></tr></table></div></figure>        <h4 id="在-Linux-下安装-iPython"   >          <a href="#在-Linux-下安装-iPython" class="heading-link"><i class="fas fa-link"></i></a>在 Linux 下安装 iPython</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install ipython</span><br><span class="line">$ sudo apt install ipython3</span><br></pre></td></tr></table></div></figure>        <h2 id="文件"   >          <a href="#文件" class="heading-link"><i class="fas fa-link"></i></a>文件</h2>              <h3 id="文件的概念"   >          <a href="#文件的概念" class="heading-link"><i class="fas fa-link"></i></a>文件的概念</h3>              <h3 id="文件的概念和作用"   >          <a href="#文件的概念和作用" class="heading-link"><i class="fas fa-link"></i></a>文件的概念和作用</h3>      <ul><li><p>计算机的 <strong>文件</strong>，就是存储在某种 <strong>长期储存设备</strong> 上的一段 <strong>数据</strong></p></li><li><p>长期存储设备包括：硬盘、U 盘、移动硬盘、光盘…</p></li></ul><p><strong>文件的作用</strong></p><p>将数据长期保存下来，在需要的时候使用</p>        <h3 id="文件的存储方式"   >          <a href="#文件的存储方式" class="heading-link"><i class="fas fa-link"></i></a>文件的存储方式</h3>      <ul><li>在计算机中，文件是以 <strong>二进制</strong> 的方式保存在磁盘上的</li></ul>        <h4 id="文本文件和二进制文件"   >          <a href="#文本文件和二进制文件" class="heading-link"><i class="fas fa-link"></i></a>文本文件和二进制文件</h4>      <ul><li><p>文本文件</p><ul><li><p>可以使用 <strong>文本编辑软件</strong> 查看</p></li><li><p>本质上还是二进制文件</p></li><li><p>例如：python 的源程序</p></li></ul></li><li><p>二进制文件</p><ul><li><p>保存的内容 不是给人直接阅读的，而是 <strong>提供给其他软件使用的</strong></p></li><li><p>例如：图片文件、音频文件、视频文件等等</p></li><li><p>二进制文件不能使用 <strong>文本编辑软件</strong> 查看</p></li></ul></li></ul>        <h3 id="文件的基本操作"   >          <a href="#文件的基本操作" class="heading-link"><i class="fas fa-link"></i></a>文件的基本操作</h3>              <h3 id="操作文件的套路"   >          <a href="#操作文件的套路" class="heading-link"><i class="fas fa-link"></i></a>操作文件的套路</h3>      <p>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p><ol><li><p>打开文件</p></li><li><p>读、写文件</p><ul><li><p><strong>读</strong> 将文件内容读入内存</p></li><li><p><strong>写</strong> 将内存内容写入文件</p></li></ul></li><li><p>关闭文件</p></li></ol>        <h3 id="操作文件的函数-方法"   >          <a href="#操作文件的函数-方法" class="heading-link"><i class="fas fa-link"></i></a>操作文件的函数/方法</h3>      <ul><li>在 <code>Python</code> 中要操作文件需要记住 1 个函数和 3 个方法</li></ul><div class="table-container"><table><thead><tr><th>序号</th><th>函数/方法</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>open</td><td>打开文件，并且返回文件操作对象</td></tr><tr><td>02</td><td>read</td><td>将文件内容读取到内存</td></tr><tr><td>03</td><td>write</td><td>将指定内容写入文件</td></tr><tr><td>04</td><td>close</td><td>关闭文件</td></tr></tbody></table></div><ul><li><p><code>open</code> 函数负责打开文件，并且返回文件对象</p></li><li><p><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</p></li></ul>        <h3 id="read-方法-——-读取文件"   >          <a href="#read-方法-——-读取文件" class="heading-link"><i class="fas fa-link"></i></a>read 方法 —— 读取文件</h3>      <ul><li><p><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写）</p><ul><li><p>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong></p></li><li><p>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></p></li></ul></li><li><p><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></p></li><li><p><code>close</code> 方法负责 <strong>关闭文件</strong></p><ul><li>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></li></ul></li><li><p><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开 - 文件名需要注意大小写</span></span><br><span class="line">file = open(<span class="string">&quot;README&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取</span></span><br><span class="line">text = file.read()</span><br><span class="line">print(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></div></figure><p><strong>提示</strong></p><ul><li>在开发中，通常会先编写 <strong>打开</strong> 和 <strong>关闭</strong> 的代码，再编写中间针对文件的 <strong>读/写</strong> 操作！</li></ul>        <h4 id="文件指针（知道）"   >          <a href="#文件指针（知道）" class="heading-link"><i class="fas fa-link"></i></a>文件指针（知道）</h4>      <ul><li><p><strong>文件指针</strong> 标记 <strong>从哪个位置开始读取数据</strong></p></li><li><p><strong>第一次打开</strong> 文件时，通常 <strong>文件指针会指向文件的开始位置</strong></p></li><li><p>当执行了 <code>read</code> 方法后，<strong>文件指针</strong> 会移动到 <strong>读取内容的末尾</strong></p><ul><li>默认情况下会移动到 <strong>文件末尾</strong></li></ul></li></ul><p><strong>思考</strong></p><ul><li>如果执行了一次 <code>read</code> 方法，读取了所有内容，那么再次调用 <code>read</code> 方法，还能够获得到内容吗？</li></ul><p><strong>答案</strong></p><ul><li><p>不能</p></li><li><p>第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容</p></li></ul>        <h3 id="打开文件的方式"   >          <a href="#打开文件的方式" class="heading-link"><i class="fas fa-link"></i></a>打开文件的方式</h3>      <ul><li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li></ul><p>语法如下：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;访问方式&quot;</span>)</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>访问方式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以**<strong>**只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是**<strong>**默认模式</strong>。如果文件不存在，抛出异常</td></tr><tr><td>w</td><td>以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td>a</td><td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td></tr><tr><td>r+</td><td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td></tr><tr><td>w+</td><td>以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td>a+</td><td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td></tr></tbody></table></div><p><strong>提示</strong></p><ul><li>频繁的移动文件指针，<strong>会影响文件的读写效率</strong>，开发中更多的时候会以 <strong>只读</strong>、<strong>只写</strong> 的方式来操作文件</li></ul><p><strong>写入文件示例</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">f = open(<span class="string">&quot;README&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.write(<span class="string">&quot;hello python！\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;今天天气真好&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="按行读取文件内容"   >          <a href="#按行读取文件内容" class="heading-link"><i class="fas fa-link"></i></a>按行读取文件内容</h3>      <ul><li><p><code>read</code> 方法默认会把文件的 <strong>所有内容</strong> <strong>一次性读取到内存</strong></p></li><li><p>如果文件太大，对内存的占用会非常严重</p></li></ul>        <h4 id="readline-方法"   >          <a href="#readline-方法" class="heading-link"><i class="fas fa-link"></i></a>readline 方法</h4>      <ul><li><p><code>readline</code> 方法可以一次读取一行内容</p></li><li><p>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</p></li></ul><p><strong>读取大文件的正确姿势</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file = open(<span class="string">&quot;README&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取一行内容</span></span><br><span class="line">    text = file.readline()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否读到内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每读取一行的末尾已经有了一个 `\n`</span></span><br><span class="line">    print(text, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="文件读写案例-——-复制文件"   >          <a href="#文件读写案例-——-复制文件" class="heading-link"><i class="fas fa-link"></i></a>文件读写案例 —— 复制文件</h3>      <p><strong>目标</strong></p><p>用代码的方式，来实现文件复制过程</p>        <h4 id="小文件复制"   >          <a href="#小文件复制" class="heading-link"><i class="fas fa-link"></i></a>小文件复制</h4>      <ul><li>打开一个已有文件，读取完整内容，并写入到另外一个文件</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">file_read = open(<span class="string">&quot;README&quot;</span>)</span><br><span class="line">file_write = open(<span class="string">&quot;README[复件]&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取并写入文件</span></span><br><span class="line">text = file_read.read()</span><br><span class="line">file_write.write(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="大文件复制"   >          <a href="#大文件复制" class="heading-link"><i class="fas fa-link"></i></a>大文件复制</h4>      <ul><li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">file_read = open(<span class="string">&quot;README&quot;</span>)</span><br><span class="line">file_write = open(<span class="string">&quot;README[复件]&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取并写入文件</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 每次读取一行</span></span><br><span class="line">    text = file_read.readline()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否读取到内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    file_write.write(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="文件-目录的常用管理操作"   >          <a href="#文件-目录的常用管理操作" class="heading-link"><i class="fas fa-link"></i></a>文件/目录的常用管理操作</h3>      <ul><li><p>在 <strong>终端</strong> / <strong>文件浏览器</strong>、 中可以执行常规的 <strong>文件</strong> / <strong>目录</strong> 管理操作，例如：</p><ul><li>创建、重命名、删除、改变路径、查看目录内容、……</li></ul></li><li><p>在 <code>Python</code> 中，如果希望通过程序实现上述功能，需要导入 <code>os</code> 模块</p></li></ul>        <h3 id="文件操作"   >          <a href="#文件操作" class="heading-link"><i class="fas fa-link"></i></a>文件操作</h3>      <div class="table-container"><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>rename</td><td>重命名文件</td><td><code>os.rename(源文件名, 目标文件名)</code></td></tr><tr><td>02</td><td>remove</td><td>删除文件</td><td><code>os.remove(文件名)</code></td></tr></tbody></table></div>        <h3 id="目录操作"   >          <a href="#目录操作" class="heading-link"><i class="fas fa-link"></i></a>目录操作</h3>      <div class="table-container"><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>listdir</td><td>目录列表</td><td><code>os.listdir(目录名)</code></td></tr><tr><td>02</td><td>mkdir</td><td>创建目录</td><td><code>os.mkdir(目录名)</code></td></tr><tr><td>03</td><td>rmdir</td><td>删除目录</td><td><code>os.rmdir(目录名)</code></td></tr><tr><td>04</td><td>getcwd</td><td>获取当前目录</td><td><code>os.getcwd()</code></td></tr><tr><td>05</td><td>chdir</td><td>修改工作目录</td><td><code>os.chdir(目标目录)</code></td></tr><tr><td>06</td><td>path.isdir</td><td>判断是否是文件</td><td><code>os.path.isdir(文件路径)</code></td></tr></tbody></table></div><blockquote><p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p></blockquote>        <h3 id="文本文件的编码格式（科普）"   >          <a href="#文本文件的编码格式（科普）" class="heading-link"><i class="fas fa-link"></i></a>文本文件的编码格式（科普）</h3>      <ul><li>文本文件存储的内容是基于 <strong>字符编码</strong> 的文件，常见的编码有 <code>ASCII</code> 编码，<code>UNICODE</code> 编码等</li></ul><blockquote><p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p></blockquote>        <h3 id="ASCII-编码和-UNICODE-编码"   >          <a href="#ASCII-编码和-UNICODE-编码" class="heading-link"><i class="fas fa-link"></i></a>ASCII 编码和 UNICODE 编码</h3>              <h4 id="ASCII-编码"   >          <a href="#ASCII-编码" class="heading-link"><i class="fas fa-link"></i></a>ASCII 编码</h4>      <ul><li><p>计算机中只有 <code>256</code> 个 <code>ASCII</code> 字符</p></li><li><p>一个 <code>ASCII</code> 在内存中占用 <strong>1 个字节</strong> 的空间</p><ul><li><code>8</code> 个 <code>0/1</code> 的排列组合方式一共有 <code>256</code> 种，也就是 <code>2 ** 8</code></li></ul></li></ul>        <h4 id="UTF-8-编码格式"   >          <a href="#UTF-8-编码格式" class="heading-link"><i class="fas fa-link"></i></a>UTF-8 编码格式</h4>      <ul><li><p>计算机中使用 <strong>1~6 个字节</strong> 来表示一个 <code>UTF-8</code> 字符，涵盖了 <strong>地球上几乎所有地区的文字</strong></p></li><li><p>大多数汉字会使用 <strong>3 个字节</strong> 表示</p></li><li><p><code>UTF-8</code> 是 <code>UNICODE</code> 编码的一种编码格式</p></li></ul>        <h3 id="Ptyhon-2-x-中如何使用中文"   >          <a href="#Ptyhon-2-x-中如何使用中文" class="heading-link"><i class="fas fa-link"></i></a>Ptyhon 2.x 中如何使用中文</h3>      <blockquote><p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p></blockquote><ul><li>在 Python 2.x 文件的 <strong>第一行</strong> 增加以下代码，解释器会以 <code>utf-8</code> 编码来处理 python 文件</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *-* coding:utf8 *-*</span></span><br></pre></td></tr></table></div></figure><blockquote><p>这方式是官方推荐使用的！</p></blockquote><ul><li>也可以使用</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br></pre></td></tr></table></div></figure>        <h4 id="unicode-字符串"   >          <a href="#unicode-字符串" class="heading-link"><i class="fas fa-link"></i></a>unicode 字符串</h4>      <ul><li><p>在 <code>Python 2.x</code> 中，即使指定了文件使用 <code>UTF-8</code> 的编码格式，但是在遍历字符串时，仍然会 <strong>以字节为单位遍历</strong> 字符串</p></li><li><p>要能够 <strong>正确的遍历字符串</strong>，在定义字符串时，需要 <strong>在字符串的引号前</strong>，增加一个小写字母 <code>u</code>，告诉解释器这是一个 <code>unicode</code> 字符串（使用 <code>UTF-8</code> 编码格式的字符串）</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *-* coding:utf8 *-*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span></span><br><span class="line">hello_str = <span class="string">u&quot;你好世界&quot;</span></span><br><span class="line"></span><br><span class="line">print(hello_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> hello_str:</span><br><span class="line">    print(c)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="异常"   >          <a href="#异常" class="heading-link"><i class="fas fa-link"></i></a>异常</h2>              <h3 id="异常的概念"   >          <a href="#异常的概念" class="heading-link"><i class="fas fa-link"></i></a>异常的概念</h3>      <ul><li><p>程序在运行时，如果 <code>Python 解释器</code> <strong>遇到</strong> 到一个错误，<strong>会停止程序的执行，并且提示一些错误信息</strong>，这就是 <strong>异常</strong></p></li><li><p><strong>程序停止执行并且提示错误信息</strong> 这个动作，我们通常称之为：<strong>抛出(raise)异常</strong></p></li></ul><blockquote><p>程序开发时，很难将 <strong>所有的特殊情况</strong> 都处理的面面俱到，通过 <strong>异常捕获</strong> 可以针对突发事件做集中的处理，从而保证程序的 <strong>稳定性和健壮性</strong></p></blockquote>        <h3 id="捕获异常"   >          <a href="#捕获异常" class="heading-link"><i class="fas fa-link"></i></a>捕获异常</h3>              <h3 id="简单的捕获异常语法"   >          <a href="#简单的捕获异常语法" class="heading-link"><i class="fas fa-link"></i></a>简单的捕获异常语法</h3>      <ul><li><p>在程序开发中，如果 <strong>对某些代码的执行不能确定是否正确</strong>，可以增加 <code>try(尝试)</code> 来 <strong>捕获异常</strong></p></li><li><p>捕获异常最简单的语法格式：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    尝试执行的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    出现错误的处理</span><br></pre></td></tr></table></div></figure><ul><li><p><code>try</code> <strong>尝试</strong>，下方编写要尝试代码，不确定是否能够正常执行的代码</p></li><li><p><code>except</code> <strong>如果不是</strong>，下方编写尝试失败的代码</p></li></ul>        <h4 id="简单异常捕获演练-——-要求用户输入整数"   >          <a href="#简单异常捕获演练-——-要求用户输入整数" class="heading-link"><i class="fas fa-link"></i></a>简单异常捕获演练 —— 要求用户输入整数</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 提示用户输入一个数字</span></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入数字：&quot;</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;请输入正确的数字&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="错误类型捕获"   >          <a href="#错误类型捕获" class="heading-link"><i class="fas fa-link"></i></a>错误类型捕获</h3>      <ul><li><p>在程序执行时，可能会遇到 <strong>不同类型的异常</strong>，并且需要 <strong>针对不同类型的异常，做出不同的响应</strong>，这个时候，就需要捕获错误类型了</p></li><li><p>语法如下：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">2</span>, 错误类型<span class="number">3</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型2 和 3，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br></pre></td></tr></table></div></figure><ul><li>当 <code>Python</code> 解释器 <strong>抛出异常</strong> 时，<strong>最后一行错误信息的第一个单词，就是错误类型</strong></li></ul>        <h4 id="异常类型捕获演练-——-要求用户输入整数"   >          <a href="#异常类型捕获演练-——-要求用户输入整数" class="heading-link"><i class="fas fa-link"></i></a>异常类型捕获演练 —— 要求用户输入整数</h4>      <p><strong>需求</strong></p><ol><li><p>提示用户输入一个整数</p></li><li><p>使用 <code>8</code> 除以用户输入的整数并且输出</p></li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">&quot;请输入整数：&quot;</span>))</span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;请输入正确的整数&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">&quot;除 0 错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="捕获未知错误"   >          <a href="#捕获未知错误" class="heading-link"><i class="fas fa-link"></i></a>捕获未知错误</h4>      <ul><li><p>在开发时，<strong>要预判到所有可能出现的错误</strong>，还是有一定难度的</p></li><li><p>如果希望程序 <strong>无论出现任何错误</strong>，都不会因为 <code>Python</code> 解释器 <strong>抛出异常而被终止</strong>，可以再增加一个 <code>except</code></p></li></ul><p>语法如下：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br></pre></td></tr></table></div></figure>        <h3 id="异常捕获完整语法"   >          <a href="#异常捕获完整语法" class="heading-link"><i class="fas fa-link"></i></a>异常捕获完整语法</h3>      <ul><li>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：</li></ul><blockquote><p>提示：</p></blockquote><ul><li><p>有关完整语法的应用场景，在后续学习中，<strong>结合实际的案例</strong>会更好理解</p></li><li><p>现在先对这个语法结构有个印象即可</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">2</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型2，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">3</span>, 错误类型<span class="number">4</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型3 和 4，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="comment"># 打印错误信息</span></span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论是否有异常，都会执行的代码</span></span><br><span class="line">    print(<span class="string">&quot;无论是否有异常，都会执行的代码&quot;</span>)</span><br></pre></td></tr></table></div></figure><ul><li><p><code>else</code> 只有在没有异常时才会执行的代码</p></li><li><p><code>finally</code> 无论是否有异常，都会执行的代码</p></li><li><p>之前一个演练的 <strong>完整捕获异常</strong> 的代码如下：</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">&quot;请输入整数：&quot;</span>))</span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;请输入正确的整数&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">&quot;除 0 错误&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;正常执行&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&quot;执行完成，但是不保证正确&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="异常的传递"   >          <a href="#异常的传递" class="heading-link"><i class="fas fa-link"></i></a>异常的传递</h3>      <ul><li><p><strong>异常的传递</strong> —— 当 <strong>函数/方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给 函数/方法 的 <strong>调用一方</strong></p></li><li><p>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>，程序才会被终止</p></li></ul><blockquote><p>提示</p></blockquote><ul><li><p>在开发中，可以在主函数中增加 <strong>异常捕获</strong></p></li><li><p>而在主函数中调用的其他函数，只要出现异常，都会传递到主函数的 <strong>异常捕获</strong> 中</p></li><li><p>这样就不需要在代码中，增加大量的 <strong>异常捕获</strong>，能够保证代码的整洁</p></li></ul><p><strong>需求</strong></p><ol><li><p>定义函数 <code>demo1()</code> <strong>提示用户输入一个整数并且返回</strong></p></li><li><p>定义函数 <code>demo2()</code> 调用 <code>demo1()</code></p></li><li><p>在主程序中调用 <code>demo2()</code></p></li></ol><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line">    <span class="keyword">return</span> int(input(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line">    <span class="keyword">return</span> demo1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(demo2())</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;请输入正确的整数&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="抛出-raise-异常"   >          <a href="#抛出-raise-异常" class="heading-link"><i class="fas fa-link"></i></a>抛出 raise 异常</h3>              <h3 id="应用场景"   >          <a href="#应用场景" class="heading-link"><i class="fas fa-link"></i></a>应用场景</h3>      <ul><li><p>在开发中，除了 <strong>代码执行出错</strong> <code>Python</code> 解释器会 <strong>抛出</strong> 异常之外</p></li><li><p>还可以根据 <strong>应用程序</strong> <strong>特有的业务需求</strong> <strong>主动抛出异常</strong></p></li></ul><p><strong>示例</strong></p><ul><li>提示用户 <strong>输入密码</strong>，如果 <strong>长度少于 8</strong>，抛出 <strong>异常</strong></li></ul><p><strong>注意</strong></p><ul><li><p>当前函数 <strong>只负责</strong> 提示用户输入密码，如果 <strong>密码长度不正确，需要其他的函数进行额外处理</strong></p></li><li><p>因此可以 <strong>抛出异常</strong>，由其他需要处理的函数 <strong>捕获异常</strong></p></li></ul>        <h3 id="抛出异常"   >          <a href="#抛出异常" class="heading-link"><i class="fas fa-link"></i></a>抛出异常</h3>      <ul><li><p><code>Python</code> 中提供了一个 <code>Exception</code> <strong>异常类</strong></p></li><li><p>在开发时，如果满足 <strong>特定业务需求时</strong>，希望 <strong>抛出异常</strong>，可以：</p><ol><li><p><strong>创建</strong> 一个 <code>Exception</code> 的 <strong>对象</strong></p></li><li><p>使用 <code>raise</code> <strong>关键字</strong> 抛出 <strong>异常对象</strong></p></li></ol></li></ul><p><strong>需求</strong></p><ul><li><p>定义 <code>input_password</code> 函数，提示用户输入密码</p></li><li><p>如果用户输入长度 &lt; 8，抛出异常</p></li><li><p>如果用户输入长度 &gt;=8，返回输入的密码</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_password</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 提示用户输入密码</span></span><br><span class="line">    pwd = input(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span></span><br><span class="line">    <span class="keyword">if</span> len(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 密码长度不够，需要抛出异常</span></span><br><span class="line">    <span class="comment"># 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span></span><br><span class="line">    ex = Exception(<span class="string">&quot;密码长度不够&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2&gt; 抛出异常对象</span></span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user_pwd = input_password()</span><br><span class="line">    print(user_pwd)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">&quot;发现错误：%s&quot;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;python学习笔记&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>大三上</title>
    <link href="http://example.com/2021/09/26/%E5%A4%A7%E4%B8%89%E4%B8%8A/"/>
    <id>http://example.com/2021/09/26/%E5%A4%A7%E4%B8%89%E4%B8%8A/</id>
    <published>2021-09-26T13:56:08.049Z</published>
    <updated>2021-09-27T14:19:46.244Z</updated>
    
    <content type="html"><![CDATA[<p>大三上学期开始一个月了，把GitHub升级，并且给域名续费后，我又滚来写博客了，也就一学期一次的频率呢😅</p><a id="more"></a>        <h2 id="大二下总结"   >          <a href="#大二下总结" class="heading-link"><i class="fas fa-link"></i></a>大二下总结</h2>      <p>看看了大二下学期刚开始给自己订的小目标，两个都完成了，服创做完了，拿了国三。专业课也不能说是学好了吧，但是没挂科。</p>        <h3 id="项目"   >          <a href="#项目" class="heading-link"><i class="fas fa-link"></i></a>项目</h3>      <p>大二下学期的第一个关键词就是：项目。感觉就是整个人都被项目给围起来了，做项目，写文档，做PPT，改文档，改PPT。总之就是一直在忙项目的事吧，到现在已经对项目PTSD了，，</p>        <h3 id="压力"   >          <a href="#压力" class="heading-link"><i class="fas fa-link"></i></a>压力</h3>      <p>和项目一起来的就是，，压力。最开始压力真的很大，感觉随时要被压垮，自己又是队长，如果不主动去管事情的话，也没人愿意去行动，所以责任对应的是压力。遇到不给力的队友的压力，比赛前项目还没做好的压力，各种各样的折磨，真的累死。</p>        <h3 id="焦虑"   >          <a href="#焦虑" class="heading-link"><i class="fas fa-link"></i></a>焦虑</h3>      <p>焦虑，，为项目做不完焦虑，为考试焦虑。学会调节情绪很重要！！！</p>        <h3 id="收获"   >          <a href="#收获" class="heading-link"><i class="fas fa-link"></i></a>收获</h3>      <p>”做三四月的事，在七八月自有答案”。虽然辛苦，但坚持下来了，结果也很好。两个国三，一个省三，一个省级大创，一等奖学金。努力会有回报，很好！</p>        <h2 id="暑假"   >          <a href="#暑假" class="heading-link"><i class="fas fa-link"></i></a>暑假</h2>      <p>玩的很开心哈哈哈哈哈</p>        <h2 id="大三上"   >          <a href="#大三上" class="heading-link"><i class="fas fa-link"></i></a>大三上</h2>      <p>都说大三是一个分水岭，emmmm，也许吧。其实有一点迷茫，考研，考公，找工作，到底该干什么呢，，但是感觉到很轻松，就是可能没事干吧哈哈哈哈，感觉心情很放松，说不来的感觉，很喜欢现在的状态，嘻嘻哈哈像个傻瓜。。。</p>        <h3 id="规划"   >          <a href="#规划" class="heading-link"><i class="fas fa-link"></i></a>规划</h3>      <p>其实我觉得计划可能会赶不上变化，，，</p><ul><li>过六级（不太可能就是说）</li><li>不挂科</li><li>看书（看了半本了，继续坚持！！）</li><li>..(想到再补充)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;大三上学期开始一个月了，把GitHub升级，并且给域名续费后，我又滚来写博客了，也就一学期一次的频率呢😅&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个项目</title>
    <link href="http://example.com/2021/04/26/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/04/26/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-04-26T12:26:01.721Z</published>
    <updated>2021-09-26T13:55:22.331Z</updated>
    
    <content type="html"><![CDATA[<p>友友们大家好呀！又是一个月没写博客了呢，，😅<br>  项目已经差不多做完啦，来记录一下。</p><a id="more"></a>        <h2 id="第一个项目"   >          <a href="#第一个项目" class="heading-link"><i class="fas fa-link"></i></a>第一个项目</h2>              <h4 id="菜鸡的开始阶段"   >          <a href="#菜鸡的开始阶段" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的开始阶段</h4>      <p>这个项目是从寒假开始，想不到寒假刚开始几天就被拖进了这个项目里面，快乐寒假没了一半，还莫名其妙当上队长🙃。总之就这样开始了吧。最开始真是痛苦啊，简直就啥也不会，啥也不是，两天一次组会，天天看论文（发现了一个免费看的论文的方式嘻嘻），疯狂找数据集。。。就是干了这些吧，也没多做些啥。</p>        <h4 id="菜鸡的中途"   >          <a href="#菜鸡的中途" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的中途</h4>      <p>然后就，，开学了。。。最开始怎么说呢，对这个项目是有点逃避的，感觉啥也不会，一搞项目就开始焦虑，每天都在想项目做不完不会有事儿吧，，于是就躲，，，然而有些事是躲不掉的。就开始隔两天找老师的阶段，最开始对老师让做的很多事情都不理解，也不会。不过，在结束写文档的时候，发现老师让做的每一件事都是有用的。就这样，跟着老师指导的方向慢慢前进。感觉真正做很多事的阶段就是3月到4月中旬的样子吧，这段时间做了很多很多事情。</p>        <h4 id="菜鸡的结束阶段"   >          <a href="#菜鸡的结束阶段" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的结束阶段</h4>      <p>项目终于要做完了，最后就报名各类比赛，写写文档，录录视频，做PPT，答辩。芜湖✈</p>        <h4 id="菜鸡的心路历程"   >          <a href="#菜鸡的心路历程" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的心路历程</h4>      <p>做项目真的很不容易啊！特别是开始的时候😭。而且可能是我的一个缺点吧，就老是很焦虑，有段时间都睡不着了，然后就慢慢开始分析焦虑的原因，把原因想清楚了去解决这样好一点，睡是能睡了，但还是有个焦虑的感觉在心里。我也不知道为啥，可能看看心理方面的书会有答案（文化沙漠）。现在这个项目终于到结束了，项目导致都没啥时间学习专业知识（也许是借口🙄）。反正学习是落下了，最近几天也不想学习，，这样不行啊，得开始学习专业知识了！！！</p>        <h4 id="后续"   >          <a href="#后续" class="heading-link"><i class="fas fa-link"></i></a>后续</h4>      <p>无语了家人们，不会真以为一个比赛完了就完事儿了吧，，，</p>        <h4 id="最后了吧"   >          <a href="#最后了吧" class="heading-link"><i class="fas fa-link"></i></a>最后了吧</h4>      <p>家人好，我又来了，等着大创结题就彻底结束啦！上次更新是在5月31号呢，今天是9月26，隔得有够久呢，，，在暑假的时候进行了最后一个比赛的答辩，获得了国三的好成绩！（我觉得很好了），现在就等大创结题啦！🤭</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;友友们大家好呀！又是一个月没写博客了呢，，😅&lt;br&gt;  项目已经差不多做完啦，来记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>java笔记</title>
    <link href="http://example.com/2021/03/20/java%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/03/20/java%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-20T08:10:13.447Z</published>
    <updated>2021-11-29T12:16:13.597Z</updated>
    
    <content type="html"><![CDATA[<p>复习java，顺便写一下java笔记</p><a id="more"></a>        <h2 id="基础知识"   >          <a href="#基础知识" class="heading-link"><i class="fas fa-link"></i></a>基础知识</h2>              <h3 id="常量"   >          <a href="#常量" class="heading-link"><i class="fas fa-link"></i></a>常量</h3>      <p>常量是不能被修改的。</p><p>java中<strong>final</strong>关键字可以用于声明属性（常量），方法和类。在变量前面添加关键词final即可声明一个常量。<strong>常量名必须大写。</strong></p><p>语法格式：</p><pre><code>    final 数据类型 常量名 = 值；</code></pre><p>例如：</p><pre><code>    final double PI = 10.2；</code></pre>        <h3 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a>数据类型</h3>              <h4 id="整数"   >          <a href="#整数" class="heading-link"><i class="fas fa-link"></i></a>整数</h4>      <p>byte、short、int、long 四种基本数据类型表示整数，需要注意的是 long 类型，使用 long 修饰的变量需要在数值后面加上 <strong>L</strong> 或者 <strong>l</strong></p>        <h4 id="浮点数"   >          <a href="#浮点数" class="heading-link"><i class="fas fa-link"></i></a>浮点数</h4>      <p>float 和 double 类型表示浮点数，即可以表示小数部分。需要注意的是 float 类型的数值后面需要加上 F 或者 f，否则会被当成 double 类型处理。double 类型的数值可以加上 D 或 d，也可以不加。</p>        <h4 id="char-类型"   >          <a href="#char-类型" class="heading-link"><i class="fas fa-link"></i></a>char 类型</h4>      <p>char 类型用于表示单个字符。需要将字符用单引号括起来</p><pre><code>char a = &#39;a&#39;</code></pre><p>char 可以和整数互相转换</p><pre><code>char a = 97。 </code></pre><p>也可以用十六进制表示</p><pre><code>char a = &#39;\u0061&#39;。</code></pre>        <h4 id="boolean-类型"   >          <a href="#boolean-类型" class="heading-link"><i class="fas fa-link"></i></a>boolean 类型</h4>      <p>boolean 类型（布尔类型）用于表示真值 true或者假值 false，Java 中布尔值不能和整数类型或者其它类型互相转换。</p>        <h4 id="String"   >          <a href="#String" class="heading-link"><i class="fas fa-link"></i></a>String</h4>      <p>Java 中使用 String 类来定义一个字符串，字符串是常量，它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。</p><p>String 对象的初始化格式有如下两种：</p><pre><code>String s0 = &quot;abc&quot;;String s1 = new String(&quot;abd&quot;);</code></pre><p>String 类具有丰富的方法，比如计算字符串的长度、连接字符串、比较字符串、提取字符串等等。</p>        <h5 id="计算字符串长度"   >          <a href="#计算字符串长度" class="heading-link"><i class="fas fa-link"></i></a>计算字符串长度</h5>      <p>length() 方法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;方法原型</span><br><span class="line">public int length()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用方法：字符串标识符.length(); 返回一个 int 类型的整数（字符串中字符数，中文字符也是一个字符）。例如：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 &#x3D; &quot;abc&quot;;</span><br><span class="line">String s2 &#x3D; &quot;Java语言&quot;;</span><br><span class="line">int len1 &#x3D; s1.length();</span><br><span class="line">int len2 &#x3D; s2.length();</span><br></pre></td></tr></table></div></figure><p>则变量 len1 的值是 3，变量 len2 的值是 6。</p>        <h5 id="字符串比较"   >          <a href="#字符串比较" class="heading-link"><i class="fas fa-link"></i></a>字符串比较</h5>      <p>equals() 方法，该方法的作用是判断两个字符串对象的内容是否相同。如果相同则返回 true，否则返回 false。</p><p>equals() 方法比较是从第一字符开始，一个字符一个字符依次比较。</p><p>equalsIgnoreCase() 方法，其用法与 equals() 一致，不过它会忽视大小写。</p><p>而使用 “==” 比较的是两个对象在内存中存储的地址是否一样。</p>        <h5 id="字符串连接"   >          <a href="#字符串连接" class="heading-link"><i class="fas fa-link"></i></a>字符串连接</h5>      <p>字符串连接有两种方法：</p><ul><li>使用 +  比如 String s = “Hello “ + “World!”。而且使用 + 进行连接，不仅可以连接字符串，也可以连接其他类型。但是要求进行连接时至少有一个参与连接的内容是字符串类型。</li><li>使用 String 类的 concat() 方法。<figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a &#x3D; &quot;avx&quot;;</span><br><span class="line">String b &#x3D; &quot; w &quot;;</span><br><span class="line">System.out.println(a.concat(b));</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a>运算符</h3>              <h4 id="算术运算符"   >          <a href="#算术运算符" class="heading-link"><i class="fas fa-link"></i></a>算术运算符</h4>      <p>自增 (++) 和自减 (–) 运算符有两种写法：前缀 <strong>（++i,–i）</strong> 和后缀 <strong>（i++,i–）</strong>。</p><p>前缀自增自减法 (++i,–i): 先进行自增或者自减运算，再进行表达式运算。(++i ：是先把i+1，然后再拿出来使用；)</p><p>后缀自增自减法 (i++,i–): 先进行表达式运算，再进行自增或者自减运算(i++：是先把i拿出来使用，然后再+1；)</p>        <h4 id="位运算符"   >          <a href="#位运算符" class="heading-link"><i class="fas fa-link"></i></a>位运算符</h4>      <ul><li><p>&amp;    按位与    如果相对应位都是 1，则结果为 1，否则为 0</p></li><li><p>丨 按位或     如果相对应位都是 0，则结果为 0，否则为 1</p></li><li><p>^    按位异或 如果相对应位值相同，则结果为 0，否则为 1</p></li><li><p>~    按位补    翻转操作数的每一位，即 0 变成 1，1 变成 0</p></li><li><p>&lt;&lt;  左移  左边最高位丢弃，右边补齐0</p></li><li><p><strong>&gt;&gt;</strong> 右移 最高位是0，左边补齐0；最高位是1，左边补齐1</p></li><li><p><strong>&gt;&gt;&gt;</strong> 无符号右移 无论最高位是0还是1，左边补齐0</p></li></ul>        <h4 id="逻辑运算符"   >          <a href="#逻辑运算符" class="heading-link"><i class="fas fa-link"></i></a>逻辑运算符</h4>      <p>逻辑运算符是通过运算符将操作数或等式进行逻辑判断的语句。</p><p>表格中的例子中，假设布尔变量 a 为真（true），变量 b 为假（false）：</p><p>&amp;&amp; 或 &amp;    与    当且仅当两个操作数都为真，条件才为真</p><pre><code>双目运算符    (a &amp;&amp; b) 或 (a &amp; b) 为假</code></pre><p>|| 或 |    或    两个操作数任何一个为真，条件为真</p><pre><code>双目运算符    （a || b) 或 (a | b) 为真</code></pre><p>!    非    用来反转操作数的逻辑状态。如果条件为真，则逻辑非运算符将得到假</p><pre><code>单目运算符    （!a）为假</code></pre><p>^    异或    如果两个操作数逻辑相同，则结果为假，否则为真</p><pre><code>双目运算符    (a ^ b) 为真</code></pre><p>&amp;&amp; 与 || 是具有<strong>短路性质</strong>，当按优先级顺序计算到当前表达式时，表达式的结果可以确定整个表达式的结果时，便不会继续向后进行判断和计算，而直接返回结果。</p>        <h4 id="关系运算符"   >          <a href="#关系运算符" class="heading-link"><i class="fas fa-link"></i></a>关系运算符</h4>      <p>== ，！=，&lt;,&gt;&lt;=,&gt;=</p><p>关系运算符生成的是一个 <strong>boolean（布尔）</strong> 结果，它们计算的是操作数的值之间的关系。如果关系是真实的，结果为 true（真），否则，结果为 false（假）。</p><p>Java 还有唯一的一个三目运算符 <strong>?:</strong>  。</p><p>语法格式：</p><pre><code>布尔表达式 ？表达式 1 : 表达式 2;</code></pre><p>运算过程：如果布尔表达式的值为 true，则返回表达式 1的值，否则返回表达式 2的值。</p><p>注意：</p><ul><li><p>== 和 != 适用于所有的基本数据类型，其他关系运算符不适用于 boolean，因为 boolean 值只有 true 和 false，比较没有任何意义。</p></li><li><p>== 和 != 也适用于所有对象，可以比较对象的引用是否相同。</p></li></ul>        <h3 id="关键字"   >          <a href="#关键字" class="heading-link"><i class="fas fa-link"></i></a>关键字</h3>      <p>Java 的关键字对 Java 的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名。</p>        <h3 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a>方法</h3>      <p>Java 中的方法，可以将其看成一个功能的集合，它们是为了解决特定问题的代码组合。</p><p>方法的定义语法：</p><pre><code>访问修饰符 返回值类型 方法名(参数列表) &#123;    方法体&#125;</code></pre><p>在上面的语法说明中：</p><p><strong>访问修饰符：</strong> 代表方法允许被访问的权限范围，可以是 public、protected、private 或者省略（default）。</p><p><strong>返回值类型：</strong> 方法返回值的类型，如果方法不返回任何值，则返回值类型指定为 void （代表无类型）；如果方法具有返回值，则需要指定返回值的类型，并且在方法体中使用 return 语句返回值。</p><p><strong>方法名：</strong> 是方法的名字，必须使用合法的标识符。</p><p><strong>参数列表：</strong> 是传递给方法的参数列表，参数可以有多个，多个参数间以逗号隔开，每个参数由参数类型和参数名组成，以空格隔开。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p><p><strong>方法体：</strong> 方法体包含具体的语句，定义该方法的功能。</p><p>当方法定义好之后，需要调用才可以生效，我们可以通过 main 方法（main 方法是 Java 程序的入口，所以需要用它来调用）来调用它。</p>        <h3 id="方法重载"   >          <a href="#方法重载" class="heading-link"><i class="fas fa-link"></i></a>方法重载</h3>      <p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。方法重载一般用于创建一组任务相似但是参数不同的方法。</p><p>方法重载有以下几种规则：</p><ul><li>方法中的参数列表必须不同。比如：参数个数不同或者参数类型不同。</li><li>重载的方法中允许抛出不同的异常</li><li>可以有不同的返回值类型，但是参数列表必须不同。</li><li>可以有不同的访问修饰符。</li></ul>        <h3 id="方法重写"   >          <a href="#方法重写" class="heading-link"><i class="fas fa-link"></i></a>方法重写</h3>      <p>子类可以继承父类的方法，但如果子类对父类的方法不满意，想在里面加入适合自己的一些操作时，就需要将方法进行重写。并且子类在调用方法中，优先调用子类的方法。</p><p>重写的方法一定要与原父类的方法语法保持一致，比如返回值类型，参数类型及个数，和方法名都必须一致。</p>        <h3 id="if语句"   >          <a href="#if语句" class="heading-link"><i class="fas fa-link"></i></a>if语句</h3>      <p>多重 if 语句，在条件 1 不满足的情况下，才会进行条件 2 的判断，以此向下；当前面的条件均不成立时，最终执行 else 块内的代码。</p><p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if(条件1)&#123;</span><br><span class="line">    代码块1</span><br><span class="line">&#125;</span><br><span class="line">else if(条件2)&#123;</span><br><span class="line">    代码块2</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else &#123;</span><br><span class="line">    代码块n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="switch语句"   >          <a href="#switch语句" class="heading-link"><i class="fas fa-link"></i></a>switch语句</h3>      <p>当需要对选项进行等值判断时，使用 switch 语句更加简洁明了。</p><p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line">    case 值1:</span><br><span class="line">        代码块1</span><br><span class="line">        break;</span><br><span class="line">    case 值2:</span><br><span class="line">        代码块2</span><br><span class="line">        break;</span><br><span class="line">    ...</span><br><span class="line">    default:</span><br><span class="line">        默认执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>当 switch 后表达式的值和 case 语句后的值相同时，从该位置开始向下执行，直到遇到 break 语句或者 switch 语句块结束；如果没有匹配的 case 语句则执行 default 块的代码。(defualt 块不是必须的，默认为空)</p>        <h3 id="while语句"   >          <a href="#while语句" class="heading-link"><i class="fas fa-link"></i></a>while语句</h3>      <p>while语法：</p><pre><code>while(条件)&#123;    代码块&#125;</code></pre><p>while 的执行过程是先判断，再执行。</p><p>判断 while 后面的条件是否成立 ( true or false )<br>当条件成立时，执行循环内的代码。</p>        <h3 id="do-while语句"   >          <a href="#do-while语句" class="heading-link"><i class="fas fa-link"></i></a>do-while语句</h3>      <p>do-while 语法：</p><pre><code>do&#123;    代码块&#125;while(条件);</code></pre><p>do-while 的执行过程是先执行一次，再循环判断 <strong>（所以循环内的代码至少会执行一次）</strong> 。</p><p>先执行一遍循环操作，然后判断循环条件是否成立。<br>如果条件成立，继续执行，直到循环条件不成立为止。</p>        <h3 id="for语句"   >          <a href="#for语句" class="heading-link"><i class="fas fa-link"></i></a>for语句</h3>      <p>for 语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(循环变量初始化①; 循环条件②; 循环变量值操作③)&#123;</span><br><span class="line">    循环操作④</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>for 相比 while 和 do-while 语句结构更加简洁易读，它的执行顺序：</p><ul><li><p>执行循环变量初始化部分（1），设置循环的初始状态，此部分在整个循环中只执行一次。</p></li><li><p>进行循环条件的判断（2），如果条件为 true，则执行循环体内代码（4）；如果为 false ，则直接退出循环。</p></li><li><p>执行循环变量值操作部分（3），对循环变量的值进行修改，然后进行下一次循环条件判断（2）。</p></li></ul><p>整个循环的流程可以简化为：</p><pre><code>(1) -&gt; [(2)-&gt;(4)-&gt;(3)] -&gt; [(2)-&gt;(4)-&gt;(3)] -&gt; ... =&gt; (2) 结果为 false, 退出循环。</code></pre>        <h3 id="跳转语句"   >          <a href="#跳转语句" class="heading-link"><i class="fas fa-link"></i></a>跳转语句</h3>      <p><strong>break</strong> 关键字经常用在条件和循环语句中，用来跳出循环语句。</p><p><strong>continue</strong> 关键字的作用是跳过循环体中剩余的语句执行下一次循环。</p>        <h3 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a>数组</h3>      <p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型[ ] 数组名;  </span><br><span class="line">&#x2F;&#x2F;或者: </span><br><span class="line">数据类型 数组名[ ];</span><br></pre></td></tr></table></div></figure><p>数组名为任意合法的变量名，如：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int ages[];      &#x2F;&#x2F;存放年龄的数组，类型为整型</span><br><span class="line">char symbol[];   &#x2F;&#x2F;存放符号的数组，类型为字符型</span><br><span class="line">String[] name;  &#x2F;&#x2F;存放名称的数组，类型为字符串型</span><br></pre></td></tr></table></div></figure><p>声明数组后，需要为数组分配空间，也就是定义多大的数组。</p><p>语法：</p><pre><code>数组名 = new  数据类型 [ 数组长度 ];</code></pre><p>数组长度就是数组最多可存放元素的个数。可以在数组声明的时候初始化数组，或者在声明时就为它分配好空间，这样就不用再为数组分配空间。</p><p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[] ages &#x3D; &#123;1,8,9,3,15,0&#125;;</span><br><span class="line">&#x2F;&#x2F;声明并初始化了一个整型数组，它有6个元素</span><br><span class="line"></span><br><span class="line">char[] symbol &#x3D; new char[10] </span><br><span class="line">&#x2F;&#x2F;声明并分配了一个长度为10的char型数组</span><br></pre></td></tr></table></div></figure><p>分配空间后就可以向数组中放数据了，数组中元素都是通过下标来访问的。 如：</p><pre><code>ages[0] = 12;</code></pre><p>Java 中可以将一个数组赋值给另一个数组，如：</p><pre><code>int[] a1 = &#123;1,2,3&#125;;int[] a2;a2 = a1;</code></pre><p>这里只是复制了一个引用，即 a2 和 a1 是相同数组的不同名称。a2的值变化，a1的值也会变</p><p><strong>数组遍历：</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int [] ages &#x3D; &#123;12, 18, 9, 33, 45, 60&#125;;</span><br><span class="line">for(int i &#x3D; 0; i &lt; ages.length; i++)&#123; </span><br><span class="line">    &#x2F;&#x2F;ages.length是获取数组的长度</span><br><span class="line">    </span><br><span class="line">    System.out.println(&quot;数组中第&quot;+(i+1)+&quot;个元素是 &quot;+ages[i]);</span><br><span class="line">    &#x2F;&#x2F;注意数组下标是从零开始</span><br></pre></td></tr></table></div></figure><p>注意：</p><ul><li>数组下标从 0 开始。所以数组的下标范围是 0 至 数组长度 -1(arr.length() - 1)。</li><li>数组不能越界访问，否则会报错。</li></ul><p>for 语句在数组内可以使用特殊简化版本，在遍历数组、集合时，foreach 更简单便捷。从英文字面意思理解 foreach 也就是“ for 每一个”的意思。</p><p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(元素类型 元素变量:遍历对象)&#123;</span><br><span class="line">    执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="二维数组"   >          <a href="#二维数组" class="heading-link"><i class="fas fa-link"></i></a>二维数组</h3>      <p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">数据类型[][] 数组名 &#x3D; new 数据类型[行的个数][列的个数];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">数据类型[][] 数组名;</span><br><span class="line">数组名 &#x3D; new 数据类型[行的个数][列的个数];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;也可以</span><br><span class="line">数据类型 [][] 数组名 &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">&#123;第一行值1,第一行值2,...&#125;</span><br><span class="line">&#123;第二行值1,第二行值2,...&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>二维数组的赋值和访问，跟一维数组类似，可以通过下标来逐个赋值和访问，注意索引从 0 开始</p><pre><code>数组名[行的索引][列的索引] = 值;</code></pre>        <h2 id="面向对象"   >          <a href="#面向对象" class="heading-link"><i class="fas fa-link"></i></a>面向对象</h2>              <h3 id="类"   >          <a href="#类" class="heading-link"><i class="fas fa-link"></i></a>类</h3>      <p>类的定义：</p><ul><li>类是相同或相似对象的一种抽象，是对象的一个模板，它描述一类对象的行为和状态。</li><li>类是具有相同属性和方法（行为）的对象的集合</li></ul><p>类就是对象的抽象（或者模板），对象就是类的具体（或者实例）。</p><p>类由属性和方法两部分组成。</p><p><strong>定义一个类</strong> </p><p>主要有三个步骤：</p><ul><li><p>定义类名，用于区分不同的类。如下代码中 public class 后面跟的就是类名。class是声明类的关键字，类名后面跟上大括号，大括号里面就是类的一些信息。public 为权限修饰符。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class 类名 &#123;</span><br><span class="line">    &#x2F;&#x2F;定义属性部分（成员变量）</span><br><span class="line">    属性1的类型 属性1;</span><br><span class="line">    属性2的类型 属性2;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;定义方法部分</span><br><span class="line">    方法1</span><br><span class="line">    方法2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>编写类的属性。对象有什么，需要通过属性来表示。属性的定义是写在类名后面的大括号里，在定义属性时，要明确属性的类型。在一个类当中可以写一个或多个属性。也可以不定义属性。</p></li><li><p>编写类的方法。方法也是写在大括号里面。可以定义一个方法或多个方法，也可以不定义方法。</p></li></ul><p>一个类可以包含以下<strong>类型变量</strong> ：</p><ul><li>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li>类变量：也叫静态变量，类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li></ul><p>注：在使用时注意，成员变量可以被本类的所有方法所使用，同时可以被与本类有关的其他类所使用。而局部变量只能在当前的方法中使用。</p><p><strong>作用域</strong></p><p>作用域可以简单地理解为变量的生存期或者作用范围，也就是变量从定义开始到什么时候消亡。</p><ul><li><p>局部变量的作用域仅限于定义它的方法内。而成员变量的作用域在整个类内部都是可见的。</p></li><li><p>同时在相同的方法中，不能有同名的局部变量；在不同的方法中，可以有同名的局部变量。</p></li><li><p>成员变量和局部变量同名时，局部变量具有更高的优先级。 </p>        <h3 id="对象"   >          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a>对象</h3>      <p>创建对象的语法如下：</p><p>  类名 对象名 = new 类名();</p></li></ul><p>定义类的时候不会为类开辟内存空间，但是一旦创建了对象，系统就会在内存中为对象开辟一块空间，用来存放对象的属性值和方法。</p><p>创建对象后，我们就要使用对象了，使用对象无非就是对属性和方法进行操作和调用。</p><p>语法如下：</p><pre><code>    //引用对象属性    对象名.属性    //引用对象方法    对象名.方法</code></pre>        <h3 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a>构造方法</h3>      <p>在面向对象中有一个非常重要的知识点，就是构造方法。每个类都有构造方法，在创建该类的对象的时候他们将被调用，如果没有定义构造方法，Java 编译器会提供一个默认构造方法。 创建一个对象的时候，至少调用一个构造方法。比如在新建一个对象 new Object()，括号中没有任何参数，代表调用一个无参构造方法（默认构造方法就是一个无参构造方法）。构造方法的名称必须与类名相同，一个类可以定义多个构造方法。</p><p>构造方法的具体内容：</p><ul><li><p>构造方法的名称与类名相同，且没有返回值。它的语法格式如下：</p><pre><code>  //与类同名，可以指定参数，没有返回值  public 构造方法名()&#123;  //初始化代码  &#125;</code></pre><p>  下面是一个构造方法的例子：</p><pre><code>  public class People&#123;      //无参构造方法      public People()&#123;      &#125;      //有一个参数的构造方法      public People(int age)&#123;      &#125;  &#125;</code></pre><p>  又例如具体的构造方法：</p><pre><code>  public class People &#123;      //属性（成员变量）有什么          double height;     //身高          int age;           //年龄          int sex;       //性别，0为男性，非0为女性      //构造方法，初始化了所有属性      public People(double h, int a, int s)&#123;          height = h;          age = a;          sex = s;      &#125;  &#125;</code></pre><p>  //创建对象，调用我们自己定义的有参构造方法<br>  People XiaoMing = new People(168, 21, 1);</p><p>  上面的例子中通过 new 关键字将类实例化成对象，而 new 后面跟的就是构造方法。于是可以知道 <strong>new + 构造方法</strong> 可以创建一个新的对象。</p></li><li><p>如果在定义类的时候没有写构造方法，系统会默认生成一个无参构造方法，这个构造方法什么也不会做。</p></li><li><p>当有指定的构造方法时，系统不会再添加无参构造方法了。</p></li><li><p>构造方法的重载：<strong>方法名相同，但参数不同</strong> 的多个方法，调用时会自动根据不同的参数选择相应的方法。</p></li></ul>        <h3 id="static"   >          <a href="#static" class="heading-link"><i class="fas fa-link"></i></a>static</h3>              <h4 id="静态成员"   >          <a href="#静态成员" class="heading-link"><i class="fas fa-link"></i></a>静态成员</h4>      <p>Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。</p>        <h4 id="静态方法"   >          <a href="#静态方法" class="heading-link"><i class="fas fa-link"></i></a>静态方法</h4>      <p>被 static 修饰的方法是静态方法，静态方法不依赖于对象，不需要将类实例化便可以调用，由于不实例化也可以调用，所以不能有 this，也不能访问非静态成员变量和非静态方法。但是非静态成员变量和非静态方法可以访问静态方法。</p>        <h3 id="final"   >          <a href="#final" class="heading-link"><i class="fas fa-link"></i></a>final</h3>      <p>final 关键字可以修饰类、方法、属性和变量</p><ul><li>final 修饰类，则该类不允许被继承，为最终类</li><li>final 修饰方法，则该方法不允许被覆盖（重写）</li><li>final 修饰属性：则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）</li><li>final 修饰变量，则该变量的值只能赋一次值，即常量</li></ul>        <h3 id="权限修饰符"   >          <a href="#权限修饰符" class="heading-link"><i class="fas fa-link"></i></a>权限修饰符</h3>      <p>权限修饰符可以用来修饰属性和方法的访问范围。</p><p>访问范围<br><img src="https://doc.shiyanlou.com/document-uid79144labid1072timestamp1434941168916.png"></p><p>默认 是什么修饰符都不加，默认在当前类中和同一包下都可以访问和使用。</p>        <h3 id="封装"   >          <a href="#封装" class="heading-link"><i class="fas fa-link"></i></a>封装</h3>      <p>封装，即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别</p><ul><li>只能通过规定的方法访问数据。</li><li>隐藏类的实例细节，方便修改和实现。</li></ul><p>实现类的封装</p><ul><li>修改属性的可见性，在属性的前面添加修饰符 (private)</li><li>对每个值属性提供对外的公共方法访问，如创建 getter/setter（取值和赋值）方法，用于对私有属性的访问</li><li>在 getter/setter 方法里加入属性的控制语句，例如我们可以加一个判断语句，对于非法输入给予否定。</li></ul>        <h3 id="this"   >          <a href="#this" class="heading-link"><i class="fas fa-link"></i></a>this</h3>      <p>this 关键字代表当前对象。使用 this. 属性 操作当前对象的属性，this. 方法 调用当前对象的方法。</p><p>用 private 修饰的属性，必须定义 getter 和 setter 方法才可以访问到 .</p><p>如下：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void setAge(int age) &#123;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">    return age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>创建好了 getter 和 setter 方法后，我们发现方法中参数名和属性名一样。</p><p>当成员变量和局部变量之间发生冲突时，在属性名前面添加了 this 关键字。 此时就代表将一个参数的值赋给当前对象的属性。同理 this 关键字可以调用当前对象的方法。</p>        <h3 id="继承"   >          <a href="#继承" class="heading-link"><i class="fas fa-link"></i></a>继承</h3>      <p>语法：</p><pre><code>class 子类 extends 父类</code></pre><p>继承的特点：</p><ul><li>子类拥有父类除 private 以外的所有属性和方法。</li><li>子类可以拥有自己的属性和方法。</li><li>子类可以重写实现父类的方法。</li><li>Java 中的继承是单继承，一个类只有一个父类。</li></ul><p>注：Java 实现多继承的一个办法是 implements（实现）接口，但接口不能有非静态的属性，这一点请注意。</p>        <h3 id="super"   >          <a href="#super" class="heading-link"><i class="fas fa-link"></i></a>super</h3>      <p>super 关键字在子类内部使用，代表父类对象。</p><ul><li>访问父类的属性 super.属性名。</li><li>访问父类的方法 super.方法名()。</li><li>子类构造方法需要调用父类的构造方法时，在子类的构造方法体里最前面的位置：super()。</li></ul>        <h3 id="多态"   >          <a href="#多态" class="heading-link"><i class="fas fa-link"></i></a>多态</h3>      <p>多态是指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。多态也称作动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</p><p>通俗地讲，只通过父类就能够引用不同的子类，这就是多态，我们只有在运行的时候才会知道引用变量所指向的具体实例对象。</p><p>多态的实现条件<br>Java 实现多态有三个必要条件：继承、重写和向上转型（即父类引用指向子类对象）。</p><p>只有满足上述三个条件，才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p><p>多态的实现方式<br>Java 中多态的实现方式：继承父类进行方法重写，抽象类和抽象方法，接口实现。</p>        <h3 id="向上转型"   >          <a href="#向上转型" class="heading-link"><i class="fas fa-link"></i></a>向上转型</h3>      <p>不能使用一个子类的引用去指向父类的对象，因为子类对象中可能会含有父类对象中所没有的属性和方法。</p><p>如果定义了一个指向子类对象的父类引用类型，那么它除了能够引用父类中定义的所有属性和方法外，还可以使用子类强大的功能。但是对于只存在于子类的方法和属性就不能获取。</p><p>向上转型，在运行时，会遗忘子类对象中与父类对象中不同的方法，也会覆盖与父类中相同的方法——重写（方法名，参数都相同）。</p>        <h3 id="抽象类"   >          <a href="#抽象类" class="heading-link"><i class="fas fa-link"></i></a>抽象类</h3>      <p>在定义类时，前面加上 <strong>abstract</strong>  关键字修饰的类叫抽象类。</p><p>抽象类中有抽象方法，这种方法是不完整的，仅有声明而没有方法体。抽象方法声明语法如下：</p><pre><code>abstract void f();  //f()方法是抽象方法</code></pre><p>抽象类是限制规定子类必须实现某些方法，但不关注实现细节。</p><p>抽象类规则如下：</p><ul><li>用 abstract 修饰符定义抽象类。</li><li>用 abstract 修饰符定义抽象方法，只用声明，不需要实现。</li><li>包含抽象方法的类就是抽象类。</li><li>抽象类中可以包含普通的方法，也可以没有抽象方法。</li><li>抽象类的对象不能直接创建，通常是定义引用变量指向子类对象。</li></ul>        <h3 id="接口"   >          <a href="#接口" class="heading-link"><i class="fas fa-link"></i></a>接口</h3>      <p>接口用于描述类所具有的功能，而不提供功能的实现，功能的实现需要写在实现接口的类中，并且该类必须实现接口中所有的未实现方法。</p><p>接口的声明语法格式如下：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名称 [extends 其他的接口名] &#123;</span><br><span class="line">        &#x2F;&#x2F; 声明变量</span><br><span class="line">        &#x2F;&#x2F; 抽象方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在 Java8 中：</p><ul><li>接口不能用于实例化对象。</li><li>接口中方法只能是抽象方法、default 方法、静态方法。</li><li>接口成员是 static final 类型。</li><li>接口支持多继承。</li></ul><p>在 Java9 中，接口可以拥有私有方法和私有静态方法，但是只能被该接口中的 default 方法和静态方法使用。</p><p>多继承实现方式：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface A extends 接口1，接口2&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">修饰符 class A implements 接口1，接口2&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="内部类"   >          <a href="#内部类" class="heading-link"><i class="fas fa-link"></i></a>内部类</h3>      <p>将一个类的定义放在另一个类的定义内部，这就是内部类。而包含内部类的类被称为外部类。</p><p>内部类的主要作用如下：</p><ul><li>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类</li><li>内部类的方法可以直接访问外部类的所有数据，包括私有的数据</li><li>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便</li><li>内部类允许继承多个非接口类型</li></ul><p>注：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为 outer 的外部类和其内部定义的名为 inner 的内部类。编译完成后出现 outer.class 和 outer$inner.class 两类。所以内部类的成员变量 / 方法名可以和外部类的相同。</p>        <h4 id="成员内部类的使用方法："   >          <a href="#成员内部类的使用方法：" class="heading-link"><i class="fas fa-link"></i></a>成员内部类的使用方法：</h4>      <ul><li>内部类相当于外部类的一个成员变量，所以内部类可以使用任意访问修饰符。</li><li>内部类里可以直接访问外部类的方法和属性，反之不行。</li><li>定义成员内部类后，必须使用外部类对象来创建内部类对象，即 内部类 对象名 = 外部类对象.new 内部类();或者  外部类.内部类 对象名 = 外部类对象.new 内部类() 。</li><li>如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，如果要访问外部类的成员变量，可以使用 this 关键字。</li></ul><p>注：成员内部类不能含有 static 的变量和方法，因为成员内部类需要先创建了外部类，才能创建它自己的。</p>        <h4 id="静态内部类"   >          <a href="#静态内部类" class="heading-link"><i class="fas fa-link"></i></a>静态内部类</h4>      <p>静态内部类是 static 修饰的内部类，这种内部类的特点是：</p><ul><li>静态内部类不能直接访问外部类的非静态成员，但可以通过 new 外部类().成员 的方式访问。</li><li>如果外部类的静态成员与内部类的成员名称相同，可通过 类名.静态成员 访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可通过 成员名 直接调用外部类的静态成员。</li><li>创建静态内部类的对象时，不需要外部类的对象，可以直接创建 内部类 对象名 = new 内部类();。</li></ul>        <h4 id="局部内部类"   >          <a href="#局部内部类" class="heading-link"><i class="fas fa-link"></i></a>局部内部类</h4>      <p>局部内部类，是指内部类定义在方法和作用域内。</p><p>局部内部类也像别的类一样进行编译，但只是作用域不同而已，只在该方法或条件的作用域内才能使用，退出这些作用域后无法引用的。</p>        <h3 id="包"   >          <a href="#包" class="heading-link"><i class="fas fa-link"></i></a>包</h3>      <p>为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</p><p>包的作用</p><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>包采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。</li><li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li></ul><p>定义包语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">package 包名</span><br><span class="line">&#x2F;&#x2F;注意：必须放在源程序的第一行，包名可用&quot;.&quot;号隔开</span><br></pre></td></tr></table></div></figure><p>Java系统中的包</p><p><img src="https://doc.shiyanlou.com/document-uid79144labid1072timestamp1434937042272.png"></p><p>使用 import 关键字进行导包。</p><p>包的命名规范是全小写字母拼写。</p>        <h2 id="常用类"   >          <a href="#常用类" class="heading-link"><i class="fas fa-link"></i></a>常用类</h2>              <h3 id="Arrays"   >          <a href="#Arrays" class="heading-link"><i class="fas fa-link"></i></a>Arrays</h3>      <p>Arrays常用方法</p><p>Arrays 类包含用于操作数组的各种方法（例如排序和搜索）。还包含一个静态工厂，允许将数组转为 List。</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>List asList(T… a)</td><td>返回由指定数组构造的 List</td></tr><tr><td>void sort(Object[] a)</td><td>对数组进行排序</td></tr><tr><td>void fill(Object[] a, Object val)</td><td>为数组的所有元素都赋上相同的值</td></tr><tr><td>boolean equals(Object[] a, Object[] a2)</td><td>检查两个数组是否相等</td></tr><tr><td>int binarySearch(Object[] a, Object key)</td><td>对排序后的数组使用二分法查找数据</td></tr></tbody></table></div>        <h3 id="StringBuilder"   >          <a href="#StringBuilder" class="heading-link"><i class="fas fa-link"></i></a>StringBuilder</h3>      <p>StringBuilder 类是可变的。它是 String 的对等类，它可以增加和编写字符的可变序列，并且能够将字符插入到字符串中间或附加到字符串末尾（不用创建其他对象）。</p><p>StringBuilder 的构造方法：</p><div class="table-container"><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>StringBuilder()</td><td>构造一个其中不带字符的 StringBuilder其初始容量为 16 个字符</td></tr><tr><td>StringBuilder(CharSequence seq)</td><td>构造一个 StringBuilder，它包含与指定的 CharSequence 相同的字符</td></tr><tr><td>StringBuilder(int capacity)</td><td>构造一个具有指定初始容量的 StringBuilder</td></tr><tr><td>StringBuilder(String str)</td><td>并将其内容初始化为指定的字符串内容</td></tr></tbody></table></div><p>StringBuilder 类的常用方法：</p><div class="table-container"><table><thead><tr><th>方法</th><th>返回值</th><th>功能描述</th></tr></thead><tbody><tr><td>insert(int offsetm,Object obj)</td><td>StringBuilder</td><td>在 offsetm 的位置插入字符串 obj</td></tr><tr><td>append(Object obj)</td><td>StringBuilder</td><td>在字符串末尾追加字符串 obj</td></tr><tr><td>length()</td><td>int</td><td>确定 StringBuilder 对象的长度</td></tr><tr><td>setCharAt(int index,char ch)</td><td>void</td><td>使用 ch 指定的新值设置 index 指定的位置上的字符</td></tr><tr><td>toString()</td><td>String</td><td>转换为字符串形式</td></tr><tr><td>reverse()</td><td>StringBuilder</td><td>反转字符串</td></tr><tr><td>delete(int start, int end)</td><td>StringBuilder</td><td>删除调用对象中从 start 位置开始直到 end 指定的索引（end-1）位置的字符序列</td></tr><tr><td>replace(int start, int end, String str)</td><td>StringBuilder</td><td>使用一组字符替换另一组字符。将用替换字符串从 start 指定的位置开始替换，直到 end 指定的位置结束</td></tr></tbody></table></div>        <h3 id="Date"   >          <a href="#Date" class="heading-link"><i class="fas fa-link"></i></a>Date</h3>      <p>Date 类表示日期和时间，里面封装了操作日期和时间的方法。Date 类经常用来获取系统当前时间。</p><p>Date 中定义的未过时的构造方法：</p><ul><li>Date()  构造一个 Date 对象并对其进行初始化以反映当前时间</li><li>Date(long date)    构造一个 Date 对象，并根据相对于 GMT 1970 年 1 月 1 日 00:00:00 的毫秒数对其进行初始化</li></ul>        <h3 id="System"   >          <a href="#System" class="heading-link"><i class="fas fa-link"></i></a>System</h3>      <p>System 类提供了以下功能：</p><ul><li>标准输入，标准输出和错误输出流；</li><li>访问外部定义的属性和环境变量；</li><li>加载文件和库的方法；</li><li>用于快速复制数组的实用方法。</li></ul><p>System 不可以被实例化，只可以使用其静态方法。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;从指定的源数组中复制一个数组，从源数组指定的位置开始，到目标数组指定的位置</span><br><span class="line">public static void arraycopy(Object src,int srcPos, Object dest,int desPos,int length)</span><br><span class="line">&#x2F;&#x2F;返回以毫秒为单位的当前时间(从1970年到现在的毫秒数)</span><br><span class="line">public static long currentTimeMillis()</span><br><span class="line">&#x2F;&#x2F;终止当前正在运行的Java虚拟机，status为 0时退出</span><br><span class="line">public static void exit(int status)</span><br><span class="line">&#x2F;&#x2F;  运行垃圾收集器</span><br><span class="line">public static void gc()</span><br><span class="line">&#x2F;&#x2F; 取得当前系统的全部属性</span><br><span class="line">public static Properties getProperties()</span><br><span class="line">&#x2F;&#x2F;获取指定键的系统属性</span><br><span class="line">public static String  getProperty(String key)</span><br></pre></td></tr></table></div></figure>        <h3 id="Random"   >          <a href="#Random" class="heading-link"><i class="fas fa-link"></i></a>Random</h3>      <p>Random 类用于生成伪随机数流，在 java.util包下。</p><pre><code>Random random = new Random();</code></pre>        <h2 id="泛型"   >          <a href="#泛型" class="heading-link"><i class="fas fa-link"></i></a>泛型</h2>      ]]></content>
    
    
    <summary type="html">&lt;p&gt;复习java，顺便写一下java笔记&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>大二下学期开始啦</title>
    <link href="http://example.com/2021/03/05/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://example.com/2021/03/05/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E5%BC%80%E5%A7%8B/</id>
    <published>2021-03-05T12:47:20.782Z</published>
    <updated>2021-09-27T13:43:43.673Z</updated>
    
    <content type="html"><![CDATA[<p>进入三月，虽然早就入春，但还是很冷！趁着周五，以及不想再继续看学习视频，再看了看自己三个月没更的博客，于是滚来写博客了。</p><a id="more"></a>        <h1 id="关于大二上学期的总结以及下学期的计划"   >          <a href="#关于大二上学期的总结以及下学期的计划" class="heading-link"><i class="fas fa-link"></i></a>关于大二上学期的总结以及下学期的计划</h1>              <h2 id="上学期的总结"   >          <a href="#上学期的总结" class="heading-link"><i class="fas fa-link"></i></a>上学期的总结</h2>      <p>首先来说，最好的就是没有挂科吧！（经过期末无比艰辛的学习）。上学期的关键词大概是：忙，熬夜，实验报告，焦虑。首先就是无比多的课程，让人完全没有时间做想做的事情，虽然也趁着课比较少的11月学习了前端知识，做了一个项目，在这其中穿插着无数的实验报告。然后就是考试和永远上不完的课，写不完的实验报告，以及令人充实却又劳累的期末复习。就只有一个感觉：忙！忙！忙！期末的时候被催着选定项目，在复习如此繁重的情况下，简直令人崩溃。。。</p>        <h4 id="总结："   >          <a href="#总结：" class="heading-link"><i class="fas fa-link"></i></a>总结：</h4>      <ul><li>学习了前端知识</li><li>做了一个网页设计大赛的项目（结果出来了，没获奖🙁）</li><li>没有挂科</li></ul>        <h2 id="寒假"   >          <a href="#寒假" class="heading-link"><i class="fas fa-link"></i></a>寒假</h2>      <p>首先是在学校留了几天，一个人住寝室的感觉没有想象中好。在学校的几天学习了网安方面的知识，（虽然当时已经不想学了）然后回家，休息了两天之后就开始了冬令营（网安方向），接触了一些之前没有学过的知识，感觉还是有很多收获的。<br>之后就开始了服创的项目。不过感觉之前学的太累了，，休息了半个月之后，开始做项目。前期基本就是一直看论文，找数据集，在做准备工作。过年期间，这次过年走了挺多亲戚的，也到其他地方玩了一下，感觉比往年好很多。比起宅在家里，出去走走也挺好的。</p>        <h2 id="下学期的计划"   >          <a href="#下学期的计划" class="heading-link"><i class="fas fa-link"></i></a>下学期的计划</h2>      <p>这学期的课少了很多，感觉轻松了很多，不过反而让人感觉有点不习惯，慢慢适应节奏。已经决定好不学网安方向了，目前比较感兴趣的是开发方向。再看看吧，感觉在网安方面也做了挺多了努力的，说的时候感觉没啥，现在写博客的时候突然感觉心里有点空，，，（这就是文字的力量？？）这学期的打算是，先做完服创的项目，然后看是要接着申报大创还是开始学习我感兴趣的东西，这个还不能确定。同时，学好专业课！不要挂科！</p>        <h4 id="规划"   >          <a href="#规划" class="heading-link"><i class="fas fa-link"></i></a>规划</h4>      <ul><li><p>把服创项目做完</p></li><li><p>学好专业课，不挂科</p></li><li><p>……</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;进入三月，虽然早就入春，但还是很冷！趁着周五，以及不想再继续看学习视频，再看了看自己三个月没更的博客，于是滚来写博客了。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>java环境配置教程</title>
    <link href="http://example.com/2020/12/03/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2020/12/03/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</id>
    <published>2020-12-03T11:28:24.382Z</published>
    <updated>2021-11-29T12:16:20.183Z</updated>
    
    <content type="html"><![CDATA[<p>由于学习要用到brupsuite,但之前配置好的jdk14不行，所以重新下载了jdk1.8，在安装中遇到一些问题，在这里记录下来。</p><a id="more"></a>        <h2 id="下载"   >          <a href="#下载" class="heading-link"><i class="fas fa-link"></i></a>下载</h2>      <p>在官网下载<span class="exturl"><a class="exturl__link"   href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" >jdk</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，你可以选择不同的版本，我这里选择的是1.8版本。</p><p>由于我是Windows64位的电脑，所以选择的是红色框的那个，你可以根据你电脑的属性来选择应该下载哪儿。<br><img src="https://i.bmp.ovh/imgs/2020/12/ec401f3da4532772.png"><br>下载好后（速度可能会很慢，，），安装即可。注意记住安装路径，这对之后的环境的配置有很大的用处！</p>        <h2 id="环境配置"   >          <a href="#环境配置" class="heading-link"><i class="fas fa-link"></i></a>环境配置</h2>      <p>安装好后，右键单击 <strong>此电脑</strong> ，选择<strong>属性</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/a85bb7fb74a87611.png"><br>点击<strong>高级系统设置</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/f238ad76b2d4e6b1.png"><br>点击<strong>环境变量</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/8cb117d0caf34212.png"><br>在系统变量的下方，点击<strong>新建</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/f141264322b3d41f.png"><br>变量名：<strong>CLASSPATH</strong></p><p>变量值： <strong>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</strong>  (注意开始是.;)<br><img src="https://i.bmp.ovh/imgs/2020/12/d7d3f84dfc17d71a.png"><br>变量名： <strong>JAVA_HOME</strong></p><p>变量值：<strong>D:\java1\jdk8</strong>（此处请填你jdk安装的路径！）<br><img src="https://i.bmp.ovh/imgs/2020/12/ae496e9d67fac7c8.png"><br>双击<strong>PATH</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/08263be164b7196c.png"><br>将<strong>D:\java1\jdk8\bin、D:\java1\jdk8\jre\bin</strong> 分别添加进去(<strong>此处请填你jdk安装的路径！</strong>)（win7可以写做1条，win10写为两条）<br><img src="https://i.bmp.ovh/imgs/2020/12/6dbe4613552c5b96.png"><br>最后点击确定，就配置好了java环境。</p>        <h2 id="检验是否配置正确"   >          <a href="#检验是否配置正确" class="heading-link"><i class="fas fa-link"></i></a>检验是否配置正确</h2>      <p>win+r,输入cmd，进入命令行界面。输入java<br><img src="https://i.bmp.ovh/imgs/2020/12/d5991ed9e4686499.png"><br>输入javac<br><img src="https://i.bmp.ovh/imgs/2020/12/94c9fbeb764b2eeb.png"></p><p>输入java -version<br><img src="https://i.bmp.ovh/imgs/2020/12/c15e8f187a07d897.png"></p><p>如图所示，则java环境配置成功！！</p>        <h2 id="javac不是内部或外部命令，也不是可运行的程序-或批处理文件的细节问题"   >          <a href="#javac不是内部或外部命令，也不是可运行的程序-或批处理文件的细节问题" class="heading-link"><i class="fas fa-link"></i></a>javac不是内部或外部命令，也不是可运行的程序 或批处理文件的细节问题</h2>      <p>解决方法：</p><p>1、如果是按照上面的方法进行配置的，那么请检查你的jdk文件中的bin文件中，是否有<strong>javac.exe</strong>这个文件，如果没有，你需要重新下载jdk<br><img src="https://i.bmp.ovh/imgs/2020/12/189acd797bf730f1.png"></p><p>2、在设置变量时，不要使用相对定位，使用绝对定位<br>相对定位：%JAVA_HOME%\bin;<br>绝对定位：D:\java1\jdk8\bin;（你的jdk下载路径！！）</p><p>3、检查你是否将PATH变量中的两行写成了一行</p>        <h2 id="如何打开jar文件"   >          <a href="#如何打开jar文件" class="heading-link"><i class="fas fa-link"></i></a>如何打开jar文件</h2>      <p>1、打开cmd，将jar文件拖入其中<br>2、打开cmd，输入<strong>regedit</strong>注册表编辑器，找到<strong>HKEY_CLASSES_ROOT\jarfile\shell\open\command</strong>，（你可以在红框处直接搜索。<br><img src="https://i.bmp.ovh/imgs/2020/12/1d90a000103e362b.png"><br><img src="https://i.bmp.ovh/imgs/2020/12/777fd9c6934c59db.png"></p><p>双击，将红框中内容修改为”D:\java1\jdk8\bin\javaw.exe” -jar “%1” %*，注意！画红线处的地方为你的jdk下载路径。<br><img src="https://i.bmp.ovh/imgs/2020/12/ee2ee2cbf0afbb59.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于学习要用到brupsuite,但之前配置好的jdk14不行，所以重新下载了jdk1.8，在安装中遇到一些问题，在这里记录下来。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年11月要结束了</title>
    <link href="http://example.com/2020/11/28/2020.11/"/>
    <id>http://example.com/2020/11/28/2020.11/</id>
    <published>2020-11-28T06:28:10.934Z</published>
    <updated>2021-04-27T12:17:29.931Z</updated>
    
    <content type="html"><![CDATA[<p>   已经一个快一个月没有写博客了，这一个月干了些什么呢？<br>   <a id="more"></a></p>        <h2 id="2020年11月———大二上学期"   >          <a href="#2020年11月———大二上学期" class="heading-link"><i class="fas fa-link"></i></a>2020年11月———大二上学期</h2>      <p>   首先成功进实验室了吧，感谢室友QDQ。然后参加了国信安的网页设计，在QDQ的鼓励下，让我不要瞻前顾后。确实我好像不喜欢在没有充分的准备下去做一些事，容易还没做的时候就先告诉自己不行。这得改啊！总之十分感谢QDQ，最后在她的鼓励下成功参赛，带着我开始了这个项目。</p><p>   之后就一直在做这个项目了，由于什么都不会，所以得从看网课开始，这属实是一件痛苦的事。每天去实验室就打开小破站开始看网课，终于天天看，夜夜看，在差不多22号的时候看完了吧。中间由于大物考试，停了一个星期，还好考试应该是能顺利通过的！！以后我的人生中就再也没有物理了呜呜呜！！！</p><p>   看完网课终于可以开始做啦！花了大概一个星期吧，把网站给写好了，emmmm，感觉不是很难，不过有很多细节没有处理好，特别是该死的定位，，，还有有QDQ，和她一起改到了12点过。QDQ，永远滴神！反正删删改改，网页最后是给做好了。</p><p>   11月是忙碌的一个月(可能也不是很忙，，)，但总之应该是有意义的，第一次写了一个网页，完成了一个项目。嗯，，，总之11月就这样过完了，接下来就是2020年的最后一个月了，希望可以保持11月这个学习的状态！冲冲冲！！！</p><p>   <img src="https://ftp.bmp.ovh/imgs/2020/11/748385bdcd96f2d2.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;   已经一个快一个月没有写博客了，这一个月干了些什么呢？&lt;br&gt;</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>PTA练习总结</title>
    <link href="http://example.com/2020/11/05/PTA%E7%BB%83%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/11/05/PTA%E7%BB%83%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-05T13:29:40.972Z</published>
    <updated>2021-11-29T12:16:29.972Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="练习2-15-交错的加减运算"   >          <a href="#练习2-15-交错的加减运算" class="heading-link"><i class="fas fa-link"></i></a>练习2-15 交错的加减运算</h2>      <p>练习2-15 求简单交错序列前N项和 (15分)<br>本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + … 的前N项之和。</p><a id="more"></a><p>输入格式:</p><p>输入在一行中给出一个正整数N。</p><p>输出格式:</p><p>在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。</p><p>输入样例:</p><pre><code>10</code></pre><p>输出样例:</p><pre><code>sum = 0.819</code></pre><p>在做这个题中遇到的问题是，没有掌握到如何进行交错的加减运算，在搜索之后发现，需要在循环中加一个 x = -x 即可。（我太菜了，是个憨批）</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/2c44fa7e11871fae.png"></p>        <h2 id="习题2-6-在循环后进行清零"   >          <a href="#习题2-6-在循环后进行清零" class="heading-link"><i class="fas fa-link"></i></a>习题2-6 在循环后进行清零</h2>      <p>习题2-6 求阶乘序列前N项和 (15分)<br>本题要求编写程序，计算序列 1!+2!+3!+⋯ 的前N项之和。</p><p>输入格式:<br>输入在一行中给出一个不超过12的正整数N。</p><p>输出格式:<br>在一行中输出整数结果。</p><p>输入样例:</p><pre><code>5</code></pre><p>输出样例:</p><pre><code>153</code></pre><p>做这道题遇到的问题是，计算所得的数非常大，两个循环的思路是没有问题的，但关键在于，没有在第二个循环处将sum1的值再次变1。所以，只需要在第一个循环的内容加一个 sum1 = 1；且加在最前面即可。<br><img src="https://i.bmp.ovh/imgs/2020/11/a7f0bcbe56fc14f4.png"></p>        <h2 id="练习3-3-c语言变量的初始化赋值"   >          <a href="#练习3-3-c语言变量的初始化赋值" class="heading-link"><i class="fas fa-link"></i></a>练习3-3 c语言变量的初始化赋值</h2>      <p>在做练习3-3时，average的平均数算出来非常的大，在检查算法后发现并没有出错，最后发现是没有对sum进行初始化赋值。在C语言中，如果没有对一个变量进行赋值，则为给它随机分配一个值，这就是为什么average非常大的原因，因为给sum随机赋了一个非常的值。</p><p><img src="https://i.bmp.ovh/imgs/2020/11/89097591beedba30.png"></p>        <h2 id="习题3-5-三角形的判断"   >          <a href="#习题3-5-三角形的判断" class="heading-link"><i class="fas fa-link"></i></a>习题3-5 三角形的判断</h2>      <p>C语言中，三角形判断的方式</p><pre><code>if(a&lt;(b+c) &amp;&amp; b&lt;(a+c) &amp;&amp; c&lt;(a+b))</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;练习2-15-交错的加减运算&quot;   &gt;
          &lt;a href=&quot;#练习2-15-交错的加减运算&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;练习2-15 交错的加减运算&lt;/h2&gt;
      &lt;p&gt;练习2-15 求简单交错序列前N项和 (15分)&lt;br&gt;本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + … 的前N项之和。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>PTA练习2-12输出华氏-摄氏温度转换表</title>
    <link href="http://example.com/2020/10/23/PTA2-12/"/>
    <id>http://example.com/2020/10/23/PTA2-12/</id>
    <published>2020-10-23T11:21:04.976Z</published>
    <updated>2021-12-06T13:21:54.219Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="题目如下："   >          <a href="#题目如下：" class="heading-link"><i class="fas fa-link"></i></a>题目如下：</h2>      <p>请输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。</p><p>温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。</p><a id="more"></a><p>输入格式:<br>在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开。</p><p>输出格式:<br>第一行输出：”fahr celsius”</p><p>接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。</p><p>若输入的范围不合法，则输出”Invalid.”</p><p>输入样例1:</p><blockquote><p>32 35</p></blockquote><p>输出样例1:</p><blockquote><p>fahr celsius</p></blockquote><blockquote><p>32   0.0</p></blockquote><blockquote><p>34   1.1</p></blockquote><p>输入样例2:</p><blockquote><p>40 30</p></blockquote><p>输出样例2:</p><blockquote><p>Invalid.</p></blockquote>        <h2 id="代码如下"   >          <a href="#代码如下" class="heading-link"><i class="fas fa-link"></i></a>代码如下:</h2>      <figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> celsius;</span><br><span class="line">    <span class="keyword">int</span> lower;</span><br><span class="line">    <span class="keyword">int</span> upper;</span><br><span class="line">    <span class="keyword">int</span> fahr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;lower,&amp;upper);</span><br><span class="line">    <span class="keyword">if</span>(lower &lt;= upper &amp;&amp; <span class="number">0</span>&lt;lower &amp;&amp; lower&lt;=<span class="number">100</span> &amp;&amp; upper&lt;=<span class="number">100</span> &amp;&amp; upper&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fahr celsius\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(fahr=lower;fahr&lt;=upper;fahr=fahr + <span class="number">2</span>)&#123;</span><br><span class="line">        celsius = <span class="number">5.0</span> * (fahr - <span class="number">32</span>)/<span class="number">9.0</span> ;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%6.1f\n&quot;</span>, fahr,celsius);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="https://i.bmp.ovh/imgs/2020/11/747b6671bbad4193.png"></p>        <h2 id="知识点："   >          <a href="#知识点：" class="heading-link"><i class="fas fa-link"></i></a>知识点：</h2>      <p>1.C语言如果控制字符宽度和保留指定的小数数位<br>  在输出时：**%字符宽度.小数数位f**</p><p>2   a.c: In function ‘main’:<br>a.c:9:5: warning: ignoring return value of ‘scanf’, declared with attribute warn_unused_result [-Wunused-result]<br>     (void)scanf(“%d %d”, &amp;lower,&amp;upper);<br>     ^<del>~</del></p><p>当报出如下错误时，不一定是输入有问题，有可能是输出，算法有问题。所以此时你可以对你的所有代码进行检查。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目如下：&quot;   &gt;
          &lt;a href=&quot;#题目如下：&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;题目如下：&lt;/h2&gt;
      &lt;p&gt;请输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。&lt;/p&gt;
&lt;p&gt;温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个博客</title>
    <link href="http://example.com/2020/09/28/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2020/09/28/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-09-28T09:00:04.784Z</published>
    <updated>2021-03-21T02:27:27.954Z</updated>
    
    <content type="html"><![CDATA[<p>我的第一个博客</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的第一个博客&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
