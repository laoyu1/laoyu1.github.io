<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laoyu&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-22T12:10:11.176Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>laoyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java笔记</title>
    <link href="http://example.com/2021/03/20/java%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/03/20/java%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-20T08:10:13.447Z</published>
    <updated>2021-03-22T12:10:11.176Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="菜鸡的java学习之旅"   >          <a href="#菜鸡的java学习之旅" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的java学习之旅</h2>      <p>复习java，顺便写一下java笔记</p><a id="more"></a>        <h2 id="基础知识"   >          <a href="#基础知识" class="heading-link"><i class="fas fa-link"></i></a>基础知识</h2>              <h3 id="常量"   >          <a href="#常量" class="heading-link"><i class="fas fa-link"></i></a>常量</h3>      <p>常量是不能被修改的。</p><p>java中<strong>final</strong>关键字可以用于声明属性（常量），方法和类。在变量前面添加关键词final即可声明一个常量。<strong>常量名必须大写。</strong></p><p>语法格式：</p><pre><code>    final 数据类型 常量名 = 值；</code></pre><p>例如：</p><pre><code>    final double PI = 10.2；</code></pre>        <h3 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a>数据类型</h3>              <h4 id="整数"   >          <a href="#整数" class="heading-link"><i class="fas fa-link"></i></a>整数</h4>      <p>byte、short、int、long 四种基本数据类型表示整数，需要注意的是 long 类型，使用 long 修饰的变量需要在数值后面加上 <strong>L</strong> 或者 <strong>l</strong></p>        <h4 id="浮点数"   >          <a href="#浮点数" class="heading-link"><i class="fas fa-link"></i></a>浮点数</h4>      <p>float 和 double 类型表示浮点数，即可以表示小数部分。需要注意的是 float 类型的数值后面需要加上 F 或者 f，否则会被当成 double 类型处理。double 类型的数值可以加上 D 或 d，也可以不加。</p>        <h4 id="char-类型"   >          <a href="#char-类型" class="heading-link"><i class="fas fa-link"></i></a>char 类型</h4>      <p>char 类型用于表示单个字符。需要将字符用单引号括起来char a = ‘a’，char 可以和整数互相转换，如果字符 a 也可以写成char a = 97。也可以用十六进制表示char a = ‘\u0061’。</p>        <h4 id="boolean-类型"   >          <a href="#boolean-类型" class="heading-link"><i class="fas fa-link"></i></a>boolean 类型</h4>      <p>boolean 类型（布尔类型）用于表示真值 true或者假值 false，Java 中布尔值不能和整数类型或者其它类型互相转换。</p>        <h4 id="String"   >          <a href="#String" class="heading-link"><i class="fas fa-link"></i></a>String</h4>      <p>Java 中使用 String 类来定义一个字符串，字符串是常量，它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。</p><p>String 对象的初始化格式有如下两种：</p><pre><code>    String s0 = &quot;abc&quot;;    String s1 = new String(&quot;abd&quot;);</code></pre><p>String 类具有丰富的方法，比如计算字符串的长度、连接字符串、比较字符串、提取字符串等等。</p>        <h5 id="计算字符串长度"   >          <a href="#计算字符串长度" class="heading-link"><i class="fas fa-link"></i></a>计算字符串长度</h5>      <p>length() 方法：</p><pre><code>    //方法原型    public int length()&#123;    &#125;</code></pre><p>调用方法：字符串标识符.length(); 返回一个 int 类型的整数（字符串中字符数，中文字符也是一个字符）。例如：</p><pre><code>    String s1 = &quot;abc&quot;;    String s2 = &quot;Java语言&quot;;    int len1 = s1.length();    int len2 = s2.length();</code></pre><p>则变量 len1 的值是 3，变量 len2 的值是 6。</p>        <h5 id="字符串比较"   >          <a href="#字符串比较" class="heading-link"><i class="fas fa-link"></i></a>字符串比较</h5>      <p>equals() 方法，该方法的作用是判断两个字符串对象的内容是否相同。如果相同则返回 true，否则返回 false。</p><p>equals() 方法比较是从第一字符开始，一个字符一个字符依次比较。</p><p>equals比较原理</p><p>如果想忽略掉大小写关系，比如：java 和 Java 是一样的，那怎么办呢？可以调用 equalsIgnoreCase() 方法，其用法与 equals() 一致，不过它会忽视大小写。</p><p>而使用 “==” 比较的是两个对象在内存中存储的地址是否一样。</p>        <h5 id="字符串连接"   >          <a href="#字符串连接" class="heading-link"><i class="fas fa-link"></i></a>字符串连接</h5>      <p>字符串连接有两种方法：</p><ul><li><p>使用 +，比如 String s = “Hello “ + “World!”。而且使用 + 进行连接，不仅可以连接字符串，也可以连接其他类型。但是要求进行连接时至少有一个参与连接的内容是字符串类型。</p></li><li><p>使用 String 类的 concat() 方法。</p></li></ul>        <h3 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a>运算符</h3>              <h4 id="算术运算符"   >          <a href="#算术运算符" class="heading-link"><i class="fas fa-link"></i></a>算术运算符</h4>      <p>自增 (++) 和自减 (–) 运算符有两种写法：前缀 <strong>（++i,–i）</strong> 和后缀 <strong>（i++,i–）</strong>。</p><p>前缀自增自减法 (++i,–i): 先进行自增或者自减运算，再进行表达式运算。<br>后缀自增自减法 (i++,i–): 先进行表达式运算，再进行自增或者自减运算</p>        <h4 id="位运算符"   >          <a href="#位运算符" class="heading-link"><i class="fas fa-link"></i></a>位运算符</h4>      <p>&amp;    按位与    如果相对应位都是 1，则结果为 1，否则为 0</p><pre><code>（a＆b），得到 12，即 0000 1100</code></pre><p>丨    按位或    如果相对应位都是 0，则结果为 0，否则为 1</p><pre><code>（ a 丨 b ）得到 61，即 0011 1101</code></pre><p>^    按位异或    如果相对应位值相同，则结果为 0，否则为 1</p><pre><code>（a^b）得到 49，即 0011 0001</code></pre><p>~    按位补    翻转操作数的每一位，即 0 变成 1，1 变成 0</p><pre><code>（~a）得到 -61，即 1100 0011</code></pre><p>&lt;&lt;    按位左移    左操作数按位左移右操作数指定的位数</p><pre><code>a&lt;&lt;2 得到 240，即 1111 0000</code></pre><p><strong>&gt;&gt;</strong>    按位右移    左操作数按位右移右操作数指定的位数</p><pre><code>a&gt;&gt;2 得到 15 即 1111</code></pre><p> <strong>&gt;&gt;&gt;</strong>    按位右移补零    左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充    </p><pre><code>a&gt;&gt;&gt;2 得到 15 即 0000 1111</code></pre>        <h4 id="逻辑运算符"   >          <a href="#逻辑运算符" class="heading-link"><i class="fas fa-link"></i></a>逻辑运算符</h4>      <p>逻辑运算符是通过运算符将操作数或等式进行逻辑判断的语句。</p><p>表格中的例子中，假设布尔变量 a 为真（true），变量 b 为假（false）：</p><p>&amp;&amp; 或 &amp;    与    当且仅当两个操作数都为真，条件才为真</p><pre><code>双目运算符    (a &amp;&amp; b) 或 (a &amp; b) 为假</code></pre><p>|| 或 |    或    两个操作数任何一个为真，条件为真</p><pre><code>双目运算符    （a || b) 或 (a | b) 为真</code></pre><p>!    非    用来反转操作数的逻辑状态。如果条件为真，则逻辑非运算符将得到假</p><pre><code>单目运算符    （!a）为假</code></pre><p>^    异或    如果两个操作数逻辑相同，则结果为假，否则为真</p><pre><code>双目运算符    (a ^ b) 为真</code></pre><p>&amp;&amp; 与 || 是具有<strong>短路性质</strong>，当按优先级顺序计算到当前表达式时，表达式的结果可以确定整个表达式的结果时，便不会继续向后进行判断和计算，而直接返回结果。</p><p>例如：当使用 &amp;&amp; 逻辑运算符时，在两个操作数都为 true 时，结果才为 true，但是当得到第一个操作为 false 时，其结果就必定是 false，这时候就不会再判断第二个操作了。在计算表达式 (a &amp; b) &amp;&amp; (a | b) 时，首先计算 a &amp; b 得到了 false，因为之后是 &amp;&amp;，任何值与 false 进行与操作都是 false，所以可以不用再计算下去，而直接返回 a &amp; b 的结果 false。</p>        <h4 id="关系运算符"   >          <a href="#关系运算符" class="heading-link"><i class="fas fa-link"></i></a>关系运算符</h4>      <p>== ，！=，&lt;,&gt;&lt;=,&gt;=</p><p>关系运算符生成的是一个 <strong>boolean（布尔）</strong> 结果，它们计算的是操作数的值之间的关系。如果关系是真实的，结果为 true（真），否则，结果为 false（假）。</p><p>Java 还有唯一的一个三目运算符 <strong>?:</strong>  。</p><p>语法格式：</p><pre><code>布尔表达式 ？表达式 1 : 表达式 2;</code></pre><p>运算过程：如果布尔表达式的值为 true，则返回表达式 1的值，否则返回表达式 2的值。</p><p>注意</p><ul><li><p>== 和 != 适用于所有的基本数据类型，其他关系运算符不适用于 boolean，因为 boolean 值只有 true 和 false，比较没有任何意义。</p></li><li><p>== 和 != 也适用于所有对象，可以比较对象的引用是否相同。</p></li></ul>        <h3 id="关键字"   >          <a href="#关键字" class="heading-link"><i class="fas fa-link"></i></a>关键字</h3>      <p>Java 的关键字对 Java 的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名。</p>        <h3 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a>方法</h3>      <p>Java 中的方法，可以将其看成一个功能的集合，它们是为了解决特定问题的代码组合。</p><p>方法的定义语法：</p><pre><code>访问修饰符 返回值类型 方法名(参数列表) &#123;    方法体&#125;</code></pre><p>在上面的语法说明中：</p><p><strong>访问修饰符：</strong> 代表方法允许被访问的权限范围，可以是 public、     protected、private 或者省略（default），其中 public 表示该方法可以被其他任何代码调用。</p><p><strong>返回值类型：</strong> 方法返回值的类型，如果方法不返回任何值，则返回值类型指定为 void （代表无类型）；如果方法具有返回值，则需要指定返回值的类型，并且在方法体中使用 return 语句返回值。</p><p><strong>方法名：</strong> 是方法的名字，必须使用合法的标识符。</p><p><strong>参数列表：</strong> 是传递给方法的参数列表，参数可以有多个，多个参数间以逗号隔开，每个参数由参数类型和参数名组成，以空格隔开。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p><p><strong>方法体：</strong> 方法体包含具体的语句，定义该方法的功能。</p><p>当方法定义好之后，需要调用才可以生效，我们可以通过 main 方法（main 方法是 Java 程序的入口，所以需要用它来调用）来调用它。</p>        <h3 id="if语句"   >          <a href="#if语句" class="heading-link"><i class="fas fa-link"></i></a>if语句</h3>      <p>多重 if 语句，在条件 1 不满足的情况下，才会进行条件 2 的判断，以此向下；当前面的条件均不成立时，最终执行 else 块内的代码。</p><p>语法：</p><pre><code>if(条件1)&#123;    代码块1&#125;else if(条件2)&#123;    代码块2&#125;...else &#123;    代码块n&#125;</code></pre>        <h3 id="switch语句"   >          <a href="#switch语句" class="heading-link"><i class="fas fa-link"></i></a>switch语句</h3>      <p>当需要对选项进行等值判断时，使用 switch 语句更加简洁明了。</p><p>语法：</p><pre><code>switch(表达式)&#123;    case 值1:        代码块1        break;    case 值2:        代码块2        break;    ...    default:        默认执行的代码块&#125;</code></pre><p>当 switch 后表达式的值和 case 语句后的值相同时，从该位置开始向下执行，直到遇到 break 语句或者 switch 语句块结束；如果没有匹配的 case 语句则执行 default 块的代码。</p><p>defualt 块不是必须的，默认为空</p>        <h3 id="while语句"   >          <a href="#while语句" class="heading-link"><i class="fas fa-link"></i></a>while语句</h3>      <p>while语法：</p><pre><code>while(条件)&#123;    代码块&#125;</code></pre><p>while 的执行过程是先判断，再执行。</p><p>判断 while 后面的条件是否成立 ( true or false )<br>当条件成立时，执行循环内的代码。</p>        <h3 id="do-while语句"   >          <a href="#do-while语句" class="heading-link"><i class="fas fa-link"></i></a>do-while语句</h3>      <p>do-while 语法：</p><pre><code>do&#123;    代码块&#125;while(条件);</code></pre><p>do-while 的执行过程是先执行一次，再循环判断 <strong>（所以循环内的代码至少会执行一次）</strong> 。</p><p>先执行一遍循环操作，然后判断循环条件是否成立。<br>如果条件成立，继续执行，直到循环条件不成立为止。</p>        <h3 id="for语句"   >          <a href="#for语句" class="heading-link"><i class="fas fa-link"></i></a>for语句</h3>      <p>for 语法：</p><pre><code>for(循环变量初始化①; 循环条件②; 循环变量值操作③)&#123;    循环操作④&#125;</code></pre><p>for 相比 while 和 do-while 语句结构更加简洁易读，它的执行顺序：</p><ul><li><p>执行循环变量初始化部分（1），设置循环的初始状态，此部分在整个循环中只执行一次。</p></li><li><p>进行循环条件的判断（2），如果条件为 true，则执行循环体内代码（4）；如果为 false ，则直接退出循环。</p></li><li><p>执行循环变量值操作部分（3），对循环变量的值进行修改，然后进行下一次循环条件判断（2）。<br>整个循环的流程可以简化为：</p></li></ul><p>(1) -&gt; [(2)-&gt;(4)-&gt;(3)] -&gt; [(2)-&gt;(4)-&gt;(3)] -&gt; … =&gt; (2) 结果为 false, 退出循环。</p>        <h3 id="跳转语句"   >          <a href="#跳转语句" class="heading-link"><i class="fas fa-link"></i></a>跳转语句</h3>      <p><strong>break</strong> 关键字经常用在条件和循环语句中，用来跳出循环语句。</p><p><strong>continue</strong> 关键字的作用是跳过循环体中剩余的语句执行下一次循环。</p>        <h3 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a>数组</h3>      <p>语法：</p><pre><code>数据类型[ ] 数组名;   //或者: 数据类型 数组名[ ];</code></pre><p>数组名为任意合法的变量名，如：</p><pre><code>int ages[];      //存放年龄的数组，类型为整型char symbol[];   //存放符号的数组，类型为字符型String [] name;  //存放名称的数组，类型为字符串型</code></pre><p>声明数组后，需要为数组分配空间，也就是定义多大的数组。</p><p>语法：</p><pre><code>数组名 = new  数据类型 [ 数组长度 ];</code></pre><p>数组长度就是数组最多可存放元素的个数。可以在数组声明的时候初始化数组，或者在声明时就为它分配好空间，这样就不用再为数组分配空间。</p><p>语法：</p><pre><code>int[] ages = &#123;12,18,9,33,45,60&#125;; //声明并初始化了一个整型数组，它有6个元素char[] symbol = new char[10] //声明并分配了一个长度为10的char型数组</code></pre><p>分配空间后就可以向数组中放数据了，数组中元素都是通过下标来访问的。 如：</p><pre><code>ages[0]=12;</code></pre><p>Java 中可以将一个数组赋值给另一个数组，如：</p><pre><code>int [] a1 = &#123;1,2,3&#125;;int [] a2;a2 = a1;</code></pre><p>这里只是复制了一个引用，即 a2 和 a1 是相同数组的不同名称。a2的值变化，a1的值也会变</p><p><strong>数组遍历：</strong></p><pre><code>int [] ages = &#123;12, 18, 9, 33, 45, 60&#125;;for(int i = 0; i &lt; ages.length; i++)&#123; //ages.length是获取数组的长度    System.out.println(&quot;数组中第&quot;+(i+1)+&quot;个元素是 &quot;+ages[i]); //数组下标是从零开始，一定要注意&#125;</code></pre><p>注意：</p><ul><li>数组下标从 0 开始。所以数组的下标范围是 0 至 数组长度 -1。</li><li>数组不能越界访问，否则会报错。</li></ul><p>for 语句在数组内可以使用特殊简化版本，在遍历数组、集合时，foreach 更简单便捷。从英文字面意思理解 foreach 也就是“ for 每一个”的意思。</p><p>语法：</p><pre><code>for(元素类型 元素变量:遍历对象)&#123;    执行的代码&#125;</code></pre>        <h3 id="二维数组"   >          <a href="#二维数组" class="heading-link"><i class="fas fa-link"></i></a>二维数组</h3>      <p>语法：</p><pre><code>数据类型 [][] 数组名 = new 数据类型[行的个数][列的个数];//或者数据类型 [][] 数组名;数组名 = new 数据类型[行的个数][列的个数];//也可以数据类型 [][] 数组名 = &#123;&#123;第一行值1,第一行值2,...&#125;&#123;第二行值1,第二行值2,...&#125;...&#125;</code></pre><p>二维数组的赋值和访问，跟一维数组类似，可以通过下标来逐个赋值和访问，注意索引从 0 开始</p><pre><code>数组名[行的索引][列的索引] = 值;</code></pre>        <h2 id="面向对象"   >          <a href="#面向对象" class="heading-link"><i class="fas fa-link"></i></a>面向对象</h2>              <h3 id="类"   >          <a href="#类" class="heading-link"><i class="fas fa-link"></i></a>类</h3>      <p>类的定义：</p><ul><li>类是相同或相似对象的一种抽象，是对象的一个模板，它描述一类对象的行为和状态。</li><li>类是具有相同属性和方法（行为）的对象的集合</li></ul><p>类就是对象的抽象（或者模板），对象就是类的具体（或者实例）。</p><p>类由属性和方法两部分组成。</p><p><strong>定义一个类</strong> ，主要有三个步骤：</p><ul><li><p>定义类名，用于区分不同的类。如下代码中 public class 后面跟的就是类名。class是声明类的关键字，类名后面跟上大括号，大括号里面就是类的一些信息。public 为权限修饰符。</p><pre><code>  public class 类名 &#123;      //定义属性部分（成员变量）      属性1的类型 属性1;      属性2的类型 属性2;      ...      //定义方法部分      方法1      方法2      ...  &#125;</code></pre></li><li><p>编写类的属性。对象有什么，需要通过属性来表示。属性的定义是写在类名后面的大括号里，在定义属性时，要明确属性的类型。在一个类当中可以写一个或多个属性。当然也可以不定义属性。</p></li><li><p>编写类的方法。方法也是写在大括号里面。可以定义一个方法或多个方法，当然也可以不定义方法。</p></li></ul><p>一个类可以包含以下<strong>类型变量</strong> ：</p><ul><li>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li>类变量：也叫静态变量，类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li></ul><p>注：在使用时注意，成员变量可以被本类的所有方法所使用，同时可以被与本类有关的其他类所使用。而局部变量只能在当前的方法中使用。</p><p><strong>作用域</strong></p><p>作用域可以简单地理解为变量的生存期或者作用范围，也就是变量从定义开始到什么时候消亡。</p><ul><li><p>局部变量的作用域仅限于定义它的方法内。而成员变量的作用域在整个类内部都是可见的。</p></li><li><p>同时在相同的方法中，不能有同名的局部变量；在不同的方法中，可以有同名的局部变量。</p></li><li><p>成员变量和局部变量同名时，局部变量具有更高的优先级。 </p>        <h3 id="对象"   >          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a>对象</h3>      <p>创建对象的语法如下：</p><p>  类名 对象名 = new 类名();</p></li></ul><p>定义类的时候不会为类开辟内存空间，但是一旦创建了对象，系统就会在内存中为对象开辟一块空间，用来存放对象的属性值和方法。</p><p>创建对象后，我们就要使用对象了，使用对象无非就是对属性和方法进行操作和调用。</p><p>语法如下：</p><pre><code>    //引用对象属性    对象名.属性    //引用对象方法    对象名.方法</code></pre>        <h3 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a>构造方法</h3>      <p>在面向对象中有一个非常重要的知识点，就是构造方法。每个类都有构造方法，在创建该类的对象的时候他们将被调用，如果没有定义构造方法，Java 编译器会提供一个默认构造方法。 创建一个对象的时候，至少调用一个构造方法。比如在新建一个对象 new Object()，括号中没有任何参数，代表调用一个无参构造方法（默认构造方法就是一个无参构造方法）。构造方法的名称必须与类名相同，一个类可以定义多个构造方法。</p><p>构造方法的具体内容：</p><ul><li><p>构造方法的名称与类名相同，且没有返回值。它的语法格式如下：</p><pre><code>  //与类同名，可以指定参数，没有返回值  public 构造方法名()&#123;  //初始化代码  &#125;</code></pre><p>  下面是一个构造方法的例子：</p><pre><code>  public class People&#123;      //无参构造方法      public People()&#123;      &#125;      //有一个参数的构造方法      public People(int age)&#123;      &#125;  &#125;</code></pre><p>  又例如具体的构造方法：</p><pre><code>  public class People &#123;      //属性（成员变量）有什么          double height;     //身高          int age;           //年龄          int sex;       //性别，0为男性，非0为女性      //构造方法，初始化了所有属性      public People(double h, int a, int s)&#123;          height = h;          age = a;          sex = s;      &#125;  &#125;</code></pre><p>  //创建对象，调用我们自己定义的有参构造方法<br>  People XiaoMing = new People(168, 21, 1);</p><p>  上面的例子中通过 new 关键字将类实例化成对象，而 new 后面跟的就是构造方法。于是可以知道 <strong>new + 构造方法</strong> 可以创建一个新的对象。</p></li><li><p>如果在定义类的时候没有写构造方法，系统会默认生成一个无参构造方法，这个构造方法什么也不会做。</p></li><li><p>当有指定的构造方法时，系统不会再添加无参构造方法了。</p></li><li><p>构造方法的重载：<strong>方法名相同，但参数不同</strong> 的多个方法，调用时会自动根据不同的参数选择相应的方法。</p></li></ul>        <h3 id="static"   >          <a href="#static" class="heading-link"><i class="fas fa-link"></i></a>static</h3>              <h4 id="静态成员"   >          <a href="#静态成员" class="heading-link"><i class="fas fa-link"></i></a>静态成员</h4>      <p>Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。</p>        <h4 id="静态方法"   >          <a href="#静态方法" class="heading-link"><i class="fas fa-link"></i></a>静态方法</h4>      <p>被 static 修饰的方法是静态方法，静态方法不依赖于对象，不需要将类实例化便可以调用，由于不实例化也可以调用，所以不能有 this，也不能访问非静态成员变量和非静态方法。但是非静态成员变量和非静态方法可以访问静态方法。</p>        <h3 id="final"   >          <a href="#final" class="heading-link"><i class="fas fa-link"></i></a>final</h3>      <p>final 关键字可以修饰类、方法、属性和变量</p><ul><li>final 修饰类，则该类不允许被继承，为最终类</li><li>final 修饰方法，则该方法不允许被覆盖（重写）</li><li>final 修饰属性：则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）</li><li>final 修饰变量，则该变量的值只能赋一次值，即常量</li></ul>        <h3 id="权限修饰符"   >          <a href="#权限修饰符" class="heading-link"><i class="fas fa-link"></i></a>权限修饰符</h3>      <p>权限修饰符可以用来修饰属性和方法的访问范围。</p><p>访问范围<br><img src="https://doc.shiyanlou.com/document-uid79144labid1072timestamp1434941168916.png"></p><p>默认 是什么修饰符都不加，默认在当前类中和同一包下都可以访问和使用。</p>        <h3 id="封装"   >          <a href="#封装" class="heading-link"><i class="fas fa-link"></i></a>封装</h3>      <p>封装，即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别</p><ul><li>只能通过规定的方法访问数据。</li><li>隐藏类的实例细节，方便修改和实现。</li></ul><p>如何去实现类的封装呢？</p><ul><li>修改属性的可见性，在属性的前面添加修饰符 (private)</li><li>对每个值属性提供对外的公共方法访问，如创建 getter/setter（取值和赋值）方法，用于对私有属性的访问</li><li>在 getter/setter 方法里加入属性的控制语句，例如我们可以加一个判断语句，对于非法输入给予否定。</li></ul><p>封装的步骤</p><p>如果我们没有在属性前面添加任何修饰符，我们通过对象就可以直接对属性值进行修改，没有体现封装的特性。这在许多程序设计中都是不安全的，所以我们需要利用封装，来改进我们的代码。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;菜鸡的java学习之旅&quot;   &gt;
          &lt;a href=&quot;#菜鸡的java学习之旅&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;菜鸡的java学习之旅&lt;/h2&gt;
      &lt;p&gt;复习java，顺便写一下java笔记&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>大二下学期开始啦</title>
    <link href="http://example.com/2021/03/05/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://example.com/2021/03/05/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E5%BC%80%E5%A7%8B/</id>
    <published>2021-03-05T12:47:20.782Z</published>
    <updated>2021-03-21T07:58:22.637Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="关于大二上学期的总结以及下学期的计划"   >          <a href="#关于大二上学期的总结以及下学期的计划" class="heading-link"><i class="fas fa-link"></i></a>关于大二上学期的总结以及下学期的计划</h1>      <p>进入三月，虽然早就入春，但还是很冷！趁着周五，以及不想再继续看学习视频，再看了看自己三个月没更的博客，于是滚来写博客了。</p><a id="more"></a>        <h2 id="上学期的总结"   >          <a href="#上学期的总结" class="heading-link"><i class="fas fa-link"></i></a>上学期的总结</h2>      <p>首先来说，最好的就是没有挂科吧！（经过期末无比艰辛的学习）。上学期的关键词大概是：忙，熬夜，实验报告，焦虑。首先就是无比多的课程，让人完全没有时间做想做的事情，虽然也趁着课比较少的11月学习了前端知识，做了一个项目，在这其中穿插着无数的实验报告。然后就是考试和永远上不完的课，写不完的实验报告，以及令人充实却又劳累的期末复习。就只有一个感觉：忙！忙！忙！期末的时候被催着选定项目，在复习如此繁重的情况下，简直令人崩溃。。。</p>        <h4 id="总结："   >          <a href="#总结：" class="heading-link"><i class="fas fa-link"></i></a>总结：</h4>      <ul><li>学习了前端知识</li><li>做了一个网页设计大赛的项目（结果出来了，没获奖🙁）</li><li>没有挂科</li></ul>        <h2 id="寒假"   >          <a href="#寒假" class="heading-link"><i class="fas fa-link"></i></a>寒假</h2>      <p>首先是在学校留了几天，一个人住寝室的感觉没有想象中好。在学校的几天学习了网安方面的知识，（虽然当时已经不想学了）然后回家，休息了两天之后就开始了冬令营（网安方向），接触了一些之前没有学过的知识，感觉还是有很多收获的。<br>之后就开始了服创的项目。不过感觉之前学的太累了，，休息了半个月之后，开始做项目。前期基本就是一直看论文，找数据集，在做准备工作。过年期间，这次过年走了挺多亲戚的，也到其他地方玩了一下，感觉比往年好很多。比起宅在家里，出去走走也挺好的。</p>        <h2 id="下学期的计划"   >          <a href="#下学期的计划" class="heading-link"><i class="fas fa-link"></i></a>下学期的计划</h2>      <p>这学期的课少了很多，感觉轻松了很多，不过反而让人感觉有点不习惯，慢慢适应节奏。已经决定好不学网安方向了，目前比较感兴趣的是开发方向。再看看吧，感觉在网安方面也做了挺多了努力的，说的时候感觉没啥，现在写博客的时候突然感觉心里有点空，，，（这就是文字的力量？？）这学期的打算是，先做完服创的项目，然后看是要接着申报大创还是开始学习我感兴趣的东西，这个还不能确定。同时，学好专业课！不要挂科！</p>        <h4 id="规划"   >          <a href="#规划" class="heading-link"><i class="fas fa-link"></i></a>规划</h4>      <ul><li><p>把服创项目做完</p></li><li><p>学好专业课，不挂科</p></li><li><p>……</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;关于大二上学期的总结以及下学期的计划&quot;   &gt;
          &lt;a href=&quot;#关于大二上学期的总结以及下学期的计划&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;关于大二上学期的总结以及下学期的计划&lt;/h1&gt;
      &lt;p&gt;进入三月，虽然早就入春，但还是很冷！趁着周五，以及不想再继续看学习视频，再看了看自己三个月没更的博客，于是滚来写博客了。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>java环境配置教程</title>
    <link href="http://example.com/2020/12/03/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2020/12/03/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</id>
    <published>2020-12-03T11:28:24.382Z</published>
    <updated>2021-03-21T02:39:44.455Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>      <p>由于学习要用到brupsuite,但之前配置好的jdk14不行，所以重新下载了jdk1.8，在安装中遇到一些问题，在这里记录下来。</p><a id="more"></a>        <h2 id="下载"   >          <a href="#下载" class="heading-link"><i class="fas fa-link"></i></a>下载</h2>      <p>在官网下载<span class="exturl"><a class="exturl__link"   href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" >jdk</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，你可以选择不同的版本，我这里选择的是1.8版本。</p><p>由于我是Windows64位的电脑，所以选择的是红色框的那个，你可以根据你电脑的属性来选择应该下载哪儿。<br><img src="https://i.bmp.ovh/imgs/2020/12/ec401f3da4532772.png"><br>下载好后（速度可能会很慢，，），安装即可。注意记住安装路径，这对之后的环境的配置有很大的用处！</p>        <h2 id="环境配置"   >          <a href="#环境配置" class="heading-link"><i class="fas fa-link"></i></a>环境配置</h2>      <p>安装好后，右键单击 <strong>此电脑</strong> ，选择<strong>属性</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/a85bb7fb74a87611.png"><br>点击<strong>高级系统设置</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/f238ad76b2d4e6b1.png"><br>点击<strong>环境变量</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/8cb117d0caf34212.png"><br>在系统变量的下方，点击<strong>新建</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/f141264322b3d41f.png"><br>变量名：<strong>CLASSPATH</strong></p><p>变量值： <strong>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</strong>  (注意开始是.;)<br><img src="https://i.bmp.ovh/imgs/2020/12/d7d3f84dfc17d71a.png"><br>变量名： <strong>JAVA_HOME</strong></p><p>变量值：<strong>D:\java1\jdk8</strong>（此处请填你jdk安装的路径！）<br><img src="https://i.bmp.ovh/imgs/2020/12/ae496e9d67fac7c8.png"><br>双击<strong>PATH</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/08263be164b7196c.png"><br>将<strong>D:\java1\jdk8\bin、D:\java1\jdk8\jre\bin</strong> 分别添加进去(<strong>此处请填你jdk安装的路径！</strong>)（win7可以写做1条，win10写为两条）<br><img src="https://i.bmp.ovh/imgs/2020/12/6dbe4613552c5b96.png"><br>最后点击确定，就配置好了java环境。</p>        <h2 id="检验是否配置正确"   >          <a href="#检验是否配置正确" class="heading-link"><i class="fas fa-link"></i></a>检验是否配置正确</h2>      <p>win+r,输入cmd，进入命令行界面。输入java<br><img src="https://i.bmp.ovh/imgs/2020/12/d5991ed9e4686499.png"><br>输入javac<br><img src="https://i.bmp.ovh/imgs/2020/12/94c9fbeb764b2eeb.png"></p><p>输入java -version<br><img src="https://i.bmp.ovh/imgs/2020/12/c15e8f187a07d897.png"></p><p>如图所示，则java环境配置成功！！</p>        <h2 id="javac不是内部或外部命令，也不是可运行的程序-或批处理文件的细节问题"   >          <a href="#javac不是内部或外部命令，也不是可运行的程序-或批处理文件的细节问题" class="heading-link"><i class="fas fa-link"></i></a>javac不是内部或外部命令，也不是可运行的程序 或批处理文件的细节问题</h2>      <p>解决方法：</p><p>1、如果是按照上面的方法进行配置的，那么请检查你的jdk文件中的bin文件中，是否有<strong>javac.exe</strong>这个文件，如果没有，你需要重新下载jdk<br><img src="https://i.bmp.ovh/imgs/2020/12/189acd797bf730f1.png"></p><p>2、在设置变量时，不要使用相对定位，使用绝对定位<br>相对定位：%JAVA_HOME%\bin;<br>绝对定位：D:\java1\jdk8\bin;（你的jdk下载路径！！）</p><p>3、检查你是否将PATH变量中的两行写成了一行</p>        <h2 id="如何打开jar文件"   >          <a href="#如何打开jar文件" class="heading-link"><i class="fas fa-link"></i></a>如何打开jar文件</h2>      <p>1、打开cmd，将jar文件拖入其中<br>2、打开cmd，输入<strong>regedit</strong>注册表编辑器，找到<strong>HKEY_CLASSES_ROOT\jarfile\shell\open\command</strong>，（你可以在红框处直接搜索。<br><img src="https://i.bmp.ovh/imgs/2020/12/1d90a000103e362b.png"><br><img src="https://i.bmp.ovh/imgs/2020/12/777fd9c6934c59db.png"></p><p>双击，将红框中内容修改为”D:\java1\jdk8\bin\javaw.exe” -jar “%1” %*，注意！画红线处的地方为你的jdk下载路径。<br><img src="https://i.bmp.ovh/imgs/2020/12/ee2ee2cbf0afbb59.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;   &gt;
          &lt;a href=&quot;#前言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;前言&lt;/h2&gt;
      &lt;p&gt;由于学习要用到brupsuite,但之前配置好的jdk14不行，所以重新下载了jdk1.8，在安装中遇到一些问题，在这里记录下来。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年11月要结束了</title>
    <link href="http://example.com/2020/11/28/2020.11/"/>
    <id>http://example.com/2020/11/28/2020.11/</id>
    <published>2020-11-28T06:28:10.934Z</published>
    <updated>2021-03-21T02:40:39.450Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="2020年11月———大二上学期"   >          <a href="#2020年11月———大二上学期" class="heading-link"><i class="fas fa-link"></i></a>2020年11月———大二上学期</h2>      <p>   已经一个快一个月没有写博客了，这一个月干了些什么呢？<br>   <a id="more"></a></p><p>   首先成功进实验室了吧，感谢室友QDQ。然后参加了国信安的网页设计，在QDQ的鼓励下，让我不要瞻前顾后。确实我好像不喜欢在没有充分的准备下去做一些事，容易还没做的时候就先告诉自己不行。这得改啊！总之十分感谢QDQ，最后在她的鼓励下成功参赛，带着我开始了这个项目。</p><p>   之后就一直在做这个项目了，由于什么都不会，所以得从看网课开始，这属实是一件痛苦的事。每天去实验室就打开小破站开始看网课，终于天天看，夜夜看，在差不多22号的时候看完了吧。中间由于大物考试，停了一个星期，还好考试应该是能顺利通过的！！以后我的人生中就再也没有物理了呜呜呜！！！</p><p>   看完网课终于可以开始做啦！花了大概一个星期吧，把网站给写好了，emmmm，感觉不是很难，不过有很多细节没有处理好，特别是该死的定位，，，还有有QDQ，和她一起改到了12点过。QDQ，永远滴神！反正删删改改，网页最后是给做好了。</p><p>   11月是忙碌的一个月(可能也不是很忙，，)，但总之应该是有意义的，第一次写了一个网页，完成了一个项目。嗯，，，总之11月就这样过完了，接下来就是2020年的最后一个月了，希望可以保持11月这个学习的状态！冲冲冲！！！</p><p>   <img src="https://ftp.bmp.ovh/imgs/2020/11/748385bdcd96f2d2.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;2020年11月———大二上学期&quot;   &gt;
          &lt;a href=&quot;#2020年11月———大二上学期&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;2020年11月———大二上学期&lt;/h2&gt;
      &lt;p&gt;   已经一个快一个月没有写博客了，这一个月干了些什么呢？&lt;br&gt;</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>PTA练习总结</title>
    <link href="http://example.com/2020/11/05/PTA%E7%BB%83%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/11/05/PTA%E7%BB%83%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-05T13:29:40.972Z</published>
    <updated>2021-03-21T02:40:17.357Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="练习2-15-交错的加减运算"   >          <a href="#练习2-15-交错的加减运算" class="heading-link"><i class="fas fa-link"></i></a>练习2-15 交错的加减运算</h2>      <p>练习2-15 求简单交错序列前N项和 (15分)<br>本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + … 的前N项之和。</p><a id="more"></a><p>输入格式:</p><p>输入在一行中给出一个正整数N。</p><p>输出格式:</p><p>在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。</p><p>输入样例:</p><pre><code>10</code></pre><p>输出样例:</p><pre><code>sum = 0.819</code></pre><p>在做这个题中遇到的问题是，没有掌握到如何进行交错的加减运算，在搜索之后发现，需要在循环中加一个 x = -x 即可。（我太菜了，是个憨批）</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/2c44fa7e11871fae.png"></p>        <h2 id="习题2-6-在循环后进行清零"   >          <a href="#习题2-6-在循环后进行清零" class="heading-link"><i class="fas fa-link"></i></a>习题2-6 在循环后进行清零</h2>      <p>习题2-6 求阶乘序列前N项和 (15分)<br>本题要求编写程序，计算序列 1!+2!+3!+⋯ 的前N项之和。</p><p>输入格式:<br>输入在一行中给出一个不超过12的正整数N。</p><p>输出格式:<br>在一行中输出整数结果。</p><p>输入样例:</p><pre><code>5</code></pre><p>输出样例:</p><pre><code>153</code></pre><p>做这道题遇到的问题是，计算所得的数非常大，两个循环的思路是没有问题的，但关键在于，没有在第二个循环处将sum1的值再次变1。所以，只需要在第一个循环的内容加一个 sum1 = 1；且加在最前面即可。<br><img src="https://i.bmp.ovh/imgs/2020/11/a7f0bcbe56fc14f4.png"></p>        <h2 id="练习3-3-c语言变量的初始化赋值"   >          <a href="#练习3-3-c语言变量的初始化赋值" class="heading-link"><i class="fas fa-link"></i></a>练习3-3 c语言变量的初始化赋值</h2>      <p>在做练习3-3时，average的平均数算出来非常的大，在检查算法后发现并没有出错，最后发现是没有对sum进行初始化赋值。在C语言中，如果没有对一个变量进行赋值，则为给它随机分配一个值，这就是为什么average非常大的原因，因为给sum随机赋了一个非常的值。</p><p><img src="https://i.bmp.ovh/imgs/2020/11/89097591beedba30.png"></p>        <h2 id="习题3-5-三角形的判断"   >          <a href="#习题3-5-三角形的判断" class="heading-link"><i class="fas fa-link"></i></a>习题3-5 三角形的判断</h2>      <p>C语言中，三角形判断的方式</p><pre><code>if(a&lt;(b+c) &amp;&amp; b&lt;(a+c) &amp;&amp; c&lt;(a+b))</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;练习2-15-交错的加减运算&quot;   &gt;
          &lt;a href=&quot;#练习2-15-交错的加减运算&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;练习2-15 交错的加减运算&lt;/h2&gt;
      &lt;p&gt;练习2-15 求简单交错序列前N项和 (15分)&lt;br&gt;本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + … 的前N项之和。&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="http://example.com/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>PTA练习2-12输出华氏-摄氏温度转换表</title>
    <link href="http://example.com/2020/10/23/PTA2-12/"/>
    <id>http://example.com/2020/10/23/PTA2-12/</id>
    <published>2020-10-23T11:21:04.976Z</published>
    <updated>2021-03-21T02:40:05.053Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="题目如下："   >          <a href="#题目如下：" class="heading-link"><i class="fas fa-link"></i></a>题目如下：</h2>      <p>请输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。</p><p>温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。</p><a id="more"></a><p>输入格式:<br>在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开。</p><p>输出格式:<br>第一行输出：”fahr celsius”</p><p>接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。</p><p>若输入的范围不合法，则输出”Invalid.”</p><p>输入样例1:</p><blockquote><p>32 35</p></blockquote><p>输出样例1:</p><blockquote><p>fahr celsius</p></blockquote><blockquote><p>32   0.0</p></blockquote><blockquote><p>34   1.1</p></blockquote><p>输入样例2:</p><blockquote><p>40 30</p></blockquote><p>输出样例2:</p><blockquote><p>Invalid.</p></blockquote>        <h2 id="代码如下"   >          <a href="#代码如下" class="heading-link"><i class="fas fa-link"></i></a>代码如下:</h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    double celsius;</span><br><span class="line">    int lower;</span><br><span class="line">    int upper;</span><br><span class="line">    int fahr;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;lower,&amp;upper);</span><br><span class="line">    if(lower &lt;&#x3D; upper &amp;&amp; 0&lt;lower &amp;&amp; lower&lt;&#x3D;100 &amp;&amp; upper&lt;&#x3D;100 &amp;&amp; upper&gt;0)&#123;</span><br><span class="line">    printf(&quot;fahr celsius\n&quot;);</span><br><span class="line">    for(fahr&#x3D;lower;fahr&lt;&#x3D;upper;fahr&#x3D;fahr + 2)&#123;</span><br><span class="line">        celsius &#x3D; 5.0 * (fahr - 32)&#x2F;9.0 ;  </span><br><span class="line">        printf(&quot;%d%6.1f\n&quot;, fahr,celsius);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        printf(&quot;Invalid.&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="https://i.bmp.ovh/imgs/2020/11/747b6671bbad4193.png"></p>        <h2 id="知识点："   >          <a href="#知识点：" class="heading-link"><i class="fas fa-link"></i></a>知识点：</h2>      <p>1.C语言如果控制字符宽度和保留指定的小数数位<br>  在输出时：**%字符宽度.小数数位f**</p><p>2   a.c: In function ‘main’:<br>a.c:9:5: warning: ignoring return value of ‘scanf’, declared with attribute warn_unused_result [-Wunused-result]<br>     (void)scanf(“%d %d”, &amp;lower,&amp;upper);<br>     ^<del>~</del></p><p>当报出如下错误时，不一定是输入有问题，有可能是输出，算法有问题。所以此时你可以对你的所有代码进行检查。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目如下：&quot;   &gt;
          &lt;a href=&quot;#题目如下：&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;题目如下：&lt;/h2&gt;
      &lt;p&gt;请输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。&lt;/p&gt;
&lt;p&gt;温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="http://example.com/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个博客</title>
    <link href="http://example.com/2020/09/28/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2020/09/28/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-09-28T09:00:04.784Z</published>
    <updated>2021-03-21T02:27:27.954Z</updated>
    
    <content type="html"><![CDATA[<p>我的第一个博客</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的第一个博客&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
