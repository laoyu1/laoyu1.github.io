<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laoyu&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-27T14:19:46.244Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>laoyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大三上</title>
    <link href="http://example.com/2021/09/26/%E5%A4%A7%E4%B8%89%E4%B8%8A/"/>
    <id>http://example.com/2021/09/26/%E5%A4%A7%E4%B8%89%E4%B8%8A/</id>
    <published>2021-09-26T13:56:08.049Z</published>
    <updated>2021-09-27T14:19:46.244Z</updated>
    
    <content type="html"><![CDATA[<p>大三上学期开始一个月了，把GitHub升级，并且给域名续费后，我又滚来写博客了，也就一学期一次的频率呢😅</p><a id="more"></a>        <h2 id="大二下总结"   >          <a href="#大二下总结" class="heading-link"><i class="fas fa-link"></i></a>大二下总结</h2>      <p>看看了大二下学期刚开始给自己订的小目标，两个都完成了，服创做完了，拿了国三。专业课也不能说是学好了吧，但是没挂科。</p>        <h3 id="项目"   >          <a href="#项目" class="heading-link"><i class="fas fa-link"></i></a>项目</h3>      <p>大二下学期的第一个关键词就是：项目。感觉就是整个人都被项目给围起来了，做项目，写文档，做PPT，改文档，改PPT。总之就是一直在忙项目的事吧，到现在已经对项目PTSD了，，</p>        <h3 id="压力"   >          <a href="#压力" class="heading-link"><i class="fas fa-link"></i></a>压力</h3>      <p>和项目一起来的就是，，压力。最开始压力真的很大，感觉随时要被压垮，自己又是队长，如果不主动去管事情的话，也没人愿意去行动，所以责任对应的是压力。遇到不给力的队友的压力，比赛前项目还没做好的压力，各种各样的折磨，真的累死。</p>        <h3 id="焦虑"   >          <a href="#焦虑" class="heading-link"><i class="fas fa-link"></i></a>焦虑</h3>      <p>焦虑，，为项目做不完焦虑，为考试焦虑。学会调节情绪很重要！！！</p>        <h3 id="收获"   >          <a href="#收获" class="heading-link"><i class="fas fa-link"></i></a>收获</h3>      <p>”做三四月的事，在七八月自有答案”。虽然辛苦，但坚持下来了，结果也很好。两个国三，一个省三，一个省级大创，一等奖学金。努力会有回报，很好！</p>        <h2 id="暑假"   >          <a href="#暑假" class="heading-link"><i class="fas fa-link"></i></a>暑假</h2>      <p>玩的很开心哈哈哈哈哈</p>        <h2 id="大三上"   >          <a href="#大三上" class="heading-link"><i class="fas fa-link"></i></a>大三上</h2>      <p>都说大三是一个分水岭，emmmm，也许吧。其实有一点迷茫，考研，考公，找工作，到底该干什么呢，，但是感觉到很轻松，就是可能没事干吧哈哈哈哈，感觉心情很放松，说不来的感觉，很喜欢现在的状态，嘻嘻哈哈像个傻瓜。。。</p>        <h3 id="规划"   >          <a href="#规划" class="heading-link"><i class="fas fa-link"></i></a>规划</h3>      <p>其实我觉得计划可能会赶不上变化，，，</p><ul><li>过六级（不太可能就是说）</li><li>不挂科</li><li>看书（看了半本了，继续坚持！！）</li><li>..(想到再补充)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;大三上学期开始一个月了，把GitHub升级，并且给域名续费后，我又滚来写博客了，也就一学期一次的频率呢😅&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个项目</title>
    <link href="http://example.com/2021/04/26/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/04/26/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-04-26T12:26:01.721Z</published>
    <updated>2021-09-26T13:55:22.331Z</updated>
    
    <content type="html"><![CDATA[<p>友友们大家好呀！又是一个月没写博客了呢，，😅<br>  项目已经差不多做完啦，来记录一下。</p><a id="more"></a>        <h2 id="第一个项目"   >          <a href="#第一个项目" class="heading-link"><i class="fas fa-link"></i></a>第一个项目</h2>              <h4 id="菜鸡的开始阶段"   >          <a href="#菜鸡的开始阶段" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的开始阶段</h4>      <p>这个项目是从寒假开始，想不到寒假刚开始几天就被拖进了这个项目里面，快乐寒假没了一半，还莫名其妙当上队长🙃。总之就这样开始了吧。最开始真是痛苦啊，简直就啥也不会，啥也不是，两天一次组会，天天看论文（发现了一个免费看的论文的方式嘻嘻），疯狂找数据集。。。就是干了这些吧，也没多做些啥。</p>        <h4 id="菜鸡的中途"   >          <a href="#菜鸡的中途" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的中途</h4>      <p>然后就，，开学了。。。最开始怎么说呢，对这个项目是有点逃避的，感觉啥也不会，一搞项目就开始焦虑，每天都在想项目做不完不会有事儿吧，，于是就躲，，，然而有些事是躲不掉的。就开始隔两天找老师的阶段，最开始对老师让做的很多事情都不理解，也不会。不过，在结束写文档的时候，发现老师让做的每一件事都是有用的。就这样，跟着老师指导的方向慢慢前进。感觉真正做很多事的阶段就是3月到4月中旬的样子吧，这段时间做了很多很多事情。</p>        <h4 id="菜鸡的结束阶段"   >          <a href="#菜鸡的结束阶段" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的结束阶段</h4>      <p>项目终于要做完了，最后就报名各类比赛，写写文档，录录视频，做PPT，答辩。芜湖✈</p>        <h4 id="菜鸡的心路历程"   >          <a href="#菜鸡的心路历程" class="heading-link"><i class="fas fa-link"></i></a>菜鸡的心路历程</h4>      <p>做项目真的很不容易啊！特别是开始的时候😭。而且可能是我的一个缺点吧，就老是很焦虑，有段时间都睡不着了，然后就慢慢开始分析焦虑的原因，把原因想清楚了去解决这样好一点，睡是能睡了，但还是有个焦虑的感觉在心里。我也不知道为啥，可能看看心理方面的书会有答案（文化沙漠）。现在这个项目终于到结束了，项目导致都没啥时间学习专业知识（也许是借口🙄）。反正学习是落下了，最近几天也不想学习，，这样不行啊，得开始学习专业知识了！！！</p>        <h4 id="后续"   >          <a href="#后续" class="heading-link"><i class="fas fa-link"></i></a>后续</h4>      <p>无语了家人们，不会真以为一个比赛完了就完事儿了吧，，，</p>        <h4 id="最后了吧"   >          <a href="#最后了吧" class="heading-link"><i class="fas fa-link"></i></a>最后了吧</h4>      <p>家人好，我又来了，等着大创结题就彻底结束啦！上次更新是在5月31号呢，今天是9月26，隔得有够久呢，，，在暑假的时候进行了最后一个比赛的答辩，获得了国三的好成绩！（我觉得很好了），现在就等大创结题啦！🤭</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;友友们大家好呀！又是一个月没写博客了呢，，😅&lt;br&gt;  项目已经差不多做完啦，来记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>java笔记</title>
    <link href="http://example.com/2021/03/20/java%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/03/20/java%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-20T08:10:13.447Z</published>
    <updated>2021-04-27T12:17:54.155Z</updated>
    
    <content type="html"><![CDATA[<p>复习java，顺便写一下java笔记</p><a id="more"></a>        <h2 id="基础知识"   >          <a href="#基础知识" class="heading-link"><i class="fas fa-link"></i></a>基础知识</h2>              <h3 id="常量"   >          <a href="#常量" class="heading-link"><i class="fas fa-link"></i></a>常量</h3>      <p>常量是不能被修改的。</p><p>java中<strong>final</strong>关键字可以用于声明属性（常量），方法和类。在变量前面添加关键词final即可声明一个常量。<strong>常量名必须大写。</strong></p><p>语法格式：</p><pre><code>    final 数据类型 常量名 = 值；</code></pre><p>例如：</p><pre><code>    final double PI = 10.2；</code></pre>        <h3 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a>数据类型</h3>              <h4 id="整数"   >          <a href="#整数" class="heading-link"><i class="fas fa-link"></i></a>整数</h4>      <p>byte、short、int、long 四种基本数据类型表示整数，需要注意的是 long 类型，使用 long 修饰的变量需要在数值后面加上 <strong>L</strong> 或者 <strong>l</strong></p>        <h4 id="浮点数"   >          <a href="#浮点数" class="heading-link"><i class="fas fa-link"></i></a>浮点数</h4>      <p>float 和 double 类型表示浮点数，即可以表示小数部分。需要注意的是 float 类型的数值后面需要加上 F 或者 f，否则会被当成 double 类型处理。double 类型的数值可以加上 D 或 d，也可以不加。</p>        <h4 id="char-类型"   >          <a href="#char-类型" class="heading-link"><i class="fas fa-link"></i></a>char 类型</h4>      <p>char 类型用于表示单个字符。需要将字符用单引号括起来</p><pre><code>char a = &#39;a&#39;</code></pre><p>char 可以和整数互相转换</p><pre><code>char a = 97。 </code></pre><p>也可以用十六进制表示</p><pre><code>char a = &#39;\u0061&#39;。</code></pre>        <h4 id="boolean-类型"   >          <a href="#boolean-类型" class="heading-link"><i class="fas fa-link"></i></a>boolean 类型</h4>      <p>boolean 类型（布尔类型）用于表示真值 true或者假值 false，Java 中布尔值不能和整数类型或者其它类型互相转换。</p>        <h4 id="String"   >          <a href="#String" class="heading-link"><i class="fas fa-link"></i></a>String</h4>      <p>Java 中使用 String 类来定义一个字符串，字符串是常量，它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。</p><p>String 对象的初始化格式有如下两种：</p><pre><code>String s0 = &quot;abc&quot;;String s1 = new String(&quot;abd&quot;);</code></pre><p>String 类具有丰富的方法，比如计算字符串的长度、连接字符串、比较字符串、提取字符串等等。</p>        <h5 id="计算字符串长度"   >          <a href="#计算字符串长度" class="heading-link"><i class="fas fa-link"></i></a>计算字符串长度</h5>      <p>length() 方法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;方法原型</span><br><span class="line">public int length()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用方法：字符串标识符.length(); 返回一个 int 类型的整数（字符串中字符数，中文字符也是一个字符）。例如：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 &#x3D; &quot;abc&quot;;</span><br><span class="line">String s2 &#x3D; &quot;Java语言&quot;;</span><br><span class="line">int len1 &#x3D; s1.length();</span><br><span class="line">int len2 &#x3D; s2.length();</span><br></pre></td></tr></table></div></figure><p>则变量 len1 的值是 3，变量 len2 的值是 6。</p>        <h5 id="字符串比较"   >          <a href="#字符串比较" class="heading-link"><i class="fas fa-link"></i></a>字符串比较</h5>      <p>equals() 方法，该方法的作用是判断两个字符串对象的内容是否相同。如果相同则返回 true，否则返回 false。</p><p>equals() 方法比较是从第一字符开始，一个字符一个字符依次比较。</p><p>equalsIgnoreCase() 方法，其用法与 equals() 一致，不过它会忽视大小写。</p><p>而使用 “==” 比较的是两个对象在内存中存储的地址是否一样。</p>        <h5 id="字符串连接"   >          <a href="#字符串连接" class="heading-link"><i class="fas fa-link"></i></a>字符串连接</h5>      <p>字符串连接有两种方法：</p><ul><li>使用 +  比如 String s = “Hello “ + “World!”。而且使用 + 进行连接，不仅可以连接字符串，也可以连接其他类型。但是要求进行连接时至少有一个参与连接的内容是字符串类型。</li><li>使用 String 类的 concat() 方法。<figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a &#x3D; &quot;avx&quot;;</span><br><span class="line">String b &#x3D; &quot; w &quot;;</span><br><span class="line">System.out.println(a.concat(b));</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a>运算符</h3>              <h4 id="算术运算符"   >          <a href="#算术运算符" class="heading-link"><i class="fas fa-link"></i></a>算术运算符</h4>      <p>自增 (++) 和自减 (–) 运算符有两种写法：前缀 <strong>（++i,–i）</strong> 和后缀 <strong>（i++,i–）</strong>。</p><p>前缀自增自减法 (++i,–i): 先进行自增或者自减运算，再进行表达式运算。(++i ：是先把i+1，然后再拿出来使用；)</p><p>后缀自增自减法 (i++,i–): 先进行表达式运算，再进行自增或者自减运算(i++：是先把i拿出来使用，然后再+1；)</p>        <h4 id="位运算符"   >          <a href="#位运算符" class="heading-link"><i class="fas fa-link"></i></a>位运算符</h4>      <ul><li><p>&amp;    按位与    如果相对应位都是 1，则结果为 1，否则为 0</p></li><li><p>丨 按位或     如果相对应位都是 0，则结果为 0，否则为 1</p></li><li><p>^    按位异或 如果相对应位值相同，则结果为 0，否则为 1</p></li><li><p>~    按位补    翻转操作数的每一位，即 0 变成 1，1 变成 0</p></li><li><p>&lt;&lt;  左移  左边最高位丢弃，右边补齐0</p></li><li><p><strong>&gt;&gt;</strong> 右移 最高位是0，左边补齐0；最高位是1，左边补齐1</p></li><li><p><strong>&gt;&gt;&gt;</strong> 无符号右移 无论最高位是0还是1，左边补齐0</p></li></ul>        <h4 id="逻辑运算符"   >          <a href="#逻辑运算符" class="heading-link"><i class="fas fa-link"></i></a>逻辑运算符</h4>      <p>逻辑运算符是通过运算符将操作数或等式进行逻辑判断的语句。</p><p>表格中的例子中，假设布尔变量 a 为真（true），变量 b 为假（false）：</p><p>&amp;&amp; 或 &amp;    与    当且仅当两个操作数都为真，条件才为真</p><pre><code>双目运算符    (a &amp;&amp; b) 或 (a &amp; b) 为假</code></pre><p>|| 或 |    或    两个操作数任何一个为真，条件为真</p><pre><code>双目运算符    （a || b) 或 (a | b) 为真</code></pre><p>!    非    用来反转操作数的逻辑状态。如果条件为真，则逻辑非运算符将得到假</p><pre><code>单目运算符    （!a）为假</code></pre><p>^    异或    如果两个操作数逻辑相同，则结果为假，否则为真</p><pre><code>双目运算符    (a ^ b) 为真</code></pre><p>&amp;&amp; 与 || 是具有<strong>短路性质</strong>，当按优先级顺序计算到当前表达式时，表达式的结果可以确定整个表达式的结果时，便不会继续向后进行判断和计算，而直接返回结果。</p>        <h4 id="关系运算符"   >          <a href="#关系运算符" class="heading-link"><i class="fas fa-link"></i></a>关系运算符</h4>      <p>== ，！=，&lt;,&gt;&lt;=,&gt;=</p><p>关系运算符生成的是一个 <strong>boolean（布尔）</strong> 结果，它们计算的是操作数的值之间的关系。如果关系是真实的，结果为 true（真），否则，结果为 false（假）。</p><p>Java 还有唯一的一个三目运算符 <strong>?:</strong>  。</p><p>语法格式：</p><pre><code>布尔表达式 ？表达式 1 : 表达式 2;</code></pre><p>运算过程：如果布尔表达式的值为 true，则返回表达式 1的值，否则返回表达式 2的值。</p><p>注意：</p><ul><li><p>== 和 != 适用于所有的基本数据类型，其他关系运算符不适用于 boolean，因为 boolean 值只有 true 和 false，比较没有任何意义。</p></li><li><p>== 和 != 也适用于所有对象，可以比较对象的引用是否相同。</p></li></ul>        <h3 id="关键字"   >          <a href="#关键字" class="heading-link"><i class="fas fa-link"></i></a>关键字</h3>      <p>Java 的关键字对 Java 的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名。</p>        <h3 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a>方法</h3>      <p>Java 中的方法，可以将其看成一个功能的集合，它们是为了解决特定问题的代码组合。</p><p>方法的定义语法：</p><pre><code>访问修饰符 返回值类型 方法名(参数列表) &#123;    方法体&#125;</code></pre><p>在上面的语法说明中：</p><p><strong>访问修饰符：</strong> 代表方法允许被访问的权限范围，可以是 public、protected、private 或者省略（default）。</p><p><strong>返回值类型：</strong> 方法返回值的类型，如果方法不返回任何值，则返回值类型指定为 void （代表无类型）；如果方法具有返回值，则需要指定返回值的类型，并且在方法体中使用 return 语句返回值。</p><p><strong>方法名：</strong> 是方法的名字，必须使用合法的标识符。</p><p><strong>参数列表：</strong> 是传递给方法的参数列表，参数可以有多个，多个参数间以逗号隔开，每个参数由参数类型和参数名组成，以空格隔开。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p><p><strong>方法体：</strong> 方法体包含具体的语句，定义该方法的功能。</p><p>当方法定义好之后，需要调用才可以生效，我们可以通过 main 方法（main 方法是 Java 程序的入口，所以需要用它来调用）来调用它。</p>        <h3 id="方法重载"   >          <a href="#方法重载" class="heading-link"><i class="fas fa-link"></i></a>方法重载</h3>      <p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。方法重载一般用于创建一组任务相似但是参数不同的方法。</p><p>方法重载有以下几种规则：</p><ul><li>方法中的参数列表必须不同。比如：参数个数不同或者参数类型不同。</li><li>重载的方法中允许抛出不同的异常</li><li>可以有不同的返回值类型，但是参数列表必须不同。</li><li>可以有不同的访问修饰符。</li></ul>        <h3 id="方法重写"   >          <a href="#方法重写" class="heading-link"><i class="fas fa-link"></i></a>方法重写</h3>      <p>子类可以继承父类的方法，但如果子类对父类的方法不满意，想在里面加入适合自己的一些操作时，就需要将方法进行重写。并且子类在调用方法中，优先调用子类的方法。</p><p>重写的方法一定要与原父类的方法语法保持一致，比如返回值类型，参数类型及个数，和方法名都必须一致。</p>        <h3 id="if语句"   >          <a href="#if语句" class="heading-link"><i class="fas fa-link"></i></a>if语句</h3>      <p>多重 if 语句，在条件 1 不满足的情况下，才会进行条件 2 的判断，以此向下；当前面的条件均不成立时，最终执行 else 块内的代码。</p><p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if(条件1)&#123;</span><br><span class="line">    代码块1</span><br><span class="line">&#125;</span><br><span class="line">else if(条件2)&#123;</span><br><span class="line">    代码块2</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else &#123;</span><br><span class="line">    代码块n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="switch语句"   >          <a href="#switch语句" class="heading-link"><i class="fas fa-link"></i></a>switch语句</h3>      <p>当需要对选项进行等值判断时，使用 switch 语句更加简洁明了。</p><p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line">    case 值1:</span><br><span class="line">        代码块1</span><br><span class="line">        break;</span><br><span class="line">    case 值2:</span><br><span class="line">        代码块2</span><br><span class="line">        break;</span><br><span class="line">    ...</span><br><span class="line">    default:</span><br><span class="line">        默认执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>当 switch 后表达式的值和 case 语句后的值相同时，从该位置开始向下执行，直到遇到 break 语句或者 switch 语句块结束；如果没有匹配的 case 语句则执行 default 块的代码。(defualt 块不是必须的，默认为空)</p>        <h3 id="while语句"   >          <a href="#while语句" class="heading-link"><i class="fas fa-link"></i></a>while语句</h3>      <p>while语法：</p><pre><code>while(条件)&#123;    代码块&#125;</code></pre><p>while 的执行过程是先判断，再执行。</p><p>判断 while 后面的条件是否成立 ( true or false )<br>当条件成立时，执行循环内的代码。</p>        <h3 id="do-while语句"   >          <a href="#do-while语句" class="heading-link"><i class="fas fa-link"></i></a>do-while语句</h3>      <p>do-while 语法：</p><pre><code>do&#123;    代码块&#125;while(条件);</code></pre><p>do-while 的执行过程是先执行一次，再循环判断 <strong>（所以循环内的代码至少会执行一次）</strong> 。</p><p>先执行一遍循环操作，然后判断循环条件是否成立。<br>如果条件成立，继续执行，直到循环条件不成立为止。</p>        <h3 id="for语句"   >          <a href="#for语句" class="heading-link"><i class="fas fa-link"></i></a>for语句</h3>      <p>for 语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(循环变量初始化①; 循环条件②; 循环变量值操作③)&#123;</span><br><span class="line">    循环操作④</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>for 相比 while 和 do-while 语句结构更加简洁易读，它的执行顺序：</p><ul><li><p>执行循环变量初始化部分（1），设置循环的初始状态，此部分在整个循环中只执行一次。</p></li><li><p>进行循环条件的判断（2），如果条件为 true，则执行循环体内代码（4）；如果为 false ，则直接退出循环。</p></li><li><p>执行循环变量值操作部分（3），对循环变量的值进行修改，然后进行下一次循环条件判断（2）。</p></li></ul><p>整个循环的流程可以简化为：</p><pre><code>(1) -&gt; [(2)-&gt;(4)-&gt;(3)] -&gt; [(2)-&gt;(4)-&gt;(3)] -&gt; ... =&gt; (2) 结果为 false, 退出循环。</code></pre>        <h3 id="跳转语句"   >          <a href="#跳转语句" class="heading-link"><i class="fas fa-link"></i></a>跳转语句</h3>      <p><strong>break</strong> 关键字经常用在条件和循环语句中，用来跳出循环语句。</p><p><strong>continue</strong> 关键字的作用是跳过循环体中剩余的语句执行下一次循环。</p>        <h3 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a>数组</h3>      <p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型[ ] 数组名;  </span><br><span class="line">&#x2F;&#x2F;或者: </span><br><span class="line">数据类型 数组名[ ];</span><br></pre></td></tr></table></div></figure><p>数组名为任意合法的变量名，如：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int ages[];      &#x2F;&#x2F;存放年龄的数组，类型为整型</span><br><span class="line">char symbol[];   &#x2F;&#x2F;存放符号的数组，类型为字符型</span><br><span class="line">String[] name;  &#x2F;&#x2F;存放名称的数组，类型为字符串型</span><br></pre></td></tr></table></div></figure><p>声明数组后，需要为数组分配空间，也就是定义多大的数组。</p><p>语法：</p><pre><code>数组名 = new  数据类型 [ 数组长度 ];</code></pre><p>数组长度就是数组最多可存放元素的个数。可以在数组声明的时候初始化数组，或者在声明时就为它分配好空间，这样就不用再为数组分配空间。</p><p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[] ages &#x3D; &#123;1,8,9,3,15,0&#125;;</span><br><span class="line">&#x2F;&#x2F;声明并初始化了一个整型数组，它有6个元素</span><br><span class="line"></span><br><span class="line">char[] symbol &#x3D; new char[10] </span><br><span class="line">&#x2F;&#x2F;声明并分配了一个长度为10的char型数组</span><br></pre></td></tr></table></div></figure><p>分配空间后就可以向数组中放数据了，数组中元素都是通过下标来访问的。 如：</p><pre><code>ages[0] = 12;</code></pre><p>Java 中可以将一个数组赋值给另一个数组，如：</p><pre><code>int[] a1 = &#123;1,2,3&#125;;int[] a2;a2 = a1;</code></pre><p>这里只是复制了一个引用，即 a2 和 a1 是相同数组的不同名称。a2的值变化，a1的值也会变</p><p><strong>数组遍历：</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int [] ages &#x3D; &#123;12, 18, 9, 33, 45, 60&#125;;</span><br><span class="line">for(int i &#x3D; 0; i &lt; ages.length; i++)&#123; </span><br><span class="line">    &#x2F;&#x2F;ages.length是获取数组的长度</span><br><span class="line">    </span><br><span class="line">    System.out.println(&quot;数组中第&quot;+(i+1)+&quot;个元素是 &quot;+ages[i]);</span><br><span class="line">    &#x2F;&#x2F;注意数组下标是从零开始</span><br></pre></td></tr></table></div></figure><p>注意：</p><ul><li>数组下标从 0 开始。所以数组的下标范围是 0 至 数组长度 -1(arr.length() - 1)。</li><li>数组不能越界访问，否则会报错。</li></ul><p>for 语句在数组内可以使用特殊简化版本，在遍历数组、集合时，foreach 更简单便捷。从英文字面意思理解 foreach 也就是“ for 每一个”的意思。</p><p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(元素类型 元素变量:遍历对象)&#123;</span><br><span class="line">    执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="二维数组"   >          <a href="#二维数组" class="heading-link"><i class="fas fa-link"></i></a>二维数组</h3>      <p>语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">数据类型[][] 数组名 &#x3D; new 数据类型[行的个数][列的个数];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">数据类型[][] 数组名;</span><br><span class="line">数组名 &#x3D; new 数据类型[行的个数][列的个数];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;也可以</span><br><span class="line">数据类型 [][] 数组名 &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">&#123;第一行值1,第一行值2,...&#125;</span><br><span class="line">&#123;第二行值1,第二行值2,...&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>二维数组的赋值和访问，跟一维数组类似，可以通过下标来逐个赋值和访问，注意索引从 0 开始</p><pre><code>数组名[行的索引][列的索引] = 值;</code></pre>        <h2 id="面向对象"   >          <a href="#面向对象" class="heading-link"><i class="fas fa-link"></i></a>面向对象</h2>              <h3 id="类"   >          <a href="#类" class="heading-link"><i class="fas fa-link"></i></a>类</h3>      <p>类的定义：</p><ul><li>类是相同或相似对象的一种抽象，是对象的一个模板，它描述一类对象的行为和状态。</li><li>类是具有相同属性和方法（行为）的对象的集合</li></ul><p>类就是对象的抽象（或者模板），对象就是类的具体（或者实例）。</p><p>类由属性和方法两部分组成。</p><p><strong>定义一个类</strong> </p><p>主要有三个步骤：</p><ul><li><p>定义类名，用于区分不同的类。如下代码中 public class 后面跟的就是类名。class是声明类的关键字，类名后面跟上大括号，大括号里面就是类的一些信息。public 为权限修饰符。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class 类名 &#123;</span><br><span class="line">    &#x2F;&#x2F;定义属性部分（成员变量）</span><br><span class="line">    属性1的类型 属性1;</span><br><span class="line">    属性2的类型 属性2;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;定义方法部分</span><br><span class="line">    方法1</span><br><span class="line">    方法2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>编写类的属性。对象有什么，需要通过属性来表示。属性的定义是写在类名后面的大括号里，在定义属性时，要明确属性的类型。在一个类当中可以写一个或多个属性。也可以不定义属性。</p></li><li><p>编写类的方法。方法也是写在大括号里面。可以定义一个方法或多个方法，也可以不定义方法。</p></li></ul><p>一个类可以包含以下<strong>类型变量</strong> ：</p><ul><li>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li>类变量：也叫静态变量，类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li></ul><p>注：在使用时注意，成员变量可以被本类的所有方法所使用，同时可以被与本类有关的其他类所使用。而局部变量只能在当前的方法中使用。</p><p><strong>作用域</strong></p><p>作用域可以简单地理解为变量的生存期或者作用范围，也就是变量从定义开始到什么时候消亡。</p><ul><li><p>局部变量的作用域仅限于定义它的方法内。而成员变量的作用域在整个类内部都是可见的。</p></li><li><p>同时在相同的方法中，不能有同名的局部变量；在不同的方法中，可以有同名的局部变量。</p></li><li><p>成员变量和局部变量同名时，局部变量具有更高的优先级。 </p>        <h3 id="对象"   >          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a>对象</h3>      <p>创建对象的语法如下：</p><p>  类名 对象名 = new 类名();</p></li></ul><p>定义类的时候不会为类开辟内存空间，但是一旦创建了对象，系统就会在内存中为对象开辟一块空间，用来存放对象的属性值和方法。</p><p>创建对象后，我们就要使用对象了，使用对象无非就是对属性和方法进行操作和调用。</p><p>语法如下：</p><pre><code>    //引用对象属性    对象名.属性    //引用对象方法    对象名.方法</code></pre>        <h3 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a>构造方法</h3>      <p>在面向对象中有一个非常重要的知识点，就是构造方法。每个类都有构造方法，在创建该类的对象的时候他们将被调用，如果没有定义构造方法，Java 编译器会提供一个默认构造方法。 创建一个对象的时候，至少调用一个构造方法。比如在新建一个对象 new Object()，括号中没有任何参数，代表调用一个无参构造方法（默认构造方法就是一个无参构造方法）。构造方法的名称必须与类名相同，一个类可以定义多个构造方法。</p><p>构造方法的具体内容：</p><ul><li><p>构造方法的名称与类名相同，且没有返回值。它的语法格式如下：</p><pre><code>  //与类同名，可以指定参数，没有返回值  public 构造方法名()&#123;  //初始化代码  &#125;</code></pre><p>  下面是一个构造方法的例子：</p><pre><code>  public class People&#123;      //无参构造方法      public People()&#123;      &#125;      //有一个参数的构造方法      public People(int age)&#123;      &#125;  &#125;</code></pre><p>  又例如具体的构造方法：</p><pre><code>  public class People &#123;      //属性（成员变量）有什么          double height;     //身高          int age;           //年龄          int sex;       //性别，0为男性，非0为女性      //构造方法，初始化了所有属性      public People(double h, int a, int s)&#123;          height = h;          age = a;          sex = s;      &#125;  &#125;</code></pre><p>  //创建对象，调用我们自己定义的有参构造方法<br>  People XiaoMing = new People(168, 21, 1);</p><p>  上面的例子中通过 new 关键字将类实例化成对象，而 new 后面跟的就是构造方法。于是可以知道 <strong>new + 构造方法</strong> 可以创建一个新的对象。</p></li><li><p>如果在定义类的时候没有写构造方法，系统会默认生成一个无参构造方法，这个构造方法什么也不会做。</p></li><li><p>当有指定的构造方法时，系统不会再添加无参构造方法了。</p></li><li><p>构造方法的重载：<strong>方法名相同，但参数不同</strong> 的多个方法，调用时会自动根据不同的参数选择相应的方法。</p></li></ul>        <h3 id="static"   >          <a href="#static" class="heading-link"><i class="fas fa-link"></i></a>static</h3>              <h4 id="静态成员"   >          <a href="#静态成员" class="heading-link"><i class="fas fa-link"></i></a>静态成员</h4>      <p>Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。</p>        <h4 id="静态方法"   >          <a href="#静态方法" class="heading-link"><i class="fas fa-link"></i></a>静态方法</h4>      <p>被 static 修饰的方法是静态方法，静态方法不依赖于对象，不需要将类实例化便可以调用，由于不实例化也可以调用，所以不能有 this，也不能访问非静态成员变量和非静态方法。但是非静态成员变量和非静态方法可以访问静态方法。</p>        <h3 id="final"   >          <a href="#final" class="heading-link"><i class="fas fa-link"></i></a>final</h3>      <p>final 关键字可以修饰类、方法、属性和变量</p><ul><li>final 修饰类，则该类不允许被继承，为最终类</li><li>final 修饰方法，则该方法不允许被覆盖（重写）</li><li>final 修饰属性：则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）</li><li>final 修饰变量，则该变量的值只能赋一次值，即常量</li></ul>        <h3 id="权限修饰符"   >          <a href="#权限修饰符" class="heading-link"><i class="fas fa-link"></i></a>权限修饰符</h3>      <p>权限修饰符可以用来修饰属性和方法的访问范围。</p><p>访问范围<br><img src="https://doc.shiyanlou.com/document-uid79144labid1072timestamp1434941168916.png"></p><p>默认 是什么修饰符都不加，默认在当前类中和同一包下都可以访问和使用。</p>        <h3 id="封装"   >          <a href="#封装" class="heading-link"><i class="fas fa-link"></i></a>封装</h3>      <p>封装，即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别</p><ul><li>只能通过规定的方法访问数据。</li><li>隐藏类的实例细节，方便修改和实现。</li></ul><p>实现类的封装</p><ul><li>修改属性的可见性，在属性的前面添加修饰符 (private)</li><li>对每个值属性提供对外的公共方法访问，如创建 getter/setter（取值和赋值）方法，用于对私有属性的访问</li><li>在 getter/setter 方法里加入属性的控制语句，例如我们可以加一个判断语句，对于非法输入给予否定。</li></ul>        <h3 id="this"   >          <a href="#this" class="heading-link"><i class="fas fa-link"></i></a>this</h3>      <p>this 关键字代表当前对象。使用 this. 属性 操作当前对象的属性，this. 方法 调用当前对象的方法。</p><p>用 private 修饰的属性，必须定义 getter 和 setter 方法才可以访问到 .</p><p>如下：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void setAge(int age) &#123;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">    return age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>创建好了 getter 和 setter 方法后，我们发现方法中参数名和属性名一样。</p><p>当成员变量和局部变量之间发生冲突时，在属性名前面添加了 this 关键字。 此时就代表将一个参数的值赋给当前对象的属性。同理 this 关键字可以调用当前对象的方法。</p>        <h3 id="继承"   >          <a href="#继承" class="heading-link"><i class="fas fa-link"></i></a>继承</h3>      <p>语法：</p><pre><code>class 子类 extends 父类</code></pre><p>继承的特点：</p><ul><li>子类拥有父类除 private 以外的所有属性和方法。</li><li>子类可以拥有自己的属性和方法。</li><li>子类可以重写实现父类的方法。</li><li>Java 中的继承是单继承，一个类只有一个父类。</li></ul><p>注：Java 实现多继承的一个办法是 implements（实现）接口，但接口不能有非静态的属性，这一点请注意。</p>        <h3 id="super"   >          <a href="#super" class="heading-link"><i class="fas fa-link"></i></a>super</h3>      <p>super 关键字在子类内部使用，代表父类对象。</p><ul><li>访问父类的属性 super.属性名。</li><li>访问父类的方法 super.方法名()。</li><li>子类构造方法需要调用父类的构造方法时，在子类的构造方法体里最前面的位置：super()。</li></ul>        <h3 id="多态"   >          <a href="#多态" class="heading-link"><i class="fas fa-link"></i></a>多态</h3>      <p>多态是指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。多态也称作动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</p><p>通俗地讲，只通过父类就能够引用不同的子类，这就是多态，我们只有在运行的时候才会知道引用变量所指向的具体实例对象。</p><p>多态的实现条件<br>Java 实现多态有三个必要条件：继承、重写和向上转型（即父类引用指向子类对象）。</p><p>只有满足上述三个条件，才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p><p>多态的实现方式<br>Java 中多态的实现方式：继承父类进行方法重写，抽象类和抽象方法，接口实现。</p>        <h3 id="向上转型"   >          <a href="#向上转型" class="heading-link"><i class="fas fa-link"></i></a>向上转型</h3>      <p>不能使用一个子类的引用去指向父类的对象，因为子类对象中可能会含有父类对象中所没有的属性和方法。</p><p>如果定义了一个指向子类对象的父类引用类型，那么它除了能够引用父类中定义的所有属性和方法外，还可以使用子类强大的功能。但是对于只存在于子类的方法和属性就不能获取。</p><p>向上转型，在运行时，会遗忘子类对象中与父类对象中不同的方法，也会覆盖与父类中相同的方法——重写（方法名，参数都相同）。</p>        <h3 id="抽象类"   >          <a href="#抽象类" class="heading-link"><i class="fas fa-link"></i></a>抽象类</h3>      <p>在定义类时，前面加上 <strong>abstract</strong>  关键字修饰的类叫抽象类。</p><p>抽象类中有抽象方法，这种方法是不完整的，仅有声明而没有方法体。抽象方法声明语法如下：</p><pre><code>abstract void f();  //f()方法是抽象方法</code></pre><p>抽象类是限制规定子类必须实现某些方法，但不关注实现细节。</p><p>抽象类规则如下：</p><ul><li>用 abstract 修饰符定义抽象类。</li><li>用 abstract 修饰符定义抽象方法，只用声明，不需要实现。</li><li>包含抽象方法的类就是抽象类。</li><li>抽象类中可以包含普通的方法，也可以没有抽象方法。</li><li>抽象类的对象不能直接创建，通常是定义引用变量指向子类对象。</li></ul>        <h3 id="接口"   >          <a href="#接口" class="heading-link"><i class="fas fa-link"></i></a>接口</h3>      <p>接口用于描述类所具有的功能，而不提供功能的实现，功能的实现需要写在实现接口的类中，并且该类必须实现接口中所有的未实现方法。</p><p>接口的声明语法格式如下：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名称 [extends 其他的接口名] &#123;</span><br><span class="line">        &#x2F;&#x2F; 声明变量</span><br><span class="line">        &#x2F;&#x2F; 抽象方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在 Java8 中：</p><ul><li>接口不能用于实例化对象。</li><li>接口中方法只能是抽象方法、default 方法、静态方法。</li><li>接口成员是 static final 类型。</li><li>接口支持多继承。</li></ul><p>在 Java9 中，接口可以拥有私有方法和私有静态方法，但是只能被该接口中的 default 方法和静态方法使用。</p><p>多继承实现方式：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface A extends 接口1，接口2&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">修饰符 class A implements 接口1，接口2&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="内部类"   >          <a href="#内部类" class="heading-link"><i class="fas fa-link"></i></a>内部类</h3>      <p>将一个类的定义放在另一个类的定义内部，这就是内部类。而包含内部类的类被称为外部类。</p><p>内部类的主要作用如下：</p><ul><li>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类</li><li>内部类的方法可以直接访问外部类的所有数据，包括私有的数据</li><li>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便</li><li>内部类允许继承多个非接口类型</li></ul><p>注：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为 outer 的外部类和其内部定义的名为 inner 的内部类。编译完成后出现 outer.class 和 outer$inner.class 两类。所以内部类的成员变量 / 方法名可以和外部类的相同。</p>        <h4 id="成员内部类的使用方法："   >          <a href="#成员内部类的使用方法：" class="heading-link"><i class="fas fa-link"></i></a>成员内部类的使用方法：</h4>      <ul><li>内部类相当于外部类的一个成员变量，所以内部类可以使用任意访问修饰符。</li><li>内部类里可以直接访问外部类的方法和属性，反之不行。</li><li>定义成员内部类后，必须使用外部类对象来创建内部类对象，即 内部类 对象名 = 外部类对象.new 内部类();或者  外部类.内部类 对象名 = 外部类对象.new 内部类() 。</li><li>如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，如果要访问外部类的成员变量，可以使用 this 关键字。</li></ul><p>注：成员内部类不能含有 static 的变量和方法，因为成员内部类需要先创建了外部类，才能创建它自己的。</p>        <h4 id="静态内部类"   >          <a href="#静态内部类" class="heading-link"><i class="fas fa-link"></i></a>静态内部类</h4>      <p>静态内部类是 static 修饰的内部类，这种内部类的特点是：</p><ul><li>静态内部类不能直接访问外部类的非静态成员，但可以通过 new 外部类().成员 的方式访问。</li><li>如果外部类的静态成员与内部类的成员名称相同，可通过 类名.静态成员 访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可通过 成员名 直接调用外部类的静态成员。</li><li>创建静态内部类的对象时，不需要外部类的对象，可以直接创建 内部类 对象名 = new 内部类();。</li></ul>        <h4 id="局部内部类"   >          <a href="#局部内部类" class="heading-link"><i class="fas fa-link"></i></a>局部内部类</h4>      <p>局部内部类，是指内部类定义在方法和作用域内。</p><p>局部内部类也像别的类一样进行编译，但只是作用域不同而已，只在该方法或条件的作用域内才能使用，退出这些作用域后无法引用的。</p>        <h3 id="包"   >          <a href="#包" class="heading-link"><i class="fas fa-link"></i></a>包</h3>      <p>为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</p><p>包的作用</p><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>包采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。</li><li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li></ul><p>定义包语法：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">package 包名</span><br><span class="line">&#x2F;&#x2F;注意：必须放在源程序的第一行，包名可用&quot;.&quot;号隔开</span><br></pre></td></tr></table></div></figure><p>Java系统中的包</p><p><img src="https://doc.shiyanlou.com/document-uid79144labid1072timestamp1434937042272.png"></p><p>使用 import 关键字进行导包。</p><p>包的命名规范是全小写字母拼写。</p>        <h2 id="常用类"   >          <a href="#常用类" class="heading-link"><i class="fas fa-link"></i></a>常用类</h2>              <h3 id="Arrays"   >          <a href="#Arrays" class="heading-link"><i class="fas fa-link"></i></a>Arrays</h3>      <p>Arrays常用方法</p><p>Arrays 类包含用于操作数组的各种方法（例如排序和搜索）。还包含一个静态工厂，允许将数组转为 List。</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>List asList(T… a)</td><td>返回由指定数组构造的 List</td></tr><tr><td>void sort(Object[] a)</td><td>对数组进行排序</td></tr><tr><td>void fill(Object[] a, Object val)</td><td>为数组的所有元素都赋上相同的值</td></tr><tr><td>boolean equals(Object[] a, Object[] a2)</td><td>检查两个数组是否相等</td></tr><tr><td>int binarySearch(Object[] a, Object key)</td><td>对排序后的数组使用二分法查找数据</td></tr></tbody></table></div>        <h3 id="StringBuilder"   >          <a href="#StringBuilder" class="heading-link"><i class="fas fa-link"></i></a>StringBuilder</h3>      <p>StringBuilder 类是可变的。它是 String 的对等类，它可以增加和编写字符的可变序列，并且能够将字符插入到字符串中间或附加到字符串末尾（不用创建其他对象）。</p><p>StringBuilder 的构造方法：</p><div class="table-container"><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>StringBuilder()</td><td>构造一个其中不带字符的 StringBuilder其初始容量为 16 个字符</td></tr><tr><td>StringBuilder(CharSequence seq)</td><td>构造一个 StringBuilder，它包含与指定的 CharSequence 相同的字符</td></tr><tr><td>StringBuilder(int capacity)</td><td>构造一个具有指定初始容量的 StringBuilder</td></tr><tr><td>StringBuilder(String str)</td><td>并将其内容初始化为指定的字符串内容</td></tr></tbody></table></div><p>StringBuilder 类的常用方法：</p><div class="table-container"><table><thead><tr><th>方法</th><th>返回值</th><th>功能描述</th></tr></thead><tbody><tr><td>insert(int offsetm,Object obj)</td><td>StringBuilder</td><td>在 offsetm 的位置插入字符串 obj</td></tr><tr><td>append(Object obj)</td><td>StringBuilder</td><td>在字符串末尾追加字符串 obj</td></tr><tr><td>length()</td><td>int</td><td>确定 StringBuilder 对象的长度</td></tr><tr><td>setCharAt(int index,char ch)</td><td>void</td><td>使用 ch 指定的新值设置 index 指定的位置上的字符</td></tr><tr><td>toString()</td><td>String</td><td>转换为字符串形式</td></tr><tr><td>reverse()</td><td>StringBuilder</td><td>反转字符串</td></tr><tr><td>delete(int start, int end)</td><td>StringBuilder</td><td>删除调用对象中从 start 位置开始直到 end 指定的索引（end-1）位置的字符序列</td></tr><tr><td>replace(int start, int end, String str)</td><td>StringBuilder</td><td>使用一组字符替换另一组字符。将用替换字符串从 start 指定的位置开始替换，直到 end 指定的位置结束</td></tr></tbody></table></div>        <h3 id="Date"   >          <a href="#Date" class="heading-link"><i class="fas fa-link"></i></a>Date</h3>      <p>Date 类表示日期和时间，里面封装了操作日期和时间的方法。Date 类经常用来获取系统当前时间。</p><p>Date 中定义的未过时的构造方法：</p><ul><li>Date()  构造一个 Date 对象并对其进行初始化以反映当前时间</li><li>Date(long date)    构造一个 Date 对象，并根据相对于 GMT 1970 年 1 月 1 日 00:00:00 的毫秒数对其进行初始化</li></ul>        <h3 id="System"   >          <a href="#System" class="heading-link"><i class="fas fa-link"></i></a>System</h3>      <p>System 类提供了以下功能：</p><ul><li>标准输入，标准输出和错误输出流；</li><li>访问外部定义的属性和环境变量；</li><li>加载文件和库的方法；</li><li>用于快速复制数组的实用方法。</li></ul><p>System 不可以被实例化，只可以使用其静态方法。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;从指定的源数组中复制一个数组，从源数组指定的位置开始，到目标数组指定的位置</span><br><span class="line">public static void arraycopy(Object src,int srcPos, Object dest,int desPos,int length)</span><br><span class="line">&#x2F;&#x2F;返回以毫秒为单位的当前时间(从1970年到现在的毫秒数)</span><br><span class="line">public static long currentTimeMillis()</span><br><span class="line">&#x2F;&#x2F;终止当前正在运行的Java虚拟机，status为 0时退出</span><br><span class="line">public static void exit(int status)</span><br><span class="line">&#x2F;&#x2F;  运行垃圾收集器</span><br><span class="line">public static void gc()</span><br><span class="line">&#x2F;&#x2F; 取得当前系统的全部属性</span><br><span class="line">public static Properties getProperties()</span><br><span class="line">&#x2F;&#x2F;获取指定键的系统属性</span><br><span class="line">public static String  getProperty(String key)</span><br></pre></td></tr></table></div></figure>        <h3 id="Random"   >          <a href="#Random" class="heading-link"><i class="fas fa-link"></i></a>Random</h3>      <p>Random 类用于生成伪随机数流，在 java.util包下。</p><pre><code>Random random = new Random();</code></pre>        <h2 id="泛型"   >          <a href="#泛型" class="heading-link"><i class="fas fa-link"></i></a>泛型</h2>      ]]></content>
    
    
    <summary type="html">&lt;p&gt;复习java，顺便写一下java笔记&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>大二下学期开始啦</title>
    <link href="http://example.com/2021/03/05/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://example.com/2021/03/05/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E5%BC%80%E5%A7%8B/</id>
    <published>2021-03-05T12:47:20.782Z</published>
    <updated>2021-09-27T13:43:43.673Z</updated>
    
    <content type="html"><![CDATA[<p>进入三月，虽然早就入春，但还是很冷！趁着周五，以及不想再继续看学习视频，再看了看自己三个月没更的博客，于是滚来写博客了。</p><a id="more"></a>        <h1 id="关于大二上学期的总结以及下学期的计划"   >          <a href="#关于大二上学期的总结以及下学期的计划" class="heading-link"><i class="fas fa-link"></i></a>关于大二上学期的总结以及下学期的计划</h1>              <h2 id="上学期的总结"   >          <a href="#上学期的总结" class="heading-link"><i class="fas fa-link"></i></a>上学期的总结</h2>      <p>首先来说，最好的就是没有挂科吧！（经过期末无比艰辛的学习）。上学期的关键词大概是：忙，熬夜，实验报告，焦虑。首先就是无比多的课程，让人完全没有时间做想做的事情，虽然也趁着课比较少的11月学习了前端知识，做了一个项目，在这其中穿插着无数的实验报告。然后就是考试和永远上不完的课，写不完的实验报告，以及令人充实却又劳累的期末复习。就只有一个感觉：忙！忙！忙！期末的时候被催着选定项目，在复习如此繁重的情况下，简直令人崩溃。。。</p>        <h4 id="总结："   >          <a href="#总结：" class="heading-link"><i class="fas fa-link"></i></a>总结：</h4>      <ul><li>学习了前端知识</li><li>做了一个网页设计大赛的项目（结果出来了，没获奖🙁）</li><li>没有挂科</li></ul>        <h2 id="寒假"   >          <a href="#寒假" class="heading-link"><i class="fas fa-link"></i></a>寒假</h2>      <p>首先是在学校留了几天，一个人住寝室的感觉没有想象中好。在学校的几天学习了网安方面的知识，（虽然当时已经不想学了）然后回家，休息了两天之后就开始了冬令营（网安方向），接触了一些之前没有学过的知识，感觉还是有很多收获的。<br>之后就开始了服创的项目。不过感觉之前学的太累了，，休息了半个月之后，开始做项目。前期基本就是一直看论文，找数据集，在做准备工作。过年期间，这次过年走了挺多亲戚的，也到其他地方玩了一下，感觉比往年好很多。比起宅在家里，出去走走也挺好的。</p>        <h2 id="下学期的计划"   >          <a href="#下学期的计划" class="heading-link"><i class="fas fa-link"></i></a>下学期的计划</h2>      <p>这学期的课少了很多，感觉轻松了很多，不过反而让人感觉有点不习惯，慢慢适应节奏。已经决定好不学网安方向了，目前比较感兴趣的是开发方向。再看看吧，感觉在网安方面也做了挺多了努力的，说的时候感觉没啥，现在写博客的时候突然感觉心里有点空，，，（这就是文字的力量？？）这学期的打算是，先做完服创的项目，然后看是要接着申报大创还是开始学习我感兴趣的东西，这个还不能确定。同时，学好专业课！不要挂科！</p>        <h4 id="规划"   >          <a href="#规划" class="heading-link"><i class="fas fa-link"></i></a>规划</h4>      <ul><li><p>把服创项目做完</p></li><li><p>学好专业课，不挂科</p></li><li><p>……</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;进入三月，虽然早就入春，但还是很冷！趁着周五，以及不想再继续看学习视频，再看了看自己三个月没更的博客，于是滚来写博客了。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>java环境配置教程</title>
    <link href="http://example.com/2020/12/03/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2020/12/03/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</id>
    <published>2020-12-03T11:28:24.382Z</published>
    <updated>2021-04-27T12:18:03.434Z</updated>
    
    <content type="html"><![CDATA[<p>由于学习要用到brupsuite,但之前配置好的jdk14不行，所以重新下载了jdk1.8，在安装中遇到一些问题，在这里记录下来。</p><a id="more"></a>        <h2 id="下载"   >          <a href="#下载" class="heading-link"><i class="fas fa-link"></i></a>下载</h2>      <p>在官网下载<span class="exturl"><a class="exturl__link"   href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" >jdk</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，你可以选择不同的版本，我这里选择的是1.8版本。</p><p>由于我是Windows64位的电脑，所以选择的是红色框的那个，你可以根据你电脑的属性来选择应该下载哪儿。<br><img src="https://i.bmp.ovh/imgs/2020/12/ec401f3da4532772.png"><br>下载好后（速度可能会很慢，，），安装即可。注意记住安装路径，这对之后的环境的配置有很大的用处！</p>        <h2 id="环境配置"   >          <a href="#环境配置" class="heading-link"><i class="fas fa-link"></i></a>环境配置</h2>      <p>安装好后，右键单击 <strong>此电脑</strong> ，选择<strong>属性</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/a85bb7fb74a87611.png"><br>点击<strong>高级系统设置</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/f238ad76b2d4e6b1.png"><br>点击<strong>环境变量</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/8cb117d0caf34212.png"><br>在系统变量的下方，点击<strong>新建</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/f141264322b3d41f.png"><br>变量名：<strong>CLASSPATH</strong></p><p>变量值： <strong>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</strong>  (注意开始是.;)<br><img src="https://i.bmp.ovh/imgs/2020/12/d7d3f84dfc17d71a.png"><br>变量名： <strong>JAVA_HOME</strong></p><p>变量值：<strong>D:\java1\jdk8</strong>（此处请填你jdk安装的路径！）<br><img src="https://i.bmp.ovh/imgs/2020/12/ae496e9d67fac7c8.png"><br>双击<strong>PATH</strong><br><img src="https://i.bmp.ovh/imgs/2020/12/08263be164b7196c.png"><br>将<strong>D:\java1\jdk8\bin、D:\java1\jdk8\jre\bin</strong> 分别添加进去(<strong>此处请填你jdk安装的路径！</strong>)（win7可以写做1条，win10写为两条）<br><img src="https://i.bmp.ovh/imgs/2020/12/6dbe4613552c5b96.png"><br>最后点击确定，就配置好了java环境。</p>        <h2 id="检验是否配置正确"   >          <a href="#检验是否配置正确" class="heading-link"><i class="fas fa-link"></i></a>检验是否配置正确</h2>      <p>win+r,输入cmd，进入命令行界面。输入java<br><img src="https://i.bmp.ovh/imgs/2020/12/d5991ed9e4686499.png"><br>输入javac<br><img src="https://i.bmp.ovh/imgs/2020/12/94c9fbeb764b2eeb.png"></p><p>输入java -version<br><img src="https://i.bmp.ovh/imgs/2020/12/c15e8f187a07d897.png"></p><p>如图所示，则java环境配置成功！！</p>        <h2 id="javac不是内部或外部命令，也不是可运行的程序-或批处理文件的细节问题"   >          <a href="#javac不是内部或外部命令，也不是可运行的程序-或批处理文件的细节问题" class="heading-link"><i class="fas fa-link"></i></a>javac不是内部或外部命令，也不是可运行的程序 或批处理文件的细节问题</h2>      <p>解决方法：</p><p>1、如果是按照上面的方法进行配置的，那么请检查你的jdk文件中的bin文件中，是否有<strong>javac.exe</strong>这个文件，如果没有，你需要重新下载jdk<br><img src="https://i.bmp.ovh/imgs/2020/12/189acd797bf730f1.png"></p><p>2、在设置变量时，不要使用相对定位，使用绝对定位<br>相对定位：%JAVA_HOME%\bin;<br>绝对定位：D:\java1\jdk8\bin;（你的jdk下载路径！！）</p><p>3、检查你是否将PATH变量中的两行写成了一行</p>        <h2 id="如何打开jar文件"   >          <a href="#如何打开jar文件" class="heading-link"><i class="fas fa-link"></i></a>如何打开jar文件</h2>      <p>1、打开cmd，将jar文件拖入其中<br>2、打开cmd，输入<strong>regedit</strong>注册表编辑器，找到<strong>HKEY_CLASSES_ROOT\jarfile\shell\open\command</strong>，（你可以在红框处直接搜索。<br><img src="https://i.bmp.ovh/imgs/2020/12/1d90a000103e362b.png"><br><img src="https://i.bmp.ovh/imgs/2020/12/777fd9c6934c59db.png"></p><p>双击，将红框中内容修改为”D:\java1\jdk8\bin\javaw.exe” -jar “%1” %*，注意！画红线处的地方为你的jdk下载路径。<br><img src="https://i.bmp.ovh/imgs/2020/12/ee2ee2cbf0afbb59.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于学习要用到brupsuite,但之前配置好的jdk14不行，所以重新下载了jdk1.8，在安装中遇到一些问题，在这里记录下来。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年11月要结束了</title>
    <link href="http://example.com/2020/11/28/2020.11/"/>
    <id>http://example.com/2020/11/28/2020.11/</id>
    <published>2020-11-28T06:28:10.934Z</published>
    <updated>2021-04-27T12:17:29.931Z</updated>
    
    <content type="html"><![CDATA[<p>   已经一个快一个月没有写博客了，这一个月干了些什么呢？<br>   <a id="more"></a></p>        <h2 id="2020年11月———大二上学期"   >          <a href="#2020年11月———大二上学期" class="heading-link"><i class="fas fa-link"></i></a>2020年11月———大二上学期</h2>      <p>   首先成功进实验室了吧，感谢室友QDQ。然后参加了国信安的网页设计，在QDQ的鼓励下，让我不要瞻前顾后。确实我好像不喜欢在没有充分的准备下去做一些事，容易还没做的时候就先告诉自己不行。这得改啊！总之十分感谢QDQ，最后在她的鼓励下成功参赛，带着我开始了这个项目。</p><p>   之后就一直在做这个项目了，由于什么都不会，所以得从看网课开始，这属实是一件痛苦的事。每天去实验室就打开小破站开始看网课，终于天天看，夜夜看，在差不多22号的时候看完了吧。中间由于大物考试，停了一个星期，还好考试应该是能顺利通过的！！以后我的人生中就再也没有物理了呜呜呜！！！</p><p>   看完网课终于可以开始做啦！花了大概一个星期吧，把网站给写好了，emmmm，感觉不是很难，不过有很多细节没有处理好，特别是该死的定位，，，还有有QDQ，和她一起改到了12点过。QDQ，永远滴神！反正删删改改，网页最后是给做好了。</p><p>   11月是忙碌的一个月(可能也不是很忙，，)，但总之应该是有意义的，第一次写了一个网页，完成了一个项目。嗯，，，总之11月就这样过完了，接下来就是2020年的最后一个月了，希望可以保持11月这个学习的状态！冲冲冲！！！</p><p>   <img src="https://ftp.bmp.ovh/imgs/2020/11/748385bdcd96f2d2.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;   已经一个快一个月没有写博客了，这一个月干了些什么呢？&lt;br&gt;</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>PTA练习总结</title>
    <link href="http://example.com/2020/11/05/PTA%E7%BB%83%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/11/05/PTA%E7%BB%83%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-05T13:29:40.972Z</published>
    <updated>2021-03-21T02:40:17.357Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="练习2-15-交错的加减运算"   >          <a href="#练习2-15-交错的加减运算" class="heading-link"><i class="fas fa-link"></i></a>练习2-15 交错的加减运算</h2>      <p>练习2-15 求简单交错序列前N项和 (15分)<br>本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + … 的前N项之和。</p><a id="more"></a><p>输入格式:</p><p>输入在一行中给出一个正整数N。</p><p>输出格式:</p><p>在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。</p><p>输入样例:</p><pre><code>10</code></pre><p>输出样例:</p><pre><code>sum = 0.819</code></pre><p>在做这个题中遇到的问题是，没有掌握到如何进行交错的加减运算，在搜索之后发现，需要在循环中加一个 x = -x 即可。（我太菜了，是个憨批）</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/2c44fa7e11871fae.png"></p>        <h2 id="习题2-6-在循环后进行清零"   >          <a href="#习题2-6-在循环后进行清零" class="heading-link"><i class="fas fa-link"></i></a>习题2-6 在循环后进行清零</h2>      <p>习题2-6 求阶乘序列前N项和 (15分)<br>本题要求编写程序，计算序列 1!+2!+3!+⋯ 的前N项之和。</p><p>输入格式:<br>输入在一行中给出一个不超过12的正整数N。</p><p>输出格式:<br>在一行中输出整数结果。</p><p>输入样例:</p><pre><code>5</code></pre><p>输出样例:</p><pre><code>153</code></pre><p>做这道题遇到的问题是，计算所得的数非常大，两个循环的思路是没有问题的，但关键在于，没有在第二个循环处将sum1的值再次变1。所以，只需要在第一个循环的内容加一个 sum1 = 1；且加在最前面即可。<br><img src="https://i.bmp.ovh/imgs/2020/11/a7f0bcbe56fc14f4.png"></p>        <h2 id="练习3-3-c语言变量的初始化赋值"   >          <a href="#练习3-3-c语言变量的初始化赋值" class="heading-link"><i class="fas fa-link"></i></a>练习3-3 c语言变量的初始化赋值</h2>      <p>在做练习3-3时，average的平均数算出来非常的大，在检查算法后发现并没有出错，最后发现是没有对sum进行初始化赋值。在C语言中，如果没有对一个变量进行赋值，则为给它随机分配一个值，这就是为什么average非常大的原因，因为给sum随机赋了一个非常的值。</p><p><img src="https://i.bmp.ovh/imgs/2020/11/89097591beedba30.png"></p>        <h2 id="习题3-5-三角形的判断"   >          <a href="#习题3-5-三角形的判断" class="heading-link"><i class="fas fa-link"></i></a>习题3-5 三角形的判断</h2>      <p>C语言中，三角形判断的方式</p><pre><code>if(a&lt;(b+c) &amp;&amp; b&lt;(a+c) &amp;&amp; c&lt;(a+b))</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;练习2-15-交错的加减运算&quot;   &gt;
          &lt;a href=&quot;#练习2-15-交错的加减运算&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;练习2-15 交错的加减运算&lt;/h2&gt;
      &lt;p&gt;练习2-15 求简单交错序列前N项和 (15分)&lt;br&gt;本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + … 的前N项之和。&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="http://example.com/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>PTA练习2-12输出华氏-摄氏温度转换表</title>
    <link href="http://example.com/2020/10/23/PTA2-12/"/>
    <id>http://example.com/2020/10/23/PTA2-12/</id>
    <published>2020-10-23T11:21:04.976Z</published>
    <updated>2021-03-21T02:40:05.053Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="题目如下："   >          <a href="#题目如下：" class="heading-link"><i class="fas fa-link"></i></a>题目如下：</h2>      <p>请输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。</p><p>温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。</p><a id="more"></a><p>输入格式:<br>在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开。</p><p>输出格式:<br>第一行输出：”fahr celsius”</p><p>接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。</p><p>若输入的范围不合法，则输出”Invalid.”</p><p>输入样例1:</p><blockquote><p>32 35</p></blockquote><p>输出样例1:</p><blockquote><p>fahr celsius</p></blockquote><blockquote><p>32   0.0</p></blockquote><blockquote><p>34   1.1</p></blockquote><p>输入样例2:</p><blockquote><p>40 30</p></blockquote><p>输出样例2:</p><blockquote><p>Invalid.</p></blockquote>        <h2 id="代码如下"   >          <a href="#代码如下" class="heading-link"><i class="fas fa-link"></i></a>代码如下:</h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    double celsius;</span><br><span class="line">    int lower;</span><br><span class="line">    int upper;</span><br><span class="line">    int fahr;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;lower,&amp;upper);</span><br><span class="line">    if(lower &lt;&#x3D; upper &amp;&amp; 0&lt;lower &amp;&amp; lower&lt;&#x3D;100 &amp;&amp; upper&lt;&#x3D;100 &amp;&amp; upper&gt;0)&#123;</span><br><span class="line">    printf(&quot;fahr celsius\n&quot;);</span><br><span class="line">    for(fahr&#x3D;lower;fahr&lt;&#x3D;upper;fahr&#x3D;fahr + 2)&#123;</span><br><span class="line">        celsius &#x3D; 5.0 * (fahr - 32)&#x2F;9.0 ;  </span><br><span class="line">        printf(&quot;%d%6.1f\n&quot;, fahr,celsius);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        printf(&quot;Invalid.&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="https://i.bmp.ovh/imgs/2020/11/747b6671bbad4193.png"></p>        <h2 id="知识点："   >          <a href="#知识点：" class="heading-link"><i class="fas fa-link"></i></a>知识点：</h2>      <p>1.C语言如果控制字符宽度和保留指定的小数数位<br>  在输出时：**%字符宽度.小数数位f**</p><p>2   a.c: In function ‘main’:<br>a.c:9:5: warning: ignoring return value of ‘scanf’, declared with attribute warn_unused_result [-Wunused-result]<br>     (void)scanf(“%d %d”, &amp;lower,&amp;upper);<br>     ^<del>~</del></p><p>当报出如下错误时，不一定是输入有问题，有可能是输出，算法有问题。所以此时你可以对你的所有代码进行检查。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目如下：&quot;   &gt;
          &lt;a href=&quot;#题目如下：&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;题目如下：&lt;/h2&gt;
      &lt;p&gt;请输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。&lt;/p&gt;
&lt;p&gt;温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。&lt;/p&gt;</summary>
    
    
    
    <category term="练习" scheme="http://example.com/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个博客</title>
    <link href="http://example.com/2020/09/28/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2020/09/28/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-09-28T09:00:04.784Z</published>
    <updated>2021-03-21T02:27:27.954Z</updated>
    
    <content type="html"><![CDATA[<p>我的第一个博客</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的第一个博客&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
